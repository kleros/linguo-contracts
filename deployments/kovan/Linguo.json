{
  "address": "0xe7639637b3f1ba4ab7627B18593857Ca82cf8209",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_arbitratorExtraData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_reviewTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_translationMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengeMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sharedStakeMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_winnerStakeMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loserStakeMultiplier",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Linguo.Party",
          "name": "_party",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "AppealContribution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_metaEvidenceID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_evidenceGroupID",
          "type": "uint256"
        }
      ],
      "name": "Dispute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_evidenceGroupID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "Evidence",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Linguo.Party",
          "name": "_party",
          "type": "uint8"
        }
      ],
      "name": "HasPaidAppealFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_metaEvidenceID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "MetaEvidence",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "Ruling",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_translator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "TaskAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "TaskCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "TaskResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "TranslationChallenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_translator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_translatedText",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "TranslationSubmitted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MULTIPLIER_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_ID",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "acceptTranslation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "amountWithdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "internalType": "contract IArbitrator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitratorExtraData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "assignTask",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "batchRoundWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "challengeMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "challengeTranslation",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengeMultiplier",
          "type": "uint256"
        }
      ],
      "name": "changeChallengeMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "changeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loserStakeMultiplier",
          "type": "uint256"
        }
      ],
      "name": "changeLoserStakeMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reviewTimeout",
          "type": "uint256"
        }
      ],
      "name": "changeReviewTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sharedStakeMultiplier",
          "type": "uint256"
        }
      ],
      "name": "changeSharedStakeMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_translationMultiplier",
          "type": "uint256"
        }
      ],
      "name": "changeTranslationMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_winnerStakeMultiplier",
          "type": "uint256"
        }
      ],
      "name": "changeWinnerStakeMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minPrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metaEvidence",
          "type": "string"
        }
      ],
      "name": "createTask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "taskID",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputeIDtoTaskID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "enum Linguo.Party",
          "name": "_side",
          "type": "uint8"
        }
      ],
      "name": "fundAppeal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "getChallengeValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        }
      ],
      "name": "getContributions",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "contributions",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "getDepositValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "getNumberOfRounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "getRoundInfo",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "paidFees",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool[3]",
          "name": "hasPaid",
          "type": "bool[3]"
        },
        {
          "internalType": "uint256",
          "name": "feeRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTaskCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "getTaskParties",
      "outputs": [
        {
          "internalType": "address payable[3]",
          "name": "parties",
          "type": "address[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "getTaskPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loserStakeMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "reimburseRequester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reviewTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "rule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharedStakeMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "submitEvidence",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_translation",
          "type": "string"
        }
      ],
      "name": "submitTranslation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tasks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "submissionTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "enum Linguo.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "lastInteraction",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "requesterDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sumDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "disputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ruling",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "translationMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerStakeMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "withdrawFeesAndRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2cdbb11ba6a3af5fd1b2568cba0935d04839a4f3bc9e7a956c94ad08ded71cff",
  "receipt": {
    "to": null,
    "from": "0xceB4c079Dd21494E0bc99DA732EAdf220b727389",
    "contractAddress": "0xe7639637b3f1ba4ab7627B18593857Ca82cf8209",
    "transactionIndex": 0,
    "gasUsed": "3218689",
    "logsBloom": "0x
    "blockHash": "0xb4d8c9d677569157b4fae020529549bdf889b232697ad4728df18c540bbca5b5",
    "transactionHash": "0x2cdbb11ba6a3af5fd1b2568cba0935d04839a4f3bc9e7a956c94ad08ded71cff",
    "logs": [],
    "blockNumber": 21643447,
    "cumulativeGasUsed": "3218689",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA8243657a1E6ad1AAf2b59c4CCDFE85fC6fD7a8B",
    "0x",
    "86400",
    "1000",
    "0",
    "10000",
    "5000",
    "20000"
  ],
  "solcInputHash": "0x834fac1401dd18ec1a27b1c0cc86ab92685a0b2da971e9ef32ec80543cc7ffc6",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_arbitratorExtraData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_reviewTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_translationMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengeMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharedStakeMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winnerStakeMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loserStakeMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Linguo.Party\",\"name\":\"_party\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AppealContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_evidenceGroupID\",\"type\":\"uint256\"}],\"name\":\"Dispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_evidenceGroupID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"Evidence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Linguo.Party\",\"name\":\"_party\",\"type\":\"uint8\"}],\"name\":\"HasPaidAppealFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"MetaEvidence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"Ruling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_translator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"TaskAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"TaskResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"TranslationChallenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_translator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_translatedText\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"TranslationSubmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MULTIPLIER_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_ID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"acceptTranslation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"amountWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"contract IArbitrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitratorExtraData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"assignTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"batchRoundWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"challengeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"challengeTranslation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeMultiplier\",\"type\":\"uint256\"}],\"name\":\"changeChallengeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loserStakeMultiplier\",\"type\":\"uint256\"}],\"name\":\"changeLoserStakeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reviewTimeout\",\"type\":\"uint256\"}],\"name\":\"changeReviewTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharedStakeMultiplier\",\"type\":\"uint256\"}],\"name\":\"changeSharedStakeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_translationMultiplier\",\"type\":\"uint256\"}],\"name\":\"changeTranslationMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winnerStakeMultiplier\",\"type\":\"uint256\"}],\"name\":\"changeWinnerStakeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metaEvidence\",\"type\":\"string\"}],\"name\":\"createTask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taskID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputeIDtoTaskID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"enum Linguo.Party\",\"name\":\"_side\",\"type\":\"uint8\"}],\"name\":\"fundAppeal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"getChallengeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"getContributions\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"contributions\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"getDepositValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"getNumberOfRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundInfo\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"paidFees\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool[3]\",\"name\":\"hasPaid\",\"type\":\"bool[3]\"},{\"internalType\":\"uint256\",\"name\":\"feeRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaskCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"getTaskParties\",\"outputs\":[{\"internalType\":\"address payable[3]\",\"name\":\"parties\",\"type\":\"address[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"getTaskPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"reimburseRequester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reviewTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharedStakeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"submitEvidence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_translation\",\"type\":\"string\"}],\"name\":\"submitTranslation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tasks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"submissionTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"enum Linguo.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastInteraction\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requesterDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"translationMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerStakeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"withdrawFeesAndRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AppealContribution(uint256,uint8,address,uint256)\":{\"details\":\"To be emitted when someone contributes to the appeal process.\",\"params\":{\"_amount\":\"The amount contributed.\",\"_contributor\":\"The address of the contributor.\",\"_party\":\"The party which received the contribution.\",\"_taskID\":\"The ID of the respective task.\"}},\"HasPaidAppealFee(uint256,uint8)\":{\"details\":\"To be emitted when the appeal fees of one of the parties are fully funded.\",\"params\":{\"_party\":\"The party that is fully funded.\",\"_taskID\":\"The ID of the respective task.\"}},\"TaskAssigned(uint256,address,uint256,uint256)\":{\"details\":\"To be emitted when a translator assigns the task to himself.\",\"params\":{\"_price\":\"The task price at the moment it was assigned.\",\"_taskID\":\"The ID of the assigned task.\",\"_timestamp\":\"When the task was assigned.\",\"_translator\":\"The address that was assigned to the task.\"}},\"TaskCreated(uint256,address,uint256)\":{\"details\":\"To be emitted when the new task is created.\",\"params\":{\"_requester\":\"The address that created the task.\",\"_taskID\":\"The ID of the newly created task.\",\"_timestamp\":\"When the task was created.\"}},\"TaskResolved(uint256,string,uint256)\":{\"details\":\"To be emitted when a task is resolved, either by the translation being accepted, the requester being reimbursed or a dispute being settled.\",\"params\":{\"_reason\":\"Short description of what caused the task to be solved. One of: 'translation-accepted' | 'requester-reimbursed' | 'dispute-settled'\",\"_taskID\":\"The ID of the respective task.\",\"_timestamp\":\"When the task was resolved.\"}},\"TranslationChallenged(uint256,address,uint256)\":{\"details\":\"To be emitted when a translation is challenged.\",\"params\":{\"_challenger\":\"The address of the challenger.\",\"_taskID\":\"The ID of the respective task.\",\"_timestamp\":\"When the task was challenged.\"}},\"TranslationSubmitted(uint256,address,string,uint256)\":{\"details\":\"To be emitted when a translation is submitted.\",\"params\":{\"_taskID\":\"The ID of the respective task.\",\"_timestamp\":\"When the translation was submitted.\",\"_translatedText\":\"A URI to the translated text.\",\"_translator\":\"The address that performed the translation.\"}}},\"kind\":\"dev\",\"methods\":{\"acceptTranslation(uint256)\":{\"details\":\"Pays the translator for completed task if no one challenged the translation during review period.\",\"params\":{\"_taskID\":\"The ID of the task.\"}},\"amountWithdrawable(uint256,address)\":{\"details\":\"Returns the sum of withdrawable wei from appeal rounds. This function is O(n), where n is the number of rounds of the task. This could exceed the gas limit, therefore this function should only be used for interface display and not by other contracts.\",\"params\":{\"_beneficiary\":\"The contributor for which to query.\",\"_taskID\":\"The ID of the associated task.\"},\"returns\":{\"total\":\"The total amount of wei available to withdraw.\"}},\"assignTask(uint256)\":{\"details\":\"Assigns a specific task to the sender. Requires a translator's deposit.  Note that the deposit should be a little higher than the required value because of the price increase during the time the transaction is mined. The surplus will be reimbursed.\",\"params\":{\"_taskID\":\"The ID of the task.\"}},\"batchRoundWithdraw(address,uint256,uint256,uint256)\":{\"details\":\"Withdraws contributions of multiple appeal rounds at once. This function is O(n) where n is the number of rounds. This could exceed the gas limit, therefore this function should be used only as a utility and not be relied upon by other contracts.\",\"params\":{\"_beneficiary\":\"The address that made contributions.\",\"_count\":\"The number of rounds to iterate. If set to 0 or a value larger than the number of rounds, iterates until the last round.\",\"_cursor\":\"The round from where to start withdrawing.\",\"_taskID\":\"The ID of the associated task.\"}},\"challengeTranslation(uint256,string)\":{\"details\":\"Challenges the translation of a specific task. Requires challenger's deposit.\",\"params\":{\"_evidence\":\"A link to evidence using its URI. Ignored if not provided.\",\"_taskID\":\"The ID of the task.\"}},\"changeChallengeMultiplier(uint256)\":{\"details\":\"Changes the multiplier for challenger's deposit.\",\"params\":{\"_challengeMultiplier\":\"A new value of the multiplier for calculating challenger's deposit. In basis points.\"}},\"changeGovernor(address)\":{\"details\":\"Changes the governor of this contract.\",\"params\":{\"_governor\":\"A new governor.\"}},\"changeLoserStakeMultiplier(uint256)\":{\"details\":\"Changes the percentage of arbitration fees that must be paid as a fee stake by the party that lost the previous round.\",\"params\":{\"_loserStakeMultiplier\":\"A new value of the multiplier of the appeal cost that the party that lost the previous round has to pay. In basis points.\"}},\"changeReviewTimeout(uint256)\":{\"details\":\"Changes the time allocated for review phase.\",\"params\":{\"_reviewTimeout\":\"A new value of the time allotted for reviewing a translation. In seconds.\"}},\"changeSharedStakeMultiplier(uint256)\":{\"details\":\"Changes the percentage of arbitration fees that must be paid by parties as a fee stake if there was no winner and loser in the previous round.\",\"params\":{\"_sharedStakeMultiplier\":\"A new value of the multiplier of the appeal cost in case when there is no winner/loser in previous round. In basis point.\"}},\"changeTranslationMultiplier(uint256)\":{\"details\":\"Changes the multiplier for translator's deposit.\",\"params\":{\"_translationMultiplier\":\"A new value of the multiplier for calculating translator's deposit. In basis points.\"}},\"changeWinnerStakeMultiplier(uint256)\":{\"details\":\"Changes the percentage of arbitration fees that must be paid as a fee stake by the party that won the previous round.\",\"params\":{\"_winnerStakeMultiplier\":\"A new value of the multiplier of the appeal cost that the winner of the previous round has to pay. In basis points.\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_arbitrator\":\"The arbitrator of the contract.\",\"_arbitratorExtraData\":\"Extra data for the arbitrator.\",\"_challengeMultiplier\":\"Multiplier for calculating challenger's deposit. In basis points.\",\"_loserStakeMultiplier\":\"Multiplier of the appeal cost that the loser has to pay for a round. In basis points.\",\"_reviewTimeout\":\"Time in seconds during which a translation can be challenged.\",\"_sharedStakeMultiplier\":\"Multiplier of the appeal cost that submitter must pay for a round when there is no winner/loser in the previous round. In basis points.\",\"_translationMultiplier\":\"Multiplier for calculating translator's deposit. In basis points.\",\"_winnerStakeMultiplier\":\"Multiplier of the appeal cost that the winner has to pay for a round. In basis points.\"}},\"createTask(uint256,uint256,string)\":{\"details\":\"Creates a task based on provided details. Requires a value of maximal price to be deposited.\",\"params\":{\"_deadline\":\"The deadline for the translation to be completed.\",\"_metaEvidence\":\"A URI of meta-evidence object for task submission.\",\"_minPrice\":\"A minimal price of the translation. In wei.\"},\"returns\":{\"taskID\":\"The ID of the created task.\"}},\"fundAppeal(uint256,uint8)\":{\"details\":\"Takes up to the total amount required to fund a side of an appeal. Reimburses the rest. Creates an appeal if all sides are fully funded.\",\"params\":{\"_side\":\"The party that pays the appeal fee.\",\"_taskID\":\"The ID of challenged task.\"}},\"getChallengeValue(uint256)\":{\"details\":\"Gets the deposit required for challenging the translation.\",\"params\":{\"_taskID\":\"The ID of the task.\"},\"returns\":{\"deposit\":\"The challengers's deposit.\"}},\"getContributions(uint256,uint256,address)\":{\"details\":\"Gets the contributions made by a party for a given round of task's appeal.\",\"params\":{\"_contributor\":\"The address of the contributor.\",\"_round\":\"The position of the round.\",\"_taskID\":\"The ID of the task.\"},\"returns\":{\"contributions\":\"The contributions.\"}},\"getDepositValue(uint256)\":{\"details\":\"Gets the deposit required for self-assigning the task.\",\"params\":{\"_taskID\":\"The ID of the task.\"},\"returns\":{\"deposit\":\"The translator's deposit.\"}},\"getNumberOfRounds(uint256)\":{\"details\":\"Gets the number of rounds of the specific task.\",\"params\":{\"_taskID\":\"The ID of the task.\"},\"returns\":{\"_0\":\"The number of rounds.\"}},\"getRoundInfo(uint256,uint256)\":{\"details\":\"Gets the information on a round of a task.\",\"params\":{\"_round\":\"The round to be queried.\",\"_taskID\":\"The ID of the task.\"},\"returns\":{\"feeRewards\":\"The amount available to pay for fees provide rewards to the winenr side.\",\"hasPaid\":\"Whether or not a given party has paid the full fees for the round.\",\"paidFees\":\"The amount paid by each party in the round.\"}},\"getTaskCount()\":{\"details\":\"Gets the total number of created tasks.\",\"returns\":{\"_0\":\"The number of created tasks.\"}},\"getTaskParties(uint256)\":{\"details\":\"Gets the addresses of parties of a specified task.\",\"params\":{\"_taskID\":\"The ID of the task.\"},\"returns\":{\"parties\":\"The addresses of requester, translator and challenger.\"}},\"getTaskPrice(uint256)\":{\"details\":\"Gets the current price of a specified task.\",\"params\":{\"_taskID\":\"The ID of the task.\"},\"returns\":{\"price\":\"The price of the task.\"}},\"reimburseRequester(uint256)\":{\"details\":\"Reimburses the requester if no one picked the task or the translator failed to submit the translation before deadline.\",\"params\":{\"_taskID\":\"The ID of the task.\"}},\"rule(uint256,uint256)\":{\"details\":\"Gives a ruling for a dispute. Can only be called by the arbitrator.  The purpose of this function is to ensure that the address calling it has the right to rule on the contract and to invert the ruling in the case a party loses from lack of appeal fees funding.\",\"params\":{\"_disputeID\":\"ID of the dispute in the Arbitrator contract.\",\"_ruling\":\"Ruling given by the arbitrator. Note that 0 is reserved for \\\"Refuse to arbitrate\\\".\"}},\"submitEvidence(uint256,string)\":{\"details\":\"Submit a reference to evidence. EVENT.\",\"params\":{\"_evidence\":\"A link to evidence using its URI.\",\"_taskID\":\"A task evidence is submitted for.\"}},\"submitTranslation(uint256,string)\":{\"details\":\"Submits translated text for a specific task.\",\"params\":{\"_taskID\":\"The ID of the task.\",\"_translation\":\"A URI to the translated text.\"}},\"withdrawFeesAndRewards(address,uint256,uint256)\":{\"details\":\"Witdraws contributions of appeal rounds. Reimburses contributions if no disputes were raised. If a dispute was raised, sends the fee stake rewards and reimbursements proportional to the contributions made to the winner of a dispute.\",\"params\":{\"_beneficiary\":\"The address that made contributions.\",\"_round\":\"The round from which to withdraw.\",\"_taskID\":\"The ID of the associated task.\"}}},\"title\":\"Linguo  Linguo is a decentralized platform where anyone can submit a document for translation and have it translated by freelancers.  It has no platform fees and disputes about translation quality are handled by Kleros jurors.  NOTE: This contract trusts that the Arbitrator is honest and will not reenter or modify its costs during a call.  The arbitrator must support appeal period.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/0.7.x/Linguo.sol\":\"Linguo\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@kleros/erc-792/contracts/IArbitrable.sol\":{\"content\":\"/**\\n * @authors: [@ferittuncer, @hbarcelos]\\n * @reviewers: [@remedcu*]\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n * SPDX-License-Identifier: MIT\\n */\\npragma solidity >=0.7;\\n\\nimport \\\"./IArbitrator.sol\\\";\\n\\n/**\\n * @title IArbitrable\\n * Arbitrable interface.\\n * When developing arbitrable contracts, we need to:\\n * - Define the action taken when a ruling is received by the contract.\\n * - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);\\n */\\ninterface IArbitrable {\\n    /**\\n     * @dev To be raised when a ruling is given.\\n     * @param _arbitrator The arbitrator giving the ruling.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _ruling The ruling which was given.\\n     */\\n    event Ruling(IArbitrator indexed _arbitrator, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /**\\n     * @dev Give a ruling for a dispute. Must be called by the arbitrator.\\n     * The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\\n     */\\n    function rule(uint256 _disputeID, uint256 _ruling) external;\\n}\\n\",\"keccak256\":\"0x1803a3433a78c509b20bd9477a2c60a71b2ce1ee7e17eb0ef0601618a8a72526\",\"license\":\"MIT\"},\"@kleros/erc-792/contracts/IArbitrator.sol\":{\"content\":\"/**\\n * @authors: [@ferittuncer, @hbarcelos]\\n * @reviewers: [@remedcu*]\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n * SPDX-License-Identifier: MIT\\n */\\n\\npragma solidity >=0.7;\\n\\nimport \\\"./IArbitrable.sol\\\";\\n\\n/**\\n * @title Arbitrator\\n * Arbitrator abstract contract.\\n * When developing arbitrator contracts we need to:\\n * - Define the functions for dispute creation (createDispute) and appeal (appeal). Don't forget to store the arbitrated contract and the disputeID (which should be unique, may nbDisputes).\\n * - Define the functions for cost display (arbitrationCost and appealCost).\\n * - Allow giving rulings. For this a function must call arbitrable.rule(disputeID, ruling).\\n */\\ninterface IArbitrator {\\n    enum DisputeStatus {Waiting, Appealable, Solved}\\n\\n    /**\\n     * @dev To be emitted when a dispute is created.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event DisputeCreation(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev To be emitted when a dispute can be appealed.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event AppealPossible(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev To be emitted when the current ruling is appealed.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event AppealDecision(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev Create a dispute. Must be called by the arbitrable contract.\\n     * Must be paid at least arbitrationCost(_extraData).\\n     * @param _choices Amount of choices the arbitrator can make in this dispute.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return disputeID ID of the dispute created.\\n     */\\n    function createDispute(uint256 _choices, bytes calldata _extraData) external payable returns (uint256 disputeID);\\n\\n    /**\\n     * @dev Compute the cost of arbitration. It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return cost Amount to be paid.\\n     */\\n    function arbitrationCost(bytes calldata _extraData) external view returns (uint256 cost);\\n\\n    /**\\n     * @dev Appeal a ruling. Note that it has to be called before the arbitrator contract calls rule.\\n     * @param _disputeID ID of the dispute to be appealed.\\n     * @param _extraData Can be used to give extra info on the appeal.\\n     */\\n    function appeal(uint256 _disputeID, bytes calldata _extraData) external payable;\\n\\n    /**\\n     * @dev Compute the cost of appeal. It is recommended not to increase it often, as it can be higly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n     * @param _disputeID ID of the dispute to be appealed.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return cost Amount to be paid.\\n     */\\n    function appealCost(uint256 _disputeID, bytes calldata _extraData) external view returns (uint256 cost);\\n\\n    /**\\n     * @dev Compute the start and end of the dispute's current or next appeal period, if possible. If not known or appeal is impossible: should return (0, 0).\\n     * @param _disputeID ID of the dispute.\\n     * @return start The start of the period.\\n     * @return end The end of the period.\\n     */\\n    function appealPeriod(uint256 _disputeID) external view returns (uint256 start, uint256 end);\\n\\n    /**\\n     * @dev Return the status of a dispute.\\n     * @param _disputeID ID of the dispute to rule.\\n     * @return status The status of the dispute.\\n     */\\n    function disputeStatus(uint256 _disputeID) external view returns (DisputeStatus status);\\n\\n    /**\\n     * @dev Return the current ruling of a dispute. This is useful for parties to know if they should appeal.\\n     * @param _disputeID ID of the dispute.\\n     * @return ruling The ruling which has been given or the one which will be given if there is no appeal.\\n     */\\n    function currentRuling(uint256 _disputeID) external view returns (uint256 ruling);\\n}\\n\",\"keccak256\":\"0x240a4142f9ec379da0333dfc82409b7b058cff9ea118368eb5e8f15447996c1e\",\"license\":\"MIT\"},\"@kleros/erc-792/contracts/erc-1497/IEvidence.sol\":{\"content\":\"/**\\n * @authors: [@ferittuncer, @hbarcelos]\\n * @reviewers: []\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n * SPDX-License-Identifier: MIT\\n */\\npragma solidity >=0.7;\\n\\nimport \\\"../IArbitrator.sol\\\";\\n\\n/** @title IEvidence\\n *  ERC-1497: Evidence Standard\\n */\\ninterface IEvidence {\\n    /**\\n     * @dev To be emitted when meta-evidence is submitted.\\n     * @param _metaEvidenceID Unique identifier of meta-evidence.\\n     * @param _evidence A link to the meta-evidence JSON.\\n     */\\n    event MetaEvidence(uint256 indexed _metaEvidenceID, string _evidence);\\n\\n    /**\\n     * @dev To be raised when evidence is submitted. Should point to the resource (evidences are not to be stored on chain due to gas considerations).\\n     * @param _arbitrator The arbitrator of the contract.\\n     * @param _evidenceGroupID Unique identifier of the evidence group the evidence belongs to.\\n     * @param _party The address of the party submiting the evidence. Note that 0x0 refers to evidence not submitted by any party.\\n     * @param _evidence A URI to the evidence JSON file whose name should be its keccak256 hash followed by .json.\\n     */\\n    event Evidence(\\n        IArbitrator indexed _arbitrator,\\n        uint256 indexed _evidenceGroupID,\\n        address indexed _party,\\n        string _evidence\\n    );\\n\\n    /**\\n     * @dev To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\\n     * @param _arbitrator The arbitrator of the contract.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _metaEvidenceID Unique identifier of meta-evidence.\\n     * @param _evidenceGroupID Unique identifier of the evidence group that is linked to this dispute.\\n     */\\n    event Dispute(\\n        IArbitrator indexed _arbitrator,\\n        uint256 indexed _disputeID,\\n        uint256 _metaEvidenceID,\\n        uint256 _evidenceGroupID\\n    );\\n}\\n\",\"keccak256\":\"0x1ccedf5213730632540c748486637d7b1977ee73375818bf498a8276ca49dd13\",\"license\":\"MIT\"},\"@kleros/ethereum-libraries/contracts/CappedMath.sol\":{\"content\":\"/**\\n * @authors: [@mtsalenc, @hbarcelos]\\n * @reviewers: [@clesaege*]\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n * SPDX-License-Identifier: MIT\\n */\\n\\npragma solidity >=0.7;\\n\\n\\n/**\\n * @title CappedMath\\n * @dev Math operations with caps for under and overflow.\\n */\\nlibrary CappedMath {\\n    uint constant private UINT_MAX = 2**256 - 1;\\n\\n    /**\\n     * @dev Adds two unsigned integers, returns 2^256 - 1 on overflow.\\n     */\\n    function addCap(uint _a, uint _b) internal pure returns (uint) {\\n        uint c = _a + _b;\\n        return c >= _a ? c : UINT_MAX;\\n    }\\n\\n    /**\\n     * @dev Subtracts two integers, returns 0 on underflow.\\n     */\\n    function subCap(uint _a, uint _b) internal pure returns (uint) {\\n        if (_b > _a)\\n            return 0;\\n        else\\n            return _a - _b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two unsigned integers, returns 2^256 - 1 on overflow.\\n     */\\n    function mulCap(uint _a, uint _b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring '_a' not being zero, but the\\n        // benefit is lost if '_b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0)\\n            return 0;\\n\\n        uint c = _a * _b;\\n        return c / _a == _b ? c : UINT_MAX;\\n    }\\n}\\n\",\"keccak256\":\"0x5dd32b4108aa98da968c5d59a3b23cdf64b8ecbc0d4982d2771e899378f99b1c\",\"license\":\"MIT\"},\"contracts/0.7.x/Linguo.sol\":{\"content\":\"/**\\n * @authors: [@unknownunknown1, @hbarcelos]\\n * @reviewers: []\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n *\\n * SPDX-License-Identifier: MIT\\n */\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@kleros/erc-792/contracts/IArbitrable.sol\\\";\\nimport \\\"@kleros/erc-792/contracts/IArbitrator.sol\\\";\\nimport \\\"@kleros/erc-792/contracts/erc-1497/IEvidence.sol\\\";\\nimport \\\"@kleros/ethereum-libraries/contracts/CappedMath.sol\\\";\\n\\n/** @title Linguo\\n *  Linguo is a decentralized platform where anyone can submit a document for translation and have it translated by freelancers.\\n *  It has no platform fees and disputes about translation quality are handled by Kleros jurors.\\n *  NOTE: This contract trusts that the Arbitrator is honest and will not reenter or modify its costs during a call.\\n *  The arbitrator must support appeal period.\\n */\\ncontract Linguo is IArbitrable, IEvidence {\\n    using CappedMath for uint256;\\n\\n    /* *** Contract variables *** */\\n    uint8 public constant VERSION_ID = 0; // Value that represents the version of the contract. The value is incremented each time the new version is deployed. Range for LinguoETH: 0-127, LinguoToken: 128-255.\\n    uint256 public constant MULTIPLIER_DIVISOR = 10000; // Divisor parameter for multipliers.\\n    uint256 private constant NOT_PAYABLE_VALUE = (2**256 - 2) / 2; // A value depositor won't be able to pay.\\n\\n    enum Status {Created, Assigned, AwaitingReview, DisputeCreated, Resolved}\\n\\n    enum Party {\\n        None, // Party that is mapped with 0 dispute ruling.\\n        Translator, // The one performing translation task.\\n        Challenger // The one challenging translated text in the review period.\\n    }\\n\\n    // Arrays of 3 elements in the Task and Round structs map to the parties. Index \\\"0\\\" is not used, \\\"1\\\" is used for translator and \\\"2\\\" for challenger.\\n    struct Task {\\n        uint256 submissionTimeout; // Time in seconds allotted for submitting a translation. The end of this period is considered a deadline.\\n        uint256 minPrice; // Minimal price for the translation. When the task is created it has minimal price that gradually increases such as it reaches maximal price at deadline.\\n        uint256 maxPrice; // Maximal price for the translation and also value that must be deposited by the requester.\\n        Status status; // Status of the task.\\n        uint256 lastInteraction; // The time of the last action performed on the task. Note that lastInteraction is updated only during timeout-related actions such as the creation of the task and the submission of the translation.\\n        address payable requester; // The party requesting the translation.\\n        uint256 requesterDeposit; // The deposit requester makes when creating the task. Once a task is assigned this deposit will be partially reimbursed and its value replaced by task price.\\n        uint256 sumDeposit; // The sum of the deposits of translator and challenger, if any. This value (minus arbitration fees) will be paid to the party that wins the dispute.\\n        address payable[3] parties; // Translator and challenger of the task.\\n        uint256 disputeID; // The ID of the dispute created in arbitrator contract.\\n        Round[] rounds; // Tracks each appeal round of a dispute.\\n        uint256 ruling; // Ruling given to the dispute of the task by the arbitrator.\\n    }\\n\\n    struct Round {\\n        uint256[3] paidFees; // Tracks the fees paid by each side in this round.\\n        bool[3] hasPaid; // True when the side has fully paid its fee. False otherwise.\\n        uint256 feeRewards; // Sum of reimbursable fees and stake rewards available to the parties that made contributions to the side that ultimately wins a dispute.\\n        mapping(address => uint256[3]) contributions; // Maps contributors to their contributions for each side.\\n    }\\n\\n    address public governor = msg.sender; // The governor of the contract.\\n    IArbitrator public arbitrator; // The address of the ERC-792 Arbitrator.\\n    bytes public arbitratorExtraData; // Extra data to allow creting a dispute on the arbitrator.\\n    uint256 public reviewTimeout; // Time in seconds, during which the submitted translation can be challenged.\\n    // All multipliers below are in basis points.\\n    uint256 public translationMultiplier; // Multiplier for calculating the value of the deposit translator must pay to self-assign a task.\\n    uint256 public challengeMultiplier; // Multiplier for calculating the value of the deposit challenger must pay to challenge a translation.\\n    uint256 public sharedStakeMultiplier; // Multiplier for calculating the appeal fee that must be paid by submitter in the case where there isn't a winner and loser (e.g. when the arbitrator ruled \\\"refuse to arbitrate\\\").\\n    uint256 public winnerStakeMultiplier; // Multiplier for calculating the appeal fee of the party that won the previous round.\\n    uint256 public loserStakeMultiplier; // Multiplier for calculating the appeal fee of the party that lost the previous round.\\n\\n    Task[] public tasks; // Stores all created tasks.\\n\\n    mapping(uint256 => uint256) public disputeIDtoTaskID; // Maps a disputeID to its respective task.\\n\\n    /* *** Events *** */\\n\\n    /** @dev To be emitted when the new task is created.\\n     *  @param _taskID The ID of the newly created task.\\n     *  @param _requester The address that created the task.\\n     *  @param _timestamp When the task was created.\\n     */\\n    event TaskCreated(uint256 indexed _taskID, address indexed _requester, uint256 _timestamp);\\n\\n    /** @dev To be emitted when a translator assigns the task to himself.\\n     *  @param _taskID The ID of the assigned task.\\n     *  @param _translator The address that was assigned to the task.\\n     *  @param _price The task price at the moment it was assigned.\\n     *  @param _timestamp When the task was assigned.\\n     */\\n    event TaskAssigned(uint256 indexed _taskID, address indexed _translator, uint256 _price, uint256 _timestamp);\\n\\n    /** @dev To be emitted when a translation is submitted.\\n     *  @param _taskID The ID of the respective task.\\n     *  @param _translator The address that performed the translation.\\n     *  @param _translatedText A URI to the translated text.\\n     *  @param _timestamp When the translation was submitted.\\n     */\\n    event TranslationSubmitted(\\n        uint256 indexed _taskID,\\n        address indexed _translator,\\n        string _translatedText,\\n        uint256 _timestamp\\n    );\\n\\n    /** @dev To be emitted when a translation is challenged.\\n     *  @param _taskID The ID of the respective task.\\n     *  @param _challenger The address of the challenger.\\n     *  @param _timestamp When the task was challenged.\\n     */\\n    event TranslationChallenged(uint256 indexed _taskID, address indexed _challenger, uint256 _timestamp);\\n\\n    /** @dev To be emitted when a task is resolved, either by the translation being accepted, the requester being reimbursed or a dispute being settled.\\n     *  @param _taskID The ID of the respective task.\\n     *  @param _reason Short description of what caused the task to be solved. One of: 'translation-accepted' | 'requester-reimbursed' | 'dispute-settled'\\n     *  @param _timestamp When the task was resolved.\\n     */\\n    event TaskResolved(uint256 indexed _taskID, string _reason, uint256 _timestamp);\\n\\n    /** @dev To be emitted when someone contributes to the appeal process.\\n     *  @param _taskID The ID of the respective task.\\n     *  @param _party The party which received the contribution.\\n     *  @param _contributor The address of the contributor.\\n     *  @param _amount The amount contributed.\\n     */\\n    event AppealContribution(uint256 indexed _taskID, Party _party, address _contributor, uint256 _amount);\\n\\n    /** @dev To be emitted when the appeal fees of one of the parties are fully funded.\\n     *  @param _taskID The ID of the respective task.\\n     *  @param _party The party that is fully funded.\\n     */\\n    event HasPaidAppealFee(uint256 indexed _taskID, Party _party);\\n\\n    /* *** Modifiers *** */\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor, \\\"Only governor is allowed to perform this.\\\");\\n        _;\\n    }\\n\\n    /** @dev Constructor.\\n     *  @param _arbitrator The arbitrator of the contract.\\n     *  @param _arbitratorExtraData Extra data for the arbitrator.\\n     *  @param _reviewTimeout Time in seconds during which a translation can be challenged.\\n     *  @param _translationMultiplier Multiplier for calculating translator's deposit. In basis points.\\n     *  @param _challengeMultiplier Multiplier for calculating challenger's deposit. In basis points.\\n     *  @param _sharedStakeMultiplier Multiplier of the appeal cost that submitter must pay for a round when there is no winner/loser in the previous round. In basis points.\\n     *  @param _winnerStakeMultiplier Multiplier of the appeal cost that the winner has to pay for a round. In basis points.\\n     *  @param _loserStakeMultiplier Multiplier of the appeal cost that the loser has to pay for a round. In basis points.\\n     */\\n    constructor(\\n        IArbitrator _arbitrator,\\n        bytes memory _arbitratorExtraData,\\n        uint256 _reviewTimeout,\\n        uint256 _translationMultiplier,\\n        uint256 _challengeMultiplier,\\n        uint256 _sharedStakeMultiplier,\\n        uint256 _winnerStakeMultiplier,\\n        uint256 _loserStakeMultiplier\\n    ) public {\\n        arbitrator = _arbitrator;\\n        arbitratorExtraData = _arbitratorExtraData;\\n        reviewTimeout = _reviewTimeout;\\n        translationMultiplier = _translationMultiplier;\\n        challengeMultiplier = _challengeMultiplier;\\n        sharedStakeMultiplier = _sharedStakeMultiplier;\\n        winnerStakeMultiplier = _winnerStakeMultiplier;\\n        loserStakeMultiplier = _loserStakeMultiplier;\\n    }\\n\\n    // ******************** //\\n    // *    Governance    * //\\n    // ******************** //\\n\\n    /** @dev Changes the governor of this contract.\\n     *  @param _governor A new governor.\\n     */\\n    function changeGovernor(address _governor) public onlyGovernor {\\n        governor = _governor;\\n    }\\n\\n    /** @dev Changes the time allocated for review phase.\\n     *  @param _reviewTimeout A new value of the time allotted for reviewing a translation. In seconds.\\n     */\\n    function changeReviewTimeout(uint256 _reviewTimeout) public onlyGovernor {\\n        reviewTimeout = _reviewTimeout;\\n    }\\n\\n    /** @dev Changes the multiplier for translator's deposit.\\n     *  @param _translationMultiplier A new value of the multiplier for calculating translator's deposit. In basis points.\\n     */\\n    function changeTranslationMultiplier(uint256 _translationMultiplier) public onlyGovernor {\\n        translationMultiplier = _translationMultiplier;\\n    }\\n\\n    /** @dev Changes the multiplier for challenger's deposit.\\n     *  @param _challengeMultiplier A new value of the multiplier for calculating challenger's deposit. In basis points.\\n     */\\n    function changeChallengeMultiplier(uint256 _challengeMultiplier) public onlyGovernor {\\n        challengeMultiplier = _challengeMultiplier;\\n    }\\n\\n    /** @dev Changes the percentage of arbitration fees that must be paid by parties as a fee stake if there was no winner and loser in the previous round.\\n     *  @param _sharedStakeMultiplier A new value of the multiplier of the appeal cost in case when there is no winner/loser in previous round. In basis point.\\n     */\\n    function changeSharedStakeMultiplier(uint256 _sharedStakeMultiplier) public onlyGovernor {\\n        sharedStakeMultiplier = _sharedStakeMultiplier;\\n    }\\n\\n    /** @dev Changes the percentage of arbitration fees that must be paid as a fee stake by the party that won the previous round.\\n     *  @param _winnerStakeMultiplier A new value of the multiplier of the appeal cost that the winner of the previous round has to pay. In basis points.\\n     */\\n    function changeWinnerStakeMultiplier(uint256 _winnerStakeMultiplier) public onlyGovernor {\\n        winnerStakeMultiplier = _winnerStakeMultiplier;\\n    }\\n\\n    /** @dev Changes the percentage of arbitration fees that must be paid as a fee stake by the party that lost the previous round.\\n     *  @param _loserStakeMultiplier A new value of the multiplier of the appeal cost that the party that lost the previous round has to pay. In basis points.\\n     */\\n    function changeLoserStakeMultiplier(uint256 _loserStakeMultiplier) public onlyGovernor {\\n        loserStakeMultiplier = _loserStakeMultiplier;\\n    }\\n\\n    // **************************** //\\n    // *    Modifying the state   * //\\n    // **************************** //\\n\\n    /** @dev Creates a task based on provided details. Requires a value of maximal price to be deposited.\\n     *  @param _deadline The deadline for the translation to be completed.\\n     *  @param _minPrice A minimal price of the translation. In wei.\\n     *  @param _metaEvidence A URI of meta-evidence object for task submission.\\n     *  @return taskID The ID of the created task.\\n     */\\n    function createTask(\\n        uint256 _deadline,\\n        uint256 _minPrice,\\n        string calldata _metaEvidence\\n    ) external payable returns (uint256 taskID) {\\n        require(msg.value >= _minPrice, \\\"Deposited value should be greater than or equal to the min price.\\\");\\n        require(_deadline > block.timestamp, \\\"The deadline should be in the future.\\\");\\n\\n        taskID = tasks.length;\\n\\n        Task storage task = tasks.push();\\n        task.submissionTimeout = _deadline - block.timestamp;\\n        task.minPrice = _minPrice;\\n        task.maxPrice = msg.value;\\n        task.lastInteraction = block.timestamp;\\n        task.requester = msg.sender;\\n        task.requesterDeposit = msg.value;\\n\\n        emit MetaEvidence(taskID, _metaEvidence);\\n        emit TaskCreated(taskID, msg.sender, block.timestamp);\\n    }\\n\\n    /** @dev Assigns a specific task to the sender. Requires a translator's deposit.\\n     *  Note that the deposit should be a little higher than the required value because of the price increase during the time the transaction is mined. The surplus will be reimbursed.\\n     *  @param _taskID The ID of the task.\\n     */\\n    function assignTask(uint256 _taskID) external payable {\\n        Task storage task = tasks[_taskID];\\n        require(block.timestamp - task.lastInteraction <= task.submissionTimeout, \\\"The deadline has already passed.\\\");\\n\\n        uint256 price = task.minPrice +\\n            ((task.maxPrice - task.minPrice) * (block.timestamp - task.lastInteraction)) /\\n            task.submissionTimeout;\\n        uint256 arbitrationCost = arbitrator.arbitrationCost(arbitratorExtraData);\\n        uint256 translatorDeposit = arbitrationCost.addCap((translationMultiplier.mulCap(price)) / MULTIPLIER_DIVISOR);\\n\\n        require(task.status == Status.Created, \\\"Task has already been assigned or reimbursed.\\\");\\n        require(msg.value >= translatorDeposit, \\\"Not enough ETH to reach the required deposit value.\\\");\\n\\n        task.parties[uint256(Party.Translator)] = msg.sender;\\n        task.status = Status.Assigned;\\n\\n        uint256 remainder = task.maxPrice - price;\\n        task.requester.send(remainder);\\n        // Update requester's deposit since we reimbursed him the difference between maximal and actual price.\\n        task.requesterDeposit = price;\\n        task.sumDeposit += translatorDeposit;\\n\\n        remainder = msg.value - translatorDeposit;\\n        msg.sender.send(remainder);\\n\\n        emit TaskAssigned(_taskID, msg.sender, price, block.timestamp);\\n    }\\n\\n    /** @dev Submits translated text for a specific task.\\n     *  @param _taskID The ID of the task.\\n     *  @param _translation A URI to the translated text.\\n     */\\n    function submitTranslation(uint256 _taskID, string calldata _translation) external {\\n        Task storage task = tasks[_taskID];\\n        require(\\n            task.status == Status.Assigned,\\n            \\\"The task is either not assigned or translation has already been submitted.\\\"\\n        );\\n        require(block.timestamp - task.lastInteraction <= task.submissionTimeout, \\\"The deadline has already passed.\\\");\\n        require(\\n            msg.sender == task.parties[uint256(Party.Translator)],\\n            \\\"Can't submit translation to the task that wasn't assigned to you.\\\"\\n        );\\n        task.status = Status.AwaitingReview;\\n        task.lastInteraction = block.timestamp;\\n\\n        emit TranslationSubmitted(_taskID, msg.sender, _translation, block.timestamp);\\n    }\\n\\n    /** @dev Reimburses the requester if no one picked the task or the translator failed to submit the translation before deadline.\\n     *  @param _taskID The ID of the task.\\n     */\\n    function reimburseRequester(uint256 _taskID) external {\\n        Task storage task = tasks[_taskID];\\n        require(task.status < Status.AwaitingReview, \\\"Can't reimburse if translation was submitted.\\\");\\n        require(\\n            block.timestamp - task.lastInteraction > task.submissionTimeout,\\n            \\\"Can't reimburse if the deadline hasn't passed yet.\\\"\\n        );\\n        task.status = Status.Resolved;\\n        // Requester gets his deposit back and also the deposit of the translator, if there was one.  Note that sumDeposit can't contain challenger's deposit until the task is in DisputeCreated status.\\n        uint256 amount = task.requesterDeposit + task.sumDeposit;\\n        task.requester.send(amount);\\n\\n        task.requesterDeposit = 0;\\n        task.sumDeposit = 0;\\n\\n        emit TaskResolved(_taskID, \\\"requester-reimbursed\\\", block.timestamp);\\n    }\\n\\n    /** @dev Pays the translator for completed task if no one challenged the translation during review period.\\n     *  @param _taskID The ID of the task.\\n     */\\n    function acceptTranslation(uint256 _taskID) external {\\n        Task storage task = tasks[_taskID];\\n        require(task.status == Status.AwaitingReview, \\\"The task is in the wrong status.\\\");\\n        require(block.timestamp - task.lastInteraction > reviewTimeout, \\\"The review phase hasn't passed yet.\\\");\\n        task.status = Status.Resolved;\\n        // Translator gets the price of the task and his deposit back. Note that sumDeposit can't contain challenger's deposit until the task is in DisputeCreated status.\\n        uint256 amount = task.requesterDeposit + task.sumDeposit;\\n        task.parties[uint256(Party.Translator)].send(amount);\\n\\n        task.requesterDeposit = 0;\\n        task.sumDeposit = 0;\\n\\n        emit TaskResolved(_taskID, \\\"translation-accepted\\\", block.timestamp);\\n    }\\n\\n    /** @dev Challenges the translation of a specific task. Requires challenger's deposit.\\n     *  @param _taskID The ID of the task.\\n     *  @param _evidence A link to evidence using its URI. Ignored if not provided.\\n     */\\n    function challengeTranslation(uint256 _taskID, string calldata _evidence) external payable {\\n        Task storage task = tasks[_taskID];\\n\\n        uint256 arbitrationCost = arbitrator.arbitrationCost(arbitratorExtraData);\\n        uint256 challengeDeposit = arbitrationCost.addCap(\\n            (challengeMultiplier.mulCap(task.requesterDeposit)) / MULTIPLIER_DIVISOR\\n        );\\n\\n        require(task.status == Status.AwaitingReview, \\\"The task is in the wrong status.\\\");\\n        require(block.timestamp - task.lastInteraction <= reviewTimeout, \\\"The review phase has already passed.\\\");\\n        require(msg.value >= challengeDeposit, \\\"Not enough ETH to cover challenge deposit.\\\");\\n\\n        task.status = Status.DisputeCreated;\\n        task.parties[uint256(Party.Challenger)] = msg.sender;\\n\\n        task.disputeID = arbitrator.createDispute{value: arbitrationCost}(2, arbitratorExtraData);\\n        disputeIDtoTaskID[task.disputeID] = _taskID;\\n        task.rounds.push();\\n        task.sumDeposit = task.sumDeposit.addCap(challengeDeposit).subCap(arbitrationCost);\\n\\n        uint256 remainder = msg.value - challengeDeposit;\\n        msg.sender.send(remainder);\\n\\n        emit Dispute(arbitrator, task.disputeID, _taskID, _taskID);\\n        emit TranslationChallenged(_taskID, msg.sender, block.timestamp);\\n\\n        if (bytes(_evidence).length > 0) emit Evidence(arbitrator, _taskID, msg.sender, _evidence);\\n    }\\n\\n    /** @dev Takes up to the total amount required to fund a side of an appeal. Reimburses the rest. Creates an appeal if all sides are fully funded.\\n     *  @param _taskID The ID of challenged task.\\n     *  @param _side The party that pays the appeal fee.\\n     */\\n    function fundAppeal(uint256 _taskID, Party _side) external payable {\\n        Task storage task = tasks[_taskID];\\n        require(\\n            _side == Party.Translator || _side == Party.Challenger,\\n            \\\"Recipient must be either the translator or challenger.\\\"\\n        );\\n        require(task.status == Status.DisputeCreated, \\\"No dispute to appeal\\\");\\n        require(\\n            arbitrator.disputeStatus(task.disputeID) == IArbitrator.DisputeStatus.Appealable,\\n            \\\"Dispute is not appealable.\\\"\\n        );\\n\\n        (uint256 appealPeriodStart, uint256 appealPeriodEnd) = arbitrator.appealPeriod(task.disputeID);\\n        require(\\n            block.timestamp >= appealPeriodStart && block.timestamp < appealPeriodEnd,\\n            \\\"Funding must be made within the appeal period.\\\"\\n        );\\n\\n        uint256 winner = arbitrator.currentRuling(task.disputeID);\\n        uint256 multiplier;\\n        if (winner == uint256(_side)) {\\n            multiplier = winnerStakeMultiplier;\\n        } else if (winner == 0) {\\n            multiplier = sharedStakeMultiplier;\\n        } else {\\n            require(\\n                block.timestamp - appealPeriodStart < (appealPeriodEnd - appealPeriodStart) / 2,\\n                \\\"The loser must pay during the first half of the appeal period.\\\"\\n            );\\n            multiplier = loserStakeMultiplier;\\n        }\\n\\n        Round storage round = task.rounds[task.rounds.length - 1];\\n        require(!round.hasPaid[uint256(_side)], \\\"Appeal fee has already been paid.\\\");\\n\\n        uint256 appealCost = arbitrator.appealCost(task.disputeID, arbitratorExtraData);\\n        uint256 totalCost = appealCost.addCap((appealCost.mulCap(multiplier)) / MULTIPLIER_DIVISOR);\\n\\n        // Take up to the amount necessary to fund the current round at the current costs.\\n        uint256 contribution; // Amount contributed.\\n        uint256 remainingETH; // Remaining ETH to send back.\\n        (contribution, remainingETH) = calculateContribution(\\n            msg.value,\\n            totalCost.subCap(round.paidFees[uint256(_side)])\\n        );\\n        round.contributions[msg.sender][uint256(_side)] += contribution;\\n        round.paidFees[uint256(_side)] += contribution;\\n\\n        emit AppealContribution(_taskID, _side, msg.sender, contribution);\\n\\n        // Add contribution to reward when the fee funding is successful, otherwise it can be withdrawn later.\\n        if (round.paidFees[uint256(_side)] >= totalCost) {\\n            round.hasPaid[uint256(_side)] = true;\\n            round.feeRewards += round.paidFees[uint256(_side)];\\n            emit HasPaidAppealFee(_taskID, _side);\\n        }\\n\\n        // Reimburse leftover ETH.\\n        msg.sender.send(remainingETH); // Deliberate use of send in order to not block the contract in case of reverting fallback.\\n\\n        // Create an appeal if each side is funded.\\n        if (round.hasPaid[uint256(Party.Translator)] && round.hasPaid[uint256(Party.Challenger)]) {\\n            arbitrator.appeal{value: appealCost}(task.disputeID, arbitratorExtraData);\\n            task.rounds.push();\\n            round.feeRewards = round.feeRewards.subCap(appealCost);\\n        }\\n    }\\n\\n    /** @dev Returns the contribution value and remainder from available ETH and required amount.\\n     *  @param _available The amount of ETH available for the contribution.\\n     *  @param _requiredAmount The amount of ETH required for the contribution.\\n     *  @return taken The amount of ETH taken.\\n     *  @return remainder The amount of ETH left from the contribution.\\n     */\\n    function calculateContribution(uint256 _available, uint256 _requiredAmount)\\n        internal\\n        pure\\n        returns (uint256 taken, uint256 remainder)\\n    {\\n        if (_requiredAmount > _available) return (_available, 0); // Take whatever is available, return 0 as leftover ETH.\\n\\n        remainder = _available - _requiredAmount;\\n        return (_requiredAmount, remainder);\\n    }\\n\\n    /** @dev Witdraws contributions of appeal rounds. Reimburses contributions if no disputes were raised. If a dispute was raised, sends the fee stake rewards and reimbursements proportional to the contributions made to the winner of a dispute.\\n     *  @param _beneficiary The address that made contributions.\\n     *  @param _taskID The ID of the associated task.\\n     *  @param _round The round from which to withdraw.\\n     */\\n    function withdrawFeesAndRewards(\\n        address payable _beneficiary,\\n        uint256 _taskID,\\n        uint256 _round\\n    ) public {\\n        Task storage task = tasks[_taskID];\\n        Round storage round = task.rounds[_round];\\n        require(task.status == Status.Resolved, \\\"The task should be resolved.\\\");\\n        uint256 reward;\\n        if (!round.hasPaid[uint256(Party.Translator)] || !round.hasPaid[uint256(Party.Challenger)]) {\\n            // Allow to reimburse if funding was unsuccessful.\\n            reward =\\n                round.contributions[_beneficiary][uint256(Party.Translator)] +\\n                round.contributions[_beneficiary][uint256(Party.Challenger)];\\n            round.contributions[_beneficiary][uint256(Party.Translator)] = 0;\\n            round.contributions[_beneficiary][uint256(Party.Challenger)] = 0;\\n        } else if (task.ruling == uint256(Party.None)) {\\n            // Reimburse unspent fees proportionally if there is no winner and loser.\\n            uint256 rewardTranslator = round.paidFees[uint256(Party.Translator)] > 0\\n                ? (round.contributions[_beneficiary][uint256(Party.Translator)] * round.feeRewards) /\\n                    (round.paidFees[uint256(Party.Translator)] + round.paidFees[uint256(Party.Challenger)])\\n                : 0;\\n            uint256 rewardChallenger = round.paidFees[uint256(Party.Challenger)] > 0\\n                ? (round.contributions[_beneficiary][uint256(Party.Challenger)] * round.feeRewards) /\\n                    (round.paidFees[uint256(Party.Translator)] + round.paidFees[uint256(Party.Challenger)])\\n                : 0;\\n\\n            reward = rewardTranslator + rewardChallenger;\\n            round.contributions[_beneficiary][uint256(Party.Translator)] = 0;\\n            round.contributions[_beneficiary][uint256(Party.Challenger)] = 0;\\n        } else {\\n            // Reward the winner.\\n            reward = round.paidFees[task.ruling] > 0\\n                ? (round.contributions[_beneficiary][task.ruling] * round.feeRewards) / round.paidFees[task.ruling]\\n                : 0;\\n            round.contributions[_beneficiary][task.ruling] = 0;\\n        }\\n\\n        _beneficiary.send(reward); // It is the user responsibility to accept ETH.\\n    }\\n\\n    /** @dev Withdraws contributions of multiple appeal rounds at once. This function is O(n) where n is the number of rounds. This could exceed the gas limit, therefore this function should be used only as a utility and not be relied upon by other contracts.\\n     *  @param _beneficiary The address that made contributions.\\n     *  @param _taskID The ID of the associated task.\\n     *  @param _cursor The round from where to start withdrawing.\\n     *  @param _count The number of rounds to iterate. If set to 0 or a value larger than the number of rounds, iterates until the last round.\\n     */\\n    function batchRoundWithdraw(\\n        address payable _beneficiary,\\n        uint256 _taskID,\\n        uint256 _cursor,\\n        uint256 _count\\n    ) public {\\n        Task storage task = tasks[_taskID];\\n        for (uint256 i = _cursor; i < task.rounds.length && (_count == 0 || i < _cursor + _count); i++)\\n            withdrawFeesAndRewards(_beneficiary, _taskID, i);\\n    }\\n\\n    /** @dev Gives a ruling for a dispute. Can only be called by the arbitrator.\\n     *  The purpose of this function is to ensure that the address calling it has the right to rule on the contract and to invert the ruling in the case a party loses from lack of appeal fees funding.\\n     *  @param _disputeID ID of the dispute in the Arbitrator contract.\\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \\\"Refuse to arbitrate\\\".\\n     */\\n    function rule(uint256 _disputeID, uint256 _ruling) external override {\\n        Party resultRuling = Party(_ruling);\\n        uint256 taskID = disputeIDtoTaskID[_disputeID];\\n        Task storage task = tasks[taskID];\\n        Round storage round = task.rounds[task.rounds.length - 1];\\n        require(msg.sender == address(arbitrator), \\\"Must be called by the arbitrator.\\\");\\n        require(task.status == Status.DisputeCreated, \\\"The dispute has already been resolved.\\\");\\n\\n        // If only one side paid its fees we assume the ruling to be in its favor.\\n        if (round.hasPaid[uint256(Party.Translator)] == true) resultRuling = Party.Translator;\\n        else if (round.hasPaid[uint256(Party.Challenger)] == true) resultRuling = Party.Challenger;\\n\\n        emit Ruling(IArbitrator(msg.sender), _disputeID, uint256(resultRuling));\\n        executeRuling(_disputeID, uint256(resultRuling));\\n    }\\n\\n    /** @dev Executes a ruling of a dispute.\\n     *  @param _disputeID ID of the dispute in the Arbitrator contract.\\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \\\"Refuse to arbitrate\\\".\\n     */\\n    function executeRuling(uint256 _disputeID, uint256 _ruling) internal {\\n        uint256 taskID = disputeIDtoTaskID[_disputeID];\\n        Task storage task = tasks[taskID];\\n        task.status = Status.Resolved;\\n        task.ruling = _ruling;\\n        uint256 amount;\\n\\n        if (_ruling == uint256(Party.None)) {\\n            task.requester.send(task.requesterDeposit);\\n            // The value of sumDeposit is split among parties in this case. If the sum is uneven the value of 1 wei can be burnt.\\n            amount = task.sumDeposit / 2;\\n            task.parties[uint256(Party.Translator)].send(amount);\\n            task.parties[uint256(Party.Challenger)].send(amount);\\n        } else if (_ruling == uint256(Party.Translator)) {\\n            amount = task.requesterDeposit + task.sumDeposit;\\n            task.parties[uint256(Party.Translator)].send(amount);\\n        } else {\\n            task.requester.send(task.requesterDeposit);\\n            task.parties[uint256(Party.Challenger)].send(task.sumDeposit);\\n        }\\n\\n        task.requesterDeposit = 0;\\n        task.sumDeposit = 0;\\n\\n        emit TaskResolved(taskID, \\\"dispute-settled\\\", block.timestamp);\\n    }\\n\\n    /** @dev Submit a reference to evidence. EVENT.\\n     *  @param _taskID A task evidence is submitted for.\\n     *  @param _evidence A link to evidence using its URI.\\n     */\\n    function submitEvidence(uint256 _taskID, string calldata _evidence) external {\\n        Task storage task = tasks[_taskID];\\n        require(task.status != Status.Resolved, \\\"The task must not already be resolved.\\\");\\n        emit Evidence(arbitrator, _taskID, msg.sender, _evidence);\\n    }\\n\\n    // ******************** //\\n    // *      Getters     * //\\n    // ******************** //\\n\\n    /** @dev Returns the sum of withdrawable wei from appeal rounds. This function is O(n), where n is the number of rounds of the task. This could exceed the gas limit, therefore this function should only be used for interface display and not by other contracts.\\n     *  @param _taskID The ID of the associated task.\\n     *  @param _beneficiary The contributor for which to query.\\n     *  @return total The total amount of wei available to withdraw.\\n     */\\n    function amountWithdrawable(uint256 _taskID, address payable _beneficiary) external view returns (uint256 total) {\\n        Task storage task = tasks[_taskID];\\n        if (task.status != Status.Resolved) return total;\\n\\n        for (uint256 i = 0; i < task.rounds.length; i++) {\\n            Round storage round = task.rounds[i];\\n            if (!round.hasPaid[uint256(Party.Translator)] || !round.hasPaid[uint256(Party.Challenger)]) {\\n                total +=\\n                    round.contributions[_beneficiary][uint256(Party.Translator)] +\\n                    round.contributions[_beneficiary][uint256(Party.Challenger)];\\n            } else if (task.ruling == uint256(Party.None)) {\\n                uint256 rewardTranslator = round.paidFees[uint256(Party.Translator)] > 0\\n                    ? (round.contributions[_beneficiary][uint256(Party.Translator)] * round.feeRewards) /\\n                        (round.paidFees[uint256(Party.Translator)] + round.paidFees[uint256(Party.Challenger)])\\n                    : 0;\\n                uint256 rewardChallenger = round.paidFees[uint256(Party.Challenger)] > 0\\n                    ? (round.contributions[_beneficiary][uint256(Party.Challenger)] * round.feeRewards) /\\n                        (round.paidFees[uint256(Party.Translator)] + round.paidFees[uint256(Party.Challenger)])\\n                    : 0;\\n\\n                total += rewardTranslator + rewardChallenger;\\n            } else {\\n                total += round.paidFees[uint256(task.ruling)] > 0\\n                    ? (round.contributions[_beneficiary][uint256(task.ruling)] * round.feeRewards) /\\n                        round.paidFees[uint256(task.ruling)]\\n                    : 0;\\n            }\\n        }\\n\\n        return total;\\n    }\\n\\n    /** @dev Gets the deposit required for self-assigning the task.\\n     *  @param _taskID The ID of the task.\\n     *  @return deposit The translator's deposit.\\n     */\\n    function getDepositValue(uint256 _taskID) public view returns (uint256 deposit) {\\n        Task storage task = tasks[_taskID];\\n        if (block.timestamp - task.lastInteraction > task.submissionTimeout || task.status != Status.Created) {\\n            deposit = NOT_PAYABLE_VALUE;\\n        } else {\\n            uint256 price = task.minPrice +\\n                ((task.maxPrice - task.minPrice) * (block.timestamp - task.lastInteraction)) /\\n                task.submissionTimeout;\\n            uint256 arbitrationCost = arbitrator.arbitrationCost(arbitratorExtraData);\\n            deposit = arbitrationCost.addCap((translationMultiplier.mulCap(price)) / MULTIPLIER_DIVISOR);\\n        }\\n    }\\n\\n    /** @dev Gets the deposit required for challenging the translation.\\n     *  @param _taskID The ID of the task.\\n     *  @return deposit The challengers's deposit.\\n     */\\n    function getChallengeValue(uint256 _taskID) public view returns (uint256 deposit) {\\n        Task storage task = tasks[_taskID];\\n        if (block.timestamp - task.lastInteraction > reviewTimeout || task.status != Status.AwaitingReview) {\\n            deposit = NOT_PAYABLE_VALUE;\\n        } else {\\n            uint256 arbitrationCost = arbitrator.arbitrationCost(arbitratorExtraData);\\n            deposit = arbitrationCost.addCap((challengeMultiplier.mulCap(task.requesterDeposit)) / MULTIPLIER_DIVISOR);\\n        }\\n    }\\n\\n    /** @dev Gets the current price of a specified task.\\n     *  @param _taskID The ID of the task.\\n     *  @return price The price of the task.\\n     */\\n    function getTaskPrice(uint256 _taskID) public view returns (uint256 price) {\\n        Task storage task = tasks[_taskID];\\n        if (block.timestamp - task.lastInteraction > task.submissionTimeout || task.status != Status.Created) {\\n            price = 0;\\n        } else {\\n            price =\\n                task.minPrice +\\n                ((task.maxPrice - task.minPrice) * (block.timestamp - task.lastInteraction)) /\\n                task.submissionTimeout;\\n        }\\n    }\\n\\n    /** @dev Gets the total number of created tasks.\\n     *  @return The number of created tasks.\\n     */\\n    function getTaskCount() public view returns (uint256) {\\n        return tasks.length;\\n    }\\n\\n    /** @dev Gets the number of rounds of the specific task.\\n     *  @param _taskID The ID of the task.\\n     *  @return The number of rounds.\\n     */\\n    function getNumberOfRounds(uint256 _taskID) public view returns (uint256) {\\n        Task storage task = tasks[_taskID];\\n        return task.rounds.length;\\n    }\\n\\n    /** @dev Gets the contributions made by a party for a given round of task's appeal.\\n     *  @param _taskID The ID of the task.\\n     *  @param _round The position of the round.\\n     *  @param _contributor The address of the contributor.\\n     *  @return contributions The contributions.\\n     */\\n    function getContributions(\\n        uint256 _taskID,\\n        uint256 _round,\\n        address _contributor\\n    ) public view returns (uint256[3] memory contributions) {\\n        Task storage task = tasks[_taskID];\\n        Round storage round = task.rounds[_round];\\n        contributions = round.contributions[_contributor];\\n    }\\n\\n    /** @dev Gets the addresses of parties of a specified task.\\n     *  @param _taskID The ID of the task.\\n     *  @return parties The addresses of requester, translator and challenger.\\n     */\\n    function getTaskParties(uint256 _taskID) public view returns (address payable[3] memory parties) {\\n        Task storage task = tasks[_taskID];\\n        parties = task.parties;\\n    }\\n\\n    /** @dev Gets the information on a round of a task.\\n     *  @param _taskID The ID of the task.\\n     *  @param _round The round to be queried.\\n     *  @return paidFees The amount paid by each party in the round.\\n     *  @return hasPaid Whether or not a given party has paid the full fees for the round.\\n     *  @return feeRewards The amount available to pay for fees provide rewards to the winenr side.\\n     */\\n    function getRoundInfo(uint256 _taskID, uint256 _round)\\n        public\\n        view\\n        returns (\\n            uint256[3] memory paidFees,\\n            bool[3] memory hasPaid,\\n            uint256 feeRewards\\n        )\\n    {\\n        Task storage task = tasks[_taskID];\\n        Round storage round = task.rounds[_round];\\n        return (round.paidFees, round.hasPaid, round.feeRewards);\\n    }\\n}\\n\",\"keccak256\":\"0x5f6e4807c8ac69c30d15960bab185893ba18a92106274f5d0811fcd6a7f8369b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600080546001600160a01b031916331790553480156200002357600080fd5b50604051620038e3380380620038e3833981016040819052620000469162000147565b600180546001600160a01b0319166001600160a01b038a161790558651620000769060029060208a01906200009b565b5060039590955560049390935560059190915560065560075560085550620002639050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620000d357600085556200011e565b82601f10620000ee57805160ff19168380011785556200011e565b828001600101855582156200011e579182015b828111156200011e57825182559160200191906001019062000101565b506200012c92915062000130565b5090565b5b808211156200012c576000815560010162000131565b600080600080600080600080610100898b03121562000164578384fd5b88516001600160a01b03811681146200017b578485fd5b60208a810151919950906001600160401b03808211156200019a578687fd5b818c0191508c601f830112620001ae578687fd5b815181811115620001bb57fe5b604051601f8201601f1916810185018381118282101715620001d957fe5b60405281815283820185018f1015620001f0578889fd5b8892505b81831015620002135783830185015181840186015291840191620001f4565b818311156200022457888583830101525b809b50505050505060408901519550606089015194506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b61367080620002736000396000f3fe60806040526004361061023b5760003560e01c806382b350171161012e578063b5f3918b116100ab578063cc7b9d061161006f578063cc7b9d061461066f578063d2dbe1d814610691578063d661dd31146106b1578063e4c0aaf4146106c6578063fc6f8f16146106e65761023b565b8063b5f3918b146105f2578063b857318514610612578063c17a340e14610625578063c36cd1961461063a578063c4e690df1461065a5761023b565b806395c95522116100f257806395c9552214610545578063a6a7f0eb14610572578063a95c980514610592578063aba4ab74146105b2578063adc7faba146105d25761023b565b806382b350171461049a578063881f7c57146104ad5780638a9bb02a146104c05780638d977672146104ef57806392239dff146105255761023b565b8063244772e8116101bc57806368c76ffd1161018057806368c76ffd146104035780636cc6cde1146104305780636e8218aa146104455780636e99a23a146104655780637b943383146104855761023b565b8063244772e814610379578063311a6c5614610399578063339ac67c146103b95780633a2dabfa146103d957806341658341146103ee5761023b565b806312b3a2c01161020357806312b3a2c0146102fc57806312ce35251461030f5780631972483a1461032f5780631d5120851461034f57806320c58ca5146103645761023b565b8063064ba1891461024057806309e24ad4146102765780630c340a24146102985780630c7ac7b6146102ba5780631165542b146102dc575b600080fd5b34801561024c57600080fd5b5061026061025b3660046129e7565b610706565b60405161026d9190613582565b60405180910390f35b34801561028257600080fd5b506102966102913660046129e7565b610718565b005b3480156102a457600080fd5b506102ad610750565b60405161026d9190612c65565b3480156102c657600080fd5b506102cf61075f565b60405161026d9190612d00565b3480156102e857600080fd5b506102606102f7366004612a17565b6107ea565b61029661030a366004612a46565b6109fa565b34801561031b57600080fd5b5061029661032a3660046129e7565b611050565b34801561033b57600080fd5b5061026061034a3660046129e7565b61107f565b34801561035b57600080fd5b50610260611199565b34801561037057600080fd5b5061026061119f565b34801561038557600080fd5b506102606103943660046129e7565b6111a5565b3480156103a557600080fd5b506102966103b4366004612ab4565b61122c565b3480156103c557600080fd5b506102966103d4366004612991565b611390565b3480156103e557600080fd5b506102606113e9565b3480156103fa57600080fd5b506102606113ef565b34801561040f57600080fd5b5061042361041e366004612af8565b6113f5565b60405161026d9190612caa565b34801561043c57600080fd5b506102ad611491565b34801561045157600080fd5b506102606104603660046129e7565b6114a0565b34801561047157600080fd5b5061029661048036600461295d565b6115d6565b34801561049157600080fd5b50610260611856565b6102606104a8366004612b30565b61185c565b6102966104bb366004612a6a565b611a30565b3480156104cc57600080fd5b506104e06104db366004612ab4565b611d6f565b60405161026d93929190612cb8565b3480156104fb57600080fd5b5061050f61050a3660046129e7565b611e6a565b60405161026d9a99989796959493929190613599565b34801561053157600080fd5b506102966105403660046129e7565b611edc565b34801561055157600080fd5b506105656105603660046129e7565b611f0b565b60405161026d9190612c79565b34801561057e57600080fd5b5061029661058d366004612a6a565b611f77565b34801561059e57600080fd5b506102966105ad3660046129e7565b61201e565b3480156105be57600080fd5b506102966105cd3660046129e7565b61204d565b3480156105de57600080fd5b506102966105ed3660046129e7565b61215a565b3480156105fe57600080fd5b5061029661060d3660046129e7565b612189565b6102966106203660046129e7565b6121b8565b34801561063157600080fd5b506102606123fe565b34801561064657600080fd5b50610296610655366004612a6a565b612404565b34801561066657600080fd5b50610260612508565b34801561067b57600080fd5b5061068461250e565b60405161026d91906135fb565b34801561069d57600080fd5b506102966106ac3660046129e7565b612513565b3480156106bd57600080fd5b50610260612615565b3480156106d257600080fd5b506102966106e1366004612941565b61261b565b3480156106f257600080fd5b506102606107013660046129e7565b612667565b600a6020526000908152604090205481565b6000546001600160a01b0316331461074b5760405162461bcd60e51b8152600401610742906130f4565b60405180910390fd5b600355565b6000546001600160a01b031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156107e25780601f106107b7576101008083540402835291602001916107e2565b820191906000526020600020905b8154815290600101906020018083116107c557829003601f168201915b505050505081565b600080600984815481106107fa57fe5b60009182526020909120600e9091020190506004600382015460ff16600481111561082157fe5b1461082c57506109f4565b60005b600c8201548110156109f157600082600c01828154811061084c57fe5b60009182526020909120600360069092020190810154909150610100900460ff1615806108845750600381015462010000900460ff16155b156108b9576001600160a01b0385166000908152600582016020526040902060028101546001909101540193909301926109e8565b600d830154610973576000808260010154116108d6576000610912565b8160020154826001015460048401546001600160a01b03891660009081526005860160205260409020929091019160010154028161091057fe5b045b9050600080836002015411610928576000610964565b8260020154836001015460048501546001600160a01b038a1660009081526005870160205260409020929091019160020154028161096257fe5b045b919091019490940193506109e8565b60008160000184600d01546003811061098857fe5b0154116109965760006109e3565b600d8301548190600381106109a757fe5b015460048201546001600160a01b03871660009081526005840160205260409020600d860154600381106109d757fe5b015402816109e157fe5b045b840193505b5060010161082f565b50505b92915050565b600060098381548110610a0957fe5b60009182526020909120600e9091020190506001826002811115610a2957fe5b1480610a4057506002826002811115610a3e57fe5b145b610a5c5760405162461bcd60e51b81526004016107429061342c565b60038082015460ff166004811115610a7057fe5b14610a8d5760405162461bcd60e51b81526004016107429061318f565b60018054600b83015460405163021e2d3d60e31b81526001600160a01b03909216916310f169e891610ac191600401613582565b60206040518083038186803b158015610ad957600080fd5b505afa158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1191906129cb565b6002811115610b1c57fe5b14610b395760405162461bcd60e51b8152600401610742906131f3565b600154600b82015460405163afe15cfb60e01b815260009283926001600160a01b039091169163afe15cfb91610b7191600401613582565b604080518083038186803b158015610b8857600080fd5b505afa158015610b9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc09190612ad5565b91509150814210158015610bd357508042105b610bef5760405162461bcd60e51b815260040161074290612df4565b600154600b840154604051631c3db16d60e01b81526000926001600160a01b031691631c3db16d91610c249190600401613582565b60206040518083038186803b158015610c3c57600080fd5b505afa158015610c50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7491906129ff565b90506000856002811115610c8457fe5b821415610c945750600754610ccd565b81610ca25750600654610ccd565b60028484030484420310610cc85760405162461bcd60e51b815260040161074290612f6e565b506008545b600c85018054600091906000198101908110610ce557fe5b9060005260206000209060060201905080600301876002811115610d0557fe5b60038110610d0f57fe5b602081049091015460ff601f9092166101000a90041615610d425760405162461bcd60e51b8152600401610742906133a6565b600154600b87015460405163791f8b7360e11b81526000926001600160a01b03169163f23f16e691610d7a9190600290600401612da3565b60206040518083038186803b158015610d9257600080fd5b505afa158015610da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dca91906129ff565b90506000610dee612710610dde8487612692565b81610de557fe5b849190046126c6565b9050600080610e1f34610e1a878e6002811115610e0757fe5b60038110610e1157fe5b015486906126db565b6126f6565b3360009081526005880160205260409020919350915082908c6002811115610e4357fe5b60038110610e4d57fe5b018054909101905581858c6002811115610e6357fe5b60038110610e6d57fe5b01805490910190556040518c907f22039e79a27860a038aece214124c8ecef12fdc1334feb8e8a157a0ae16a1db490610eab908e9033908790612d7b565b60405180910390a282858c6002811115610ec157fe5b60038110610ecb57fe5b015410610f6f576001856003018c6002811115610ee457fe5b60038110610eee57fe5b602091828204019190066101000a81548160ff021916908315150217905550846000018b6002811115610f1d57fe5b60038110610f2757fe5b015460048601805490910190556040518c907f213276d821d6205d87fa4f4658db4bf5a24a2323b0fdd8ffcd239c445f86a57b90610f66908e90612d6d565b60405180910390a25b604051339082156108fc029083906000818181858888f1505050506003860154610100900460ff1690508015610faf5750600385015462010000900460ff165b1561104257600154600b8b015460405163093225f160e31b81526001600160a01b03909216916349912f88918791610fed9190600290600401612da3565b6000604051808303818588803b15801561100657600080fd5b505af115801561101a573d6000803e3d6000fd5b505050600c8c01805460010181556000525050600485015461103c90856126db565b60048601555b505050505050505050505050565b6000546001600160a01b0316331461107a5760405162461bcd60e51b8152600401610742906130f4565b600655565b6000806009838154811061108f57fe5b90600052602060002090600e020190506003548160040154420311806110c857506002600382015460ff1660048111156110c557fe5b14155b156110dc576001600160ff1b039150611193565b60015460405163f7434ea960e01b81526000916001600160a01b03169063f7434ea99061110e90600290600401612d53565b60206040518083038186803b15801561112657600080fd5b505afa15801561113a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115e91906129ff565b905061118f61271061117f846006015460055461269290919063ffffffff16565b8161118657fe5b839190046126c6565b9250505b50919050565b60085481565b60055481565b600080600983815481106111b557fe5b90600052602060002090600e0201905080600001548160040154420311806111f057506000600382015460ff1660048111156111ed57fe5b14155b156111fe5760009150611193565b8060000154816004015442038260010154836002015403028161121d57fe5b04816001015401915050919050565b600081600281111561123a57fe5b6000848152600a60205260408120546009805493945090928390811061125c57fe5b600091825260208220600c600e90920201908101805491935090600019810190811061128457fe5b6000918252602090912060015460069092020191506001600160a01b031633146112c05760405162461bcd60e51b815260040161074290612f2d565b60038083015460ff1660048111156112d457fe5b146112f15760405162461bcd60e51b815260040161074290612e77565b600381015460ff61010090910416151560011415611312576001935061132f565b600381015462010000900460ff1615156001141561132f57600293505b85337f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e7562227686600281111561135e57fe5b60405161136b9190613582565b60405180910390a36113888685600281111561138357fe5b61271b565b505050505050565b60006009848154811061139f57fe5b90600052602060002090600e0201905060008390505b600c820154811080156113d157508215806113d1575082840181105b15611388576113e18686836115d6565b6001016113b5565b60045481565b60065481565b6113fd6128e3565b60006009858154811061140c57fe5b90600052602060002090600e02019050600081600c01858154811061142d57fe5b600091825260208083206001600160a01b03881684526005600690930201918201905260409182902082516060810190935290925060038282826020028201915b81548152602001906001019080831161146e575050505050925050509392505050565b6001546001600160a01b031681565b600080600983815481106114b057fe5b90600052602060002090600e0201905080600001548160040154420311806114eb57506000600382015460ff1660048111156114e857fe5b14155b156114ff576001600160ff1b039150611193565b60008160000154826004015442038360010154846002015403028161152057fe5b600180850154905460405163f7434ea960e01b8152939092040192506000916001600160a01b039091169063f7434ea99061156090600290600401612d53565b60206040518083038186803b15801561157857600080fd5b505afa15801561158c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b091906129ff565b90506115cd61271061117f8460045461269290919063ffffffff16565b95945050505050565b6000600983815481106115e557fe5b90600052602060002090600e02019050600081600c01838154811061160657fe5b6000918252602090912060069091020190506004600383015460ff16600481111561162d57fe5b1461164a5760405162461bcd60e51b815260040161074290613291565b6003810154600090610100900460ff1615806116715750600382015462010000900460ff16155b156116ab57506001600160a01b03851660009081526005820160205260408120600281018054600190920180549084905592905501611829565b600d830154611788576000808360010154116116c8576000611704565b8260020154836001015460048501546001600160a01b038a1660009081526005870160205260409020929091019160010154028161170257fe5b045b905060008084600201541161171a576000611756565b8360020154846001015460048601546001600160a01b038b1660009081526005880160205260409020929091019160020154028161175457fe5b045b6001600160a01b0389166000908152600586016020526040812060018101829055600201559190910191506118299050565b60008260000184600d01546003811061179d57fe5b0154116117ab5760006117f8565b600d8301548290600381106117bc57fe5b015460048301546001600160a01b03881660009081526005850160205260409020600d860154600381106117ec57fe5b015402816117f657fe5b045b6001600160a01b03871660009081526005840160205260408120600d86015492935090916003811061182657fe5b01555b6040516001600160a01b0387169082156108fc029083906000818181858888f15050505050505050505050565b60075481565b60008334101561187e5760405162461bcd60e51b8152600401610742906134c8565b42851161189d5760405162461bcd60e51b8152600401610742906133e7565b506009805460018101825560009190915242808603600e83027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af81019182557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b08101879055347f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b182018190557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b38201939093557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b4810180546001600160a01b031916331790557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b5019190915560405182907f61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d906119dd9087908790612dbc565b60405180910390a2336001600160a01b0316827f6cf53aa7292e664152c2ea948c3b3c95d4b05c36daeb2626d0293473c4a4a15342604051611a1f9190613582565b60405180910390a350949350505050565b600060098481548110611a3f57fe5b60009182526020822060015460405163f7434ea960e01b8152600e90930290910193506001600160a01b03169063f7434ea990611a8190600290600401612d53565b60206040518083038186803b158015611a9957600080fd5b505afa158015611aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad191906129ff565b90506000611af4612710610dde856006015460055461269290919063ffffffff16565b90506002600384015460ff166004811115611b0b57fe5b14611b285760405162461bcd60e51b815260040161074290613075565b600354836004015442031115611b505760405162461bcd60e51b815260040161074290613362565b80341015611b705760405162461bcd60e51b8152600401610742906130aa565b6003838101805460ff19169091179055600a830180546001600160a01b0319163317905560015460405163c13517e160e01b81526001600160a01b03919091169063c13517e1908490611bca906002908190600401612da3565b6020604051808303818588803b158015611be357600080fd5b505af1158015611bf7573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611c1c91906129ff565b600b84018190556000908152600a60205260408120879055600c84018054600101815590526007830154611c5c908390611c5690846126c6565b906126db565b60078401556040513482900390339082156108fc029083906000818181858888f1505050600b8601546001546040519193506001600160a01b031691507f74baab670a4015ab2f1b467c5252a96141a2573f2908e58a92081e80d3cfde3d90611cc8908b90819061358b565b60405180910390a3336001600160a01b0316877f6f0bb1c54bb0ad8822894f45a3837ab62e23e77d25c5881ab57e1c6a99f7e0b542604051611d0a9190613582565b60405180910390a38415611d6657600154604051339189916001600160a01b03909116907fdccf2f8b2cc26eafcd61905cba744cff4b81d14740725f6376390dc6298a6a3c90611d5d908b908b90612dbc565b60405180910390a45b50505050505050565b611d776128e3565b611d7f6128e3565b60008060098681548110611d8f57fe5b90600052602060002090600e02019050600081600c018681548110611db057fe5b906000526020600020906006020190508060000181600301826004015482600380602002604051908101604052809291908260038015611e05576020028201915b815481526020019060010190808311611df1575b5050604080516060810191829052949750869350600392509050826000855b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411611e245790505050505050915094509450945050509250925092565b60098181548110611e7a57600080fd5b60009182526020909120600e9091020180546001820154600283015460038401546004850154600586015460068701546007880154600b890154600d909901549799509597949660ff9094169592946001600160a01b0390921693909291908a565b6000546001600160a01b03163314611f065760405162461bcd60e51b8152600401610742906130f4565b600855565b611f136128e3565b600060098381548110611f2257fe5b60009182526020909120604080516060810191829052600e9093029091019250600883019060039082845b81546001600160a01b03168152600190910190602001808311611f4d575050505050915050919050565b600060098481548110611f8657fe5b60009182526020909120600e9091020190506004600382015460ff166004811115611fad57fe5b1415611fcb5760405162461bcd60e51b815260040161074290613482565b600154604051339186916001600160a01b03909116907fdccf2f8b2cc26eafcd61905cba744cff4b81d14740725f6376390dc6298a6a3c906120109088908890612dbc565b60405180910390a450505050565b6000546001600160a01b031633146120485760405162461bcd60e51b8152600401610742906130f4565b600455565b60006009828154811061205c57fe5b60009182526020909120600e9091020190506002600382015460ff16600481111561208357fe5b106120a05760405162461bcd60e51b815260040161074290613315565b805460048201544203116120c65760405162461bcd60e51b81526004016107429061313d565b60038101805460ff1916600417905560078101546006820154600583015460405191909201916001600160a01b0316906108fc8315029083906000818181858888f15050600060068601819055600786015550506040518491507f5850eca3b971056e7a311e04b06c359c0aceec8e422e4e015301e136efbd888a9061214d9042906131bd565b60405180910390a2505050565b6000546001600160a01b031633146121845760405162461bcd60e51b8152600401610742906130f4565b600755565b6000546001600160a01b031633146121b35760405162461bcd60e51b8152600401610742906130f4565b600555565b6000600982815481106121c757fe5b90600052602060002090600e0201905080600001548160040154420311156122015760405162461bcd60e51b815260040161074290612e42565b60008160000154826004015442038360010154846002015403028161222257fe5b600180850154905460405163f7434ea960e01b8152939092040192506000916001600160a01b039091169063f7434ea99061226290600290600401612d53565b60206040518083038186803b15801561227a57600080fd5b505afa15801561228e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b291906129ff565b905060006122d1612710610dde8560045461269290919063ffffffff16565b90506000600385015460ff1660048111156122e857fe5b146123055760405162461bcd60e51b8152600401610742906132c8565b803410156123255760405162461bcd60e51b81526004016107429061352f565b6009840180546001600160a01b0319163317905560038401805460ff191660011790556002840154600585015460405191859003916001600160a01b0391909116906108fc8315029083906000818181858888f150505050600686018590555050600784018054820190556040513482900390339082156108fc029083906000818181858888f1935050505050336001600160a01b0316867f9c8de00bfaaca6ca425ca3047c87c81f398e79f7c15166f53dcb29782ef9da4286426040516123ee92919061358b565b60405180910390a3505050505050565b60095490565b60006009848154811061241357fe5b60009182526020909120600e9091020190506001600382015460ff16600481111561243a57fe5b146124575760405162461bcd60e51b815260040161074290612ebd565b805460048201544203111561247e5760405162461bcd60e51b815260040161074290612e42565b60088101600101546001600160a01b031633146124ad5760405162461bcd60e51b815260040161074290612fcb565b60038101805460ff191660021790554260048201819055604051339186917f81c1cc8daea412565717a44fb42a08dbcb5d73101f5473d062391293c947d26d916124fa9188918891612dd0565b60405180910390a350505050565b60035481565b600081565b60006009828154811061252257fe5b60009182526020909120600e9091020190506002600382015460ff16600481111561254957fe5b146125665760405162461bcd60e51b815260040161074290613075565b600354816004015442031161258d5760405162461bcd60e51b815260040161074290613032565b60038101805460ff19166004179055600781015460068201540160088201600101546040516001600160a01b039091169082156108fc029083906000818181858888f15050600060068601819055600786015550506040518491507f5850eca3b971056e7a311e04b06c359c0aceec8e422e4e015301e136efbd888a9061214d90429061325b565b61271081565b6000546001600160a01b031633146126455760405162461bcd60e51b8152600401610742906130f4565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806009838154811061267757fe5b60009182526020909120600e90910201600c01549392505050565b6000826126a1575060006109f4565b828202828482816126ae57fe5b04146126bc576000196126be565b805b949350505050565b6000828201838110156126bc576000196126be565b6000828211156126ed575060006109f4565b508082036109f4565b6000808383111561270c57508290506000612714565b508190508083035b9250929050565b6000828152600a6020526040812054600980549192918390811061273b57fe5b6000918252602082206003600e90920201908101805460ff19166004179055600d810185905591508361281657600582015460068301546040516001600160a01b039092169181156108fc0291906000818181858888f193505050505060028260070154816127a657fe5b60098401546040519290910492506001600160a01b0316906108fc8315029083906000818181858888f1505050600884019150600290505b600381106127e857fe5b01546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505050612894565b6001841415612836575060078101546006820154016008820160016127de565b600582015460068301546040516001600160a01b039092169181156108fc0291906000818181858888f150505050600a83015460078401546040516001600160a01b03909216925080156108fc02916000818181858888f150505050505b600060068301819055600783015560405183907f5850eca3b971056e7a311e04b06c359c0aceec8e422e4e015301e136efbd888a906128d490429061322a565b60405180910390a25050505050565b60405180606001604052806003906020820280368337509192915050565b60008083601f840112612912578182fd5b50813567ffffffffffffffff811115612929578182fd5b60208301915083602082850101111561271457600080fd5b600060208284031215612952578081fd5b81356126bc81613615565b600080600060608486031215612971578182fd5b833561297c81613615565b95602085013595506040909401359392505050565b600080600080608085870312156129a6578081fd5b84356129b181613615565b966020860135965060408601359560600135945092505050565b6000602082840312156129dc578081fd5b81516126bc8161362d565b6000602082840312156129f8578081fd5b5035919050565b600060208284031215612a10578081fd5b5051919050565b60008060408385031215612a29578182fd5b823591506020830135612a3b81613615565b809150509250929050565b60008060408385031215612a58578182fd5b823591506020830135612a3b8161362d565b600080600060408486031215612a7e578283fd5b83359250602084013567ffffffffffffffff811115612a9b578283fd5b612aa786828701612901565b9497909650939450505050565b60008060408385031215612ac6578182fd5b50508035926020909101359150565b60008060408385031215612ae7578182fd5b505080516020909101519092909150565b600080600060608486031215612b0c578283fd5b83359250602084013591506040840135612b2581613615565b809150509250925092565b60008060008060608587031215612b45578384fd5b8435935060208501359250604085013567ffffffffffffffff811115612b69578283fd5b612b7587828801612901565b95989497509550505050565b8060005b6003811015612ba4578151845260209384019390910190600101612b85565b50505050565b60008154600180821660008114612bc85760018114612be657612c24565b60028304607f16865260ff1983166020870152604086019350612c24565b60028304808752612bf686613609565b60005b82811015612c1a5781546020828b0101528482019150602081019050612bf9565b8801602001955050505b50505092915050565b60038110612c3757fe5b9052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6001600160a01b0391909116815260200190565b60608101818360005b6003811015612c245781516001600160a01b0316835260209283019290910190600101612c82565b606081016109f48284612b81565b60e08101612cc68286612b81565b606082018460005b6003811015612cef5781511515835260209283019290910190600101612cce565b5050508260c0830152949350505050565b6000602080835283518082850152825b81811015612d2c57858101830151858201604001528201612d10565b81811115612d3d5783604083870101525b50601f01601f1916929092016040019392505050565b600060208252612d666020830184612baa565b9392505050565b602081016109f48284612c2d565b60608101612d898286612c2d565b6001600160a01b0393909316602082015260400152919050565b6000838252604060208301526126be6040830184612baa565b6000602082526126be602083018486612c3b565b600060408252612de4604083018587612c3b565b9050826020830152949350505050565b6020808252602e908201527f46756e64696e67206d757374206265206d6164652077697468696e207468652060408201526d30b83832b0b6103832b934b7b21760911b606082015260800190565b6020808252818101527f54686520646561646c696e652068617320616c7265616479207061737365642e604082015260600190565b60208082526026908201527f54686520646973707574652068617320616c7265616479206265656e2072657360408201526537b63b32b21760d11b606082015260800190565b6020808252604a908201527f546865207461736b20697320656974686572206e6f742061737369676e65642060408201527f6f72207472616e736c6174696f6e2068617320616c7265616479206265656e2060608201526939bab136b4ba3a32b21760b11b608082015260a00190565b60208082526021908201527f4d7573742062652063616c6c6564206279207468652061726269747261746f726040820152601760f91b606082015260800190565b6020808252603e908201527f546865206c6f736572206d7573742070617920647572696e672074686520666960408201527f7273742068616c66206f66207468652061707065616c20706572696f642e0000606082015260800190565b60208082526041908201527f43616e2774207375626d6974207472616e736c6174696f6e20746f207468652060408201527f7461736b2074686174207761736e27742061737369676e656420746f20796f756060820152601760f91b608082015260a00190565b60208082526023908201527f54686520726576696577207068617365206861736e277420706173736564207960408201526232ba1760e91b606082015260800190565b6020808252818101527f546865207461736b20697320696e207468652077726f6e67207374617475732e604082015260600190565b6020808252602a908201527f4e6f7420656e6f7567682045544820746f20636f766572206368616c6c656e6760408201526932903232b837b9b4ba1760b11b606082015260800190565b60208082526029908201527f4f6e6c7920676f7665726e6f7220697320616c6c6f77656420746f207065726660408201526837b936903a3434b99760b91b606082015260800190565b60208082526032908201527f43616e2774207265696d62757273652069662074686520646561646c696e65206040820152713430b9b713ba103830b9b9b2b2103cb2ba1760711b606082015260800190565b602080825260149082015273139bc8191a5cdc1d5d19481d1bc8185c1c19585b60621b604082015260600190565b6040808252601490820152731c995c5d595cdd195c8b5c995a5b589d5c9cd95960621b6060820152602081019190915260800190565b6020808252601a908201527f44697370757465206973206e6f742061707065616c61626c652e000000000000604082015260600190565b6040808252600f908201526e191a5cdc1d5d194b5cd95d1d1b1959608a1b6060820152602081019190915260800190565b6040808252601490820152731d1c985b9cdb185d1a5bdb8b5858d8d95c1d195960621b6060820152602081019190915260800190565b6020808252601c908201527f546865207461736b2073686f756c64206265207265736f6c7665642e00000000604082015260600190565b6020808252602d908201527f5461736b2068617320616c7265616479206265656e2061737369676e6564206f60408201526c39103932b4b6b13ab939b2b21760991b606082015260800190565b6020808252602d908201527f43616e2774207265696d6275727365206966207472616e736c6174696f6e207760408201526c30b99039bab136b4ba3a32b21760991b606082015260800190565b60208082526024908201527f546865207265766965772070686173652068617320616c72656164792070617360408201526339b2b21760e11b606082015260800190565b60208082526021908201527f41707065616c206665652068617320616c7265616479206265656e20706169646040820152601760f91b606082015260800190565b60208082526025908201527f54686520646561646c696e652073686f756c6420626520696e207468652066756040820152643a3ab9329760d91b606082015260800190565b60208082526036908201527f526563697069656e74206d7573742062652065697468657220746865207472616040820152753739b630ba37b91037b91031b430b63632b733b2b91760511b606082015260800190565b60208082526026908201527f546865207461736b206d757374206e6f7420616c72656164792062652072657360408201526537b63b32b21760d11b606082015260800190565b60208082526041908201527f4465706f73697465642076616c75652073686f756c642062652067726561746560408201527f72207468616e206f7220657175616c20746f20746865206d696e2070726963656060820152601760f91b608082015260a00190565b60208082526033908201527f4e6f7420656e6f7567682045544820746f20726561636820746865207265717560408201527234b932b2103232b837b9b4ba103b30b63ab29760691b606082015260800190565b90815260200190565b918252602082015260400190565b8a8152602081018a9052604081018990526101408101600589106135b957fe5b606082019890985260808101969096526001600160a01b039490941660a086015260c085019290925260e0840152610100830152610120909101529392505050565b60ff91909116815260200190565b60009081526020902090565b6001600160a01b038116811461362a57600080fd5b50565b6003811061362a57600080fdfea2646970667358221220e09fd9ce89443a9f10954467c35625fa090c1119f74b514e13a076a12dbe4de864736f6c63430007040033",
  "deployedBytecode": "0x60806040526004361061023b5760003560e01c806382b350171161012e578063b5f3918b116100ab578063cc7b9d061161006f578063cc7b9d061461066f578063d2dbe1d814610691578063d661dd31146106b1578063e4c0aaf4146106c6578063fc6f8f16146106e65761023b565b8063b5f3918b146105f2578063b857318514610612578063c17a340e14610625578063c36cd1961461063a578063c4e690df1461065a5761023b565b806395c95522116100f257806395c9552214610545578063a6a7f0eb14610572578063a95c980514610592578063aba4ab74146105b2578063adc7faba146105d25761023b565b806382b350171461049a578063881f7c57146104ad5780638a9bb02a146104c05780638d977672146104ef57806392239dff146105255761023b565b8063244772e8116101bc57806368c76ffd1161018057806368c76ffd146104035780636cc6cde1146104305780636e8218aa146104455780636e99a23a146104655780637b943383146104855761023b565b8063244772e814610379578063311a6c5614610399578063339ac67c146103b95780633a2dabfa146103d957806341658341146103ee5761023b565b806312b3a2c01161020357806312b3a2c0146102fc57806312ce35251461030f5780631972483a1461032f5780631d5120851461034f57806320c58ca5146103645761023b565b8063064ba1891461024057806309e24ad4146102765780630c340a24146102985780630c7ac7b6146102ba5780631165542b146102dc575b600080fd5b34801561024c57600080fd5b5061026061025b3660046129e7565b610706565b60405161026d9190613582565b60405180910390f35b34801561028257600080fd5b506102966102913660046129e7565b610718565b005b3480156102a457600080fd5b506102ad610750565b60405161026d9190612c65565b3480156102c657600080fd5b506102cf61075f565b60405161026d9190612d00565b3480156102e857600080fd5b506102606102f7366004612a17565b6107ea565b61029661030a366004612a46565b6109fa565b34801561031b57600080fd5b5061029661032a3660046129e7565b611050565b34801561033b57600080fd5b5061026061034a3660046129e7565b61107f565b34801561035b57600080fd5b50610260611199565b34801561037057600080fd5b5061026061119f565b34801561038557600080fd5b506102606103943660046129e7565b6111a5565b3480156103a557600080fd5b506102966103b4366004612ab4565b61122c565b3480156103c557600080fd5b506102966103d4366004612991565b611390565b3480156103e557600080fd5b506102606113e9565b3480156103fa57600080fd5b506102606113ef565b34801561040f57600080fd5b5061042361041e366004612af8565b6113f5565b60405161026d9190612caa565b34801561043c57600080fd5b506102ad611491565b34801561045157600080fd5b506102606104603660046129e7565b6114a0565b34801561047157600080fd5b5061029661048036600461295d565b6115d6565b34801561049157600080fd5b50610260611856565b6102606104a8366004612b30565b61185c565b6102966104bb366004612a6a565b611a30565b3480156104cc57600080fd5b506104e06104db366004612ab4565b611d6f565b60405161026d93929190612cb8565b3480156104fb57600080fd5b5061050f61050a3660046129e7565b611e6a565b60405161026d9a99989796959493929190613599565b34801561053157600080fd5b506102966105403660046129e7565b611edc565b34801561055157600080fd5b506105656105603660046129e7565b611f0b565b60405161026d9190612c79565b34801561057e57600080fd5b5061029661058d366004612a6a565b611f77565b34801561059e57600080fd5b506102966105ad3660046129e7565b61201e565b3480156105be57600080fd5b506102966105cd3660046129e7565b61204d565b3480156105de57600080fd5b506102966105ed3660046129e7565b61215a565b3480156105fe57600080fd5b5061029661060d3660046129e7565b612189565b6102966106203660046129e7565b6121b8565b34801561063157600080fd5b506102606123fe565b34801561064657600080fd5b50610296610655366004612a6a565b612404565b34801561066657600080fd5b50610260612508565b34801561067b57600080fd5b5061068461250e565b60405161026d91906135fb565b34801561069d57600080fd5b506102966106ac3660046129e7565b612513565b3480156106bd57600080fd5b50610260612615565b3480156106d257600080fd5b506102966106e1366004612941565b61261b565b3480156106f257600080fd5b506102606107013660046129e7565b612667565b600a6020526000908152604090205481565b6000546001600160a01b0316331461074b5760405162461bcd60e51b8152600401610742906130f4565b60405180910390fd5b600355565b6000546001600160a01b031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156107e25780601f106107b7576101008083540402835291602001916107e2565b820191906000526020600020905b8154815290600101906020018083116107c557829003601f168201915b505050505081565b600080600984815481106107fa57fe5b60009182526020909120600e9091020190506004600382015460ff16600481111561082157fe5b1461082c57506109f4565b60005b600c8201548110156109f157600082600c01828154811061084c57fe5b60009182526020909120600360069092020190810154909150610100900460ff1615806108845750600381015462010000900460ff16155b156108b9576001600160a01b0385166000908152600582016020526040902060028101546001909101540193909301926109e8565b600d830154610973576000808260010154116108d6576000610912565b8160020154826001015460048401546001600160a01b03891660009081526005860160205260409020929091019160010154028161091057fe5b045b9050600080836002015411610928576000610964565b8260020154836001015460048501546001600160a01b038a1660009081526005870160205260409020929091019160020154028161096257fe5b045b919091019490940193506109e8565b60008160000184600d01546003811061098857fe5b0154116109965760006109e3565b600d8301548190600381106109a757fe5b015460048201546001600160a01b03871660009081526005840160205260409020600d860154600381106109d757fe5b015402816109e157fe5b045b840193505b5060010161082f565b50505b92915050565b600060098381548110610a0957fe5b60009182526020909120600e9091020190506001826002811115610a2957fe5b1480610a4057506002826002811115610a3e57fe5b145b610a5c5760405162461bcd60e51b81526004016107429061342c565b60038082015460ff166004811115610a7057fe5b14610a8d5760405162461bcd60e51b81526004016107429061318f565b60018054600b83015460405163021e2d3d60e31b81526001600160a01b03909216916310f169e891610ac191600401613582565b60206040518083038186803b158015610ad957600080fd5b505afa158015610aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1191906129cb565b6002811115610b1c57fe5b14610b395760405162461bcd60e51b8152600401610742906131f3565b600154600b82015460405163afe15cfb60e01b815260009283926001600160a01b039091169163afe15cfb91610b7191600401613582565b604080518083038186803b158015610b8857600080fd5b505afa158015610b9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc09190612ad5565b91509150814210158015610bd357508042105b610bef5760405162461bcd60e51b815260040161074290612df4565b600154600b840154604051631c3db16d60e01b81526000926001600160a01b031691631c3db16d91610c249190600401613582565b60206040518083038186803b158015610c3c57600080fd5b505afa158015610c50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7491906129ff565b90506000856002811115610c8457fe5b821415610c945750600754610ccd565b81610ca25750600654610ccd565b60028484030484420310610cc85760405162461bcd60e51b815260040161074290612f6e565b506008545b600c85018054600091906000198101908110610ce557fe5b9060005260206000209060060201905080600301876002811115610d0557fe5b60038110610d0f57fe5b602081049091015460ff601f9092166101000a90041615610d425760405162461bcd60e51b8152600401610742906133a6565b600154600b87015460405163791f8b7360e11b81526000926001600160a01b03169163f23f16e691610d7a9190600290600401612da3565b60206040518083038186803b158015610d9257600080fd5b505afa158015610da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dca91906129ff565b90506000610dee612710610dde8487612692565b81610de557fe5b849190046126c6565b9050600080610e1f34610e1a878e6002811115610e0757fe5b60038110610e1157fe5b015486906126db565b6126f6565b3360009081526005880160205260409020919350915082908c6002811115610e4357fe5b60038110610e4d57fe5b018054909101905581858c6002811115610e6357fe5b60038110610e6d57fe5b01805490910190556040518c907f22039e79a27860a038aece214124c8ecef12fdc1334feb8e8a157a0ae16a1db490610eab908e9033908790612d7b565b60405180910390a282858c6002811115610ec157fe5b60038110610ecb57fe5b015410610f6f576001856003018c6002811115610ee457fe5b60038110610eee57fe5b602091828204019190066101000a81548160ff021916908315150217905550846000018b6002811115610f1d57fe5b60038110610f2757fe5b015460048601805490910190556040518c907f213276d821d6205d87fa4f4658db4bf5a24a2323b0fdd8ffcd239c445f86a57b90610f66908e90612d6d565b60405180910390a25b604051339082156108fc029083906000818181858888f1505050506003860154610100900460ff1690508015610faf5750600385015462010000900460ff165b1561104257600154600b8b015460405163093225f160e31b81526001600160a01b03909216916349912f88918791610fed9190600290600401612da3565b6000604051808303818588803b15801561100657600080fd5b505af115801561101a573d6000803e3d6000fd5b505050600c8c01805460010181556000525050600485015461103c90856126db565b60048601555b505050505050505050505050565b6000546001600160a01b0316331461107a5760405162461bcd60e51b8152600401610742906130f4565b600655565b6000806009838154811061108f57fe5b90600052602060002090600e020190506003548160040154420311806110c857506002600382015460ff1660048111156110c557fe5b14155b156110dc576001600160ff1b039150611193565b60015460405163f7434ea960e01b81526000916001600160a01b03169063f7434ea99061110e90600290600401612d53565b60206040518083038186803b15801561112657600080fd5b505afa15801561113a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115e91906129ff565b905061118f61271061117f846006015460055461269290919063ffffffff16565b8161118657fe5b839190046126c6565b9250505b50919050565b60085481565b60055481565b600080600983815481106111b557fe5b90600052602060002090600e0201905080600001548160040154420311806111f057506000600382015460ff1660048111156111ed57fe5b14155b156111fe5760009150611193565b8060000154816004015442038260010154836002015403028161121d57fe5b04816001015401915050919050565b600081600281111561123a57fe5b6000848152600a60205260408120546009805493945090928390811061125c57fe5b600091825260208220600c600e90920201908101805491935090600019810190811061128457fe5b6000918252602090912060015460069092020191506001600160a01b031633146112c05760405162461bcd60e51b815260040161074290612f2d565b60038083015460ff1660048111156112d457fe5b146112f15760405162461bcd60e51b815260040161074290612e77565b600381015460ff61010090910416151560011415611312576001935061132f565b600381015462010000900460ff1615156001141561132f57600293505b85337f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e7562227686600281111561135e57fe5b60405161136b9190613582565b60405180910390a36113888685600281111561138357fe5b61271b565b505050505050565b60006009848154811061139f57fe5b90600052602060002090600e0201905060008390505b600c820154811080156113d157508215806113d1575082840181105b15611388576113e18686836115d6565b6001016113b5565b60045481565b60065481565b6113fd6128e3565b60006009858154811061140c57fe5b90600052602060002090600e02019050600081600c01858154811061142d57fe5b600091825260208083206001600160a01b03881684526005600690930201918201905260409182902082516060810190935290925060038282826020028201915b81548152602001906001019080831161146e575050505050925050509392505050565b6001546001600160a01b031681565b600080600983815481106114b057fe5b90600052602060002090600e0201905080600001548160040154420311806114eb57506000600382015460ff1660048111156114e857fe5b14155b156114ff576001600160ff1b039150611193565b60008160000154826004015442038360010154846002015403028161152057fe5b600180850154905460405163f7434ea960e01b8152939092040192506000916001600160a01b039091169063f7434ea99061156090600290600401612d53565b60206040518083038186803b15801561157857600080fd5b505afa15801561158c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b091906129ff565b90506115cd61271061117f8460045461269290919063ffffffff16565b95945050505050565b6000600983815481106115e557fe5b90600052602060002090600e02019050600081600c01838154811061160657fe5b6000918252602090912060069091020190506004600383015460ff16600481111561162d57fe5b1461164a5760405162461bcd60e51b815260040161074290613291565b6003810154600090610100900460ff1615806116715750600382015462010000900460ff16155b156116ab57506001600160a01b03851660009081526005820160205260408120600281018054600190920180549084905592905501611829565b600d830154611788576000808360010154116116c8576000611704565b8260020154836001015460048501546001600160a01b038a1660009081526005870160205260409020929091019160010154028161170257fe5b045b905060008084600201541161171a576000611756565b8360020154846001015460048601546001600160a01b038b1660009081526005880160205260409020929091019160020154028161175457fe5b045b6001600160a01b0389166000908152600586016020526040812060018101829055600201559190910191506118299050565b60008260000184600d01546003811061179d57fe5b0154116117ab5760006117f8565b600d8301548290600381106117bc57fe5b015460048301546001600160a01b03881660009081526005850160205260409020600d860154600381106117ec57fe5b015402816117f657fe5b045b6001600160a01b03871660009081526005840160205260408120600d86015492935090916003811061182657fe5b01555b6040516001600160a01b0387169082156108fc029083906000818181858888f15050505050505050505050565b60075481565b60008334101561187e5760405162461bcd60e51b8152600401610742906134c8565b42851161189d5760405162461bcd60e51b8152600401610742906133e7565b506009805460018101825560009190915242808603600e83027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af81019182557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b08101879055347f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b182018190557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b38201939093557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b4810180546001600160a01b031916331790557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b5019190915560405182907f61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d906119dd9087908790612dbc565b60405180910390a2336001600160a01b0316827f6cf53aa7292e664152c2ea948c3b3c95d4b05c36daeb2626d0293473c4a4a15342604051611a1f9190613582565b60405180910390a350949350505050565b600060098481548110611a3f57fe5b60009182526020822060015460405163f7434ea960e01b8152600e90930290910193506001600160a01b03169063f7434ea990611a8190600290600401612d53565b60206040518083038186803b158015611a9957600080fd5b505afa158015611aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad191906129ff565b90506000611af4612710610dde856006015460055461269290919063ffffffff16565b90506002600384015460ff166004811115611b0b57fe5b14611b285760405162461bcd60e51b815260040161074290613075565b600354836004015442031115611b505760405162461bcd60e51b815260040161074290613362565b80341015611b705760405162461bcd60e51b8152600401610742906130aa565b6003838101805460ff19169091179055600a830180546001600160a01b0319163317905560015460405163c13517e160e01b81526001600160a01b03919091169063c13517e1908490611bca906002908190600401612da3565b6020604051808303818588803b158015611be357600080fd5b505af1158015611bf7573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611c1c91906129ff565b600b84018190556000908152600a60205260408120879055600c84018054600101815590526007830154611c5c908390611c5690846126c6565b906126db565b60078401556040513482900390339082156108fc029083906000818181858888f1505050600b8601546001546040519193506001600160a01b031691507f74baab670a4015ab2f1b467c5252a96141a2573f2908e58a92081e80d3cfde3d90611cc8908b90819061358b565b60405180910390a3336001600160a01b0316877f6f0bb1c54bb0ad8822894f45a3837ab62e23e77d25c5881ab57e1c6a99f7e0b542604051611d0a9190613582565b60405180910390a38415611d6657600154604051339189916001600160a01b03909116907fdccf2f8b2cc26eafcd61905cba744cff4b81d14740725f6376390dc6298a6a3c90611d5d908b908b90612dbc565b60405180910390a45b50505050505050565b611d776128e3565b611d7f6128e3565b60008060098681548110611d8f57fe5b90600052602060002090600e02019050600081600c018681548110611db057fe5b906000526020600020906006020190508060000181600301826004015482600380602002604051908101604052809291908260038015611e05576020028201915b815481526020019060010190808311611df1575b5050604080516060810191829052949750869350600392509050826000855b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411611e245790505050505050915094509450945050509250925092565b60098181548110611e7a57600080fd5b60009182526020909120600e9091020180546001820154600283015460038401546004850154600586015460068701546007880154600b890154600d909901549799509597949660ff9094169592946001600160a01b0390921693909291908a565b6000546001600160a01b03163314611f065760405162461bcd60e51b8152600401610742906130f4565b600855565b611f136128e3565b600060098381548110611f2257fe5b60009182526020909120604080516060810191829052600e9093029091019250600883019060039082845b81546001600160a01b03168152600190910190602001808311611f4d575050505050915050919050565b600060098481548110611f8657fe5b60009182526020909120600e9091020190506004600382015460ff166004811115611fad57fe5b1415611fcb5760405162461bcd60e51b815260040161074290613482565b600154604051339186916001600160a01b03909116907fdccf2f8b2cc26eafcd61905cba744cff4b81d14740725f6376390dc6298a6a3c906120109088908890612dbc565b60405180910390a450505050565b6000546001600160a01b031633146120485760405162461bcd60e51b8152600401610742906130f4565b600455565b60006009828154811061205c57fe5b60009182526020909120600e9091020190506002600382015460ff16600481111561208357fe5b106120a05760405162461bcd60e51b815260040161074290613315565b805460048201544203116120c65760405162461bcd60e51b81526004016107429061313d565b60038101805460ff1916600417905560078101546006820154600583015460405191909201916001600160a01b0316906108fc8315029083906000818181858888f15050600060068601819055600786015550506040518491507f5850eca3b971056e7a311e04b06c359c0aceec8e422e4e015301e136efbd888a9061214d9042906131bd565b60405180910390a2505050565b6000546001600160a01b031633146121845760405162461bcd60e51b8152600401610742906130f4565b600755565b6000546001600160a01b031633146121b35760405162461bcd60e51b8152600401610742906130f4565b600555565b6000600982815481106121c757fe5b90600052602060002090600e0201905080600001548160040154420311156122015760405162461bcd60e51b815260040161074290612e42565b60008160000154826004015442038360010154846002015403028161222257fe5b600180850154905460405163f7434ea960e01b8152939092040192506000916001600160a01b039091169063f7434ea99061226290600290600401612d53565b60206040518083038186803b15801561227a57600080fd5b505afa15801561228e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b291906129ff565b905060006122d1612710610dde8560045461269290919063ffffffff16565b90506000600385015460ff1660048111156122e857fe5b146123055760405162461bcd60e51b8152600401610742906132c8565b803410156123255760405162461bcd60e51b81526004016107429061352f565b6009840180546001600160a01b0319163317905560038401805460ff191660011790556002840154600585015460405191859003916001600160a01b0391909116906108fc8315029083906000818181858888f150505050600686018590555050600784018054820190556040513482900390339082156108fc029083906000818181858888f1935050505050336001600160a01b0316867f9c8de00bfaaca6ca425ca3047c87c81f398e79f7c15166f53dcb29782ef9da4286426040516123ee92919061358b565b60405180910390a3505050505050565b60095490565b60006009848154811061241357fe5b60009182526020909120600e9091020190506001600382015460ff16600481111561243a57fe5b146124575760405162461bcd60e51b815260040161074290612ebd565b805460048201544203111561247e5760405162461bcd60e51b815260040161074290612e42565b60088101600101546001600160a01b031633146124ad5760405162461bcd60e51b815260040161074290612fcb565b60038101805460ff191660021790554260048201819055604051339186917f81c1cc8daea412565717a44fb42a08dbcb5d73101f5473d062391293c947d26d916124fa9188918891612dd0565b60405180910390a350505050565b60035481565b600081565b60006009828154811061252257fe5b60009182526020909120600e9091020190506002600382015460ff16600481111561254957fe5b146125665760405162461bcd60e51b815260040161074290613075565b600354816004015442031161258d5760405162461bcd60e51b815260040161074290613032565b60038101805460ff19166004179055600781015460068201540160088201600101546040516001600160a01b039091169082156108fc029083906000818181858888f15050600060068601819055600786015550506040518491507f5850eca3b971056e7a311e04b06c359c0aceec8e422e4e015301e136efbd888a9061214d90429061325b565b61271081565b6000546001600160a01b031633146126455760405162461bcd60e51b8152600401610742906130f4565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806009838154811061267757fe5b60009182526020909120600e90910201600c01549392505050565b6000826126a1575060006109f4565b828202828482816126ae57fe5b04146126bc576000196126be565b805b949350505050565b6000828201838110156126bc576000196126be565b6000828211156126ed575060006109f4565b508082036109f4565b6000808383111561270c57508290506000612714565b508190508083035b9250929050565b6000828152600a6020526040812054600980549192918390811061273b57fe5b6000918252602082206003600e90920201908101805460ff19166004179055600d810185905591508361281657600582015460068301546040516001600160a01b039092169181156108fc0291906000818181858888f193505050505060028260070154816127a657fe5b60098401546040519290910492506001600160a01b0316906108fc8315029083906000818181858888f1505050600884019150600290505b600381106127e857fe5b01546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505050612894565b6001841415612836575060078101546006820154016008820160016127de565b600582015460068301546040516001600160a01b039092169181156108fc0291906000818181858888f150505050600a83015460078401546040516001600160a01b03909216925080156108fc02916000818181858888f150505050505b600060068301819055600783015560405183907f5850eca3b971056e7a311e04b06c359c0aceec8e422e4e015301e136efbd888a906128d490429061322a565b60405180910390a25050505050565b60405180606001604052806003906020820280368337509192915050565b60008083601f840112612912578182fd5b50813567ffffffffffffffff811115612929578182fd5b60208301915083602082850101111561271457600080fd5b600060208284031215612952578081fd5b81356126bc81613615565b600080600060608486031215612971578182fd5b833561297c81613615565b95602085013595506040909401359392505050565b600080600080608085870312156129a6578081fd5b84356129b181613615565b966020860135965060408601359560600135945092505050565b6000602082840312156129dc578081fd5b81516126bc8161362d565b6000602082840312156129f8578081fd5b5035919050565b600060208284031215612a10578081fd5b5051919050565b60008060408385031215612a29578182fd5b823591506020830135612a3b81613615565b809150509250929050565b60008060408385031215612a58578182fd5b823591506020830135612a3b8161362d565b600080600060408486031215612a7e578283fd5b83359250602084013567ffffffffffffffff811115612a9b578283fd5b612aa786828701612901565b9497909650939450505050565b60008060408385031215612ac6578182fd5b50508035926020909101359150565b60008060408385031215612ae7578182fd5b505080516020909101519092909150565b600080600060608486031215612b0c578283fd5b83359250602084013591506040840135612b2581613615565b809150509250925092565b60008060008060608587031215612b45578384fd5b8435935060208501359250604085013567ffffffffffffffff811115612b69578283fd5b612b7587828801612901565b95989497509550505050565b8060005b6003811015612ba4578151845260209384019390910190600101612b85565b50505050565b60008154600180821660008114612bc85760018114612be657612c24565b60028304607f16865260ff1983166020870152604086019350612c24565b60028304808752612bf686613609565b60005b82811015612c1a5781546020828b0101528482019150602081019050612bf9565b8801602001955050505b50505092915050565b60038110612c3757fe5b9052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6001600160a01b0391909116815260200190565b60608101818360005b6003811015612c245781516001600160a01b0316835260209283019290910190600101612c82565b606081016109f48284612b81565b60e08101612cc68286612b81565b606082018460005b6003811015612cef5781511515835260209283019290910190600101612cce565b5050508260c0830152949350505050565b6000602080835283518082850152825b81811015612d2c57858101830151858201604001528201612d10565b81811115612d3d5783604083870101525b50601f01601f1916929092016040019392505050565b600060208252612d666020830184612baa565b9392505050565b602081016109f48284612c2d565b60608101612d898286612c2d565b6001600160a01b0393909316602082015260400152919050565b6000838252604060208301526126be6040830184612baa565b6000602082526126be602083018486612c3b565b600060408252612de4604083018587612c3b565b9050826020830152949350505050565b6020808252602e908201527f46756e64696e67206d757374206265206d6164652077697468696e207468652060408201526d30b83832b0b6103832b934b7b21760911b606082015260800190565b6020808252818101527f54686520646561646c696e652068617320616c7265616479207061737365642e604082015260600190565b60208082526026908201527f54686520646973707574652068617320616c7265616479206265656e2072657360408201526537b63b32b21760d11b606082015260800190565b6020808252604a908201527f546865207461736b20697320656974686572206e6f742061737369676e65642060408201527f6f72207472616e736c6174696f6e2068617320616c7265616479206265656e2060608201526939bab136b4ba3a32b21760b11b608082015260a00190565b60208082526021908201527f4d7573742062652063616c6c6564206279207468652061726269747261746f726040820152601760f91b606082015260800190565b6020808252603e908201527f546865206c6f736572206d7573742070617920647572696e672074686520666960408201527f7273742068616c66206f66207468652061707065616c20706572696f642e0000606082015260800190565b60208082526041908201527f43616e2774207375626d6974207472616e736c6174696f6e20746f207468652060408201527f7461736b2074686174207761736e27742061737369676e656420746f20796f756060820152601760f91b608082015260a00190565b60208082526023908201527f54686520726576696577207068617365206861736e277420706173736564207960408201526232ba1760e91b606082015260800190565b6020808252818101527f546865207461736b20697320696e207468652077726f6e67207374617475732e604082015260600190565b6020808252602a908201527f4e6f7420656e6f7567682045544820746f20636f766572206368616c6c656e6760408201526932903232b837b9b4ba1760b11b606082015260800190565b60208082526029908201527f4f6e6c7920676f7665726e6f7220697320616c6c6f77656420746f207065726660408201526837b936903a3434b99760b91b606082015260800190565b60208082526032908201527f43616e2774207265696d62757273652069662074686520646561646c696e65206040820152713430b9b713ba103830b9b9b2b2103cb2ba1760711b606082015260800190565b602080825260149082015273139bc8191a5cdc1d5d19481d1bc8185c1c19585b60621b604082015260600190565b6040808252601490820152731c995c5d595cdd195c8b5c995a5b589d5c9cd95960621b6060820152602081019190915260800190565b6020808252601a908201527f44697370757465206973206e6f742061707065616c61626c652e000000000000604082015260600190565b6040808252600f908201526e191a5cdc1d5d194b5cd95d1d1b1959608a1b6060820152602081019190915260800190565b6040808252601490820152731d1c985b9cdb185d1a5bdb8b5858d8d95c1d195960621b6060820152602081019190915260800190565b6020808252601c908201527f546865207461736b2073686f756c64206265207265736f6c7665642e00000000604082015260600190565b6020808252602d908201527f5461736b2068617320616c7265616479206265656e2061737369676e6564206f60408201526c39103932b4b6b13ab939b2b21760991b606082015260800190565b6020808252602d908201527f43616e2774207265696d6275727365206966207472616e736c6174696f6e207760408201526c30b99039bab136b4ba3a32b21760991b606082015260800190565b60208082526024908201527f546865207265766965772070686173652068617320616c72656164792070617360408201526339b2b21760e11b606082015260800190565b60208082526021908201527f41707065616c206665652068617320616c7265616479206265656e20706169646040820152601760f91b606082015260800190565b60208082526025908201527f54686520646561646c696e652073686f756c6420626520696e207468652066756040820152643a3ab9329760d91b606082015260800190565b60208082526036908201527f526563697069656e74206d7573742062652065697468657220746865207472616040820152753739b630ba37b91037b91031b430b63632b733b2b91760511b606082015260800190565b60208082526026908201527f546865207461736b206d757374206e6f7420616c72656164792062652072657360408201526537b63b32b21760d11b606082015260800190565b60208082526041908201527f4465706f73697465642076616c75652073686f756c642062652067726561746560408201527f72207468616e206f7220657175616c20746f20746865206d696e2070726963656060820152601760f91b608082015260a00190565b60208082526033908201527f4e6f7420656e6f7567682045544820746f20726561636820746865207265717560408201527234b932b2103232b837b9b4ba103b30b63ab29760691b606082015260800190565b90815260200190565b918252602082015260400190565b8a8152602081018a9052604081018990526101408101600589106135b957fe5b606082019890985260808101969096526001600160a01b039490941660a086015260c085019290925260e0840152610100830152610120909101529392505050565b60ff91909116815260200190565b60009081526020902090565b6001600160a01b038116811461362a57600080fd5b50565b6003811061362a57600080fdfea2646970667358221220e09fd9ce89443a9f10954467c35625fa090c1119f74b514e13a076a12dbe4de864736f6c63430007040033",
  "devdoc": {
    "events": {
      "AppealContribution(uint256,uint8,address,uint256)": {
        "details": "To be emitted when someone contributes to the appeal process.",
        "params": {
          "_amount": "The amount contributed.",
          "_contributor": "The address of the contributor.",
          "_party": "The party which received the contribution.",
          "_taskID": "The ID of the respective task."
        }
      },
      "HasPaidAppealFee(uint256,uint8)": {
        "details": "To be emitted when the appeal fees of one of the parties are fully funded.",
        "params": {
          "_party": "The party that is fully funded.",
          "_taskID": "The ID of the respective task."
        }
      },
      "TaskAssigned(uint256,address,uint256,uint256)": {
        "details": "To be emitted when a translator assigns the task to himself.",
        "params": {
          "_price": "The task price at the moment it was assigned.",
          "_taskID": "The ID of the assigned task.",
          "_timestamp": "When the task was assigned.",
          "_translator": "The address that was assigned to the task."
        }
      },
      "TaskCreated(uint256,address,uint256)": {
        "details": "To be emitted when the new task is created.",
        "params": {
          "_requester": "The address that created the task.",
          "_taskID": "The ID of the newly created task.",
          "_timestamp": "When the task was created."
        }
      },
      "TaskResolved(uint256,string,uint256)": {
        "details": "To be emitted when a task is resolved, either by the translation being accepted, the requester being reimbursed or a dispute being settled.",
        "params": {
          "_reason": "Short description of what caused the task to be solved. One of: 'translation-accepted' | 'requester-reimbursed' | 'dispute-settled'",
          "_taskID": "The ID of the respective task.",
          "_timestamp": "When the task was resolved."
        }
      },
      "TranslationChallenged(uint256,address,uint256)": {
        "details": "To be emitted when a translation is challenged.",
        "params": {
          "_challenger": "The address of the challenger.",
          "_taskID": "The ID of the respective task.",
          "_timestamp": "When the task was challenged."
        }
      },
      "TranslationSubmitted(uint256,address,string,uint256)": {
        "details": "To be emitted when a translation is submitted.",
        "params": {
          "_taskID": "The ID of the respective task.",
          "_timestamp": "When the translation was submitted.",
          "_translatedText": "A URI to the translated text.",
          "_translator": "The address that performed the translation."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acceptTranslation(uint256)": {
        "details": "Pays the translator for completed task if no one challenged the translation during review period.",
        "params": {
          "_taskID": "The ID of the task."
        }
      },
      "amountWithdrawable(uint256,address)": {
        "details": "Returns the sum of withdrawable wei from appeal rounds. This function is O(n), where n is the number of rounds of the task. This could exceed the gas limit, therefore this function should only be used for interface display and not by other contracts.",
        "params": {
          "_beneficiary": "The contributor for which to query.",
          "_taskID": "The ID of the associated task."
        },
        "returns": {
          "total": "The total amount of wei available to withdraw."
        }
      },
      "assignTask(uint256)": {
        "details": "Assigns a specific task to the sender. Requires a translator's deposit.  Note that the deposit should be a little higher than the required value because of the price increase during the time the transaction is mined. The surplus will be reimbursed.",
        "params": {
          "_taskID": "The ID of the task."
        }
      },
      "batchRoundWithdraw(address,uint256,uint256,uint256)": {
        "details": "Withdraws contributions of multiple appeal rounds at once. This function is O(n) where n is the number of rounds. This could exceed the gas limit, therefore this function should be used only as a utility and not be relied upon by other contracts.",
        "params": {
          "_beneficiary": "The address that made contributions.",
          "_count": "The number of rounds to iterate. If set to 0 or a value larger than the number of rounds, iterates until the last round.",
          "_cursor": "The round from where to start withdrawing.",
          "_taskID": "The ID of the associated task."
        }
      },
      "challengeTranslation(uint256,string)": {
        "details": "Challenges the translation of a specific task. Requires challenger's deposit.",
        "params": {
          "_evidence": "A link to evidence using its URI. Ignored if not provided.",
          "_taskID": "The ID of the task."
        }
      },
      "changeChallengeMultiplier(uint256)": {
        "details": "Changes the multiplier for challenger's deposit.",
        "params": {
          "_challengeMultiplier": "A new value of the multiplier for calculating challenger's deposit. In basis points."
        }
      },
      "changeGovernor(address)": {
        "details": "Changes the governor of this contract.",
        "params": {
          "_governor": "A new governor."
        }
      },
      "changeLoserStakeMultiplier(uint256)": {
        "details": "Changes the percentage of arbitration fees that must be paid as a fee stake by the party that lost the previous round.",
        "params": {
          "_loserStakeMultiplier": "A new value of the multiplier of the appeal cost that the party that lost the previous round has to pay. In basis points."
        }
      },
      "changeReviewTimeout(uint256)": {
        "details": "Changes the time allocated for review phase.",
        "params": {
          "_reviewTimeout": "A new value of the time allotted for reviewing a translation. In seconds."
        }
      },
      "changeSharedStakeMultiplier(uint256)": {
        "details": "Changes the percentage of arbitration fees that must be paid by parties as a fee stake if there was no winner and loser in the previous round.",
        "params": {
          "_sharedStakeMultiplier": "A new value of the multiplier of the appeal cost in case when there is no winner/loser in previous round. In basis point."
        }
      },
      "changeTranslationMultiplier(uint256)": {
        "details": "Changes the multiplier for translator's deposit.",
        "params": {
          "_translationMultiplier": "A new value of the multiplier for calculating translator's deposit. In basis points."
        }
      },
      "changeWinnerStakeMultiplier(uint256)": {
        "details": "Changes the percentage of arbitration fees that must be paid as a fee stake by the party that won the previous round.",
        "params": {
          "_winnerStakeMultiplier": "A new value of the multiplier of the appeal cost that the winner of the previous round has to pay. In basis points."
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_arbitrator": "The arbitrator of the contract.",
          "_arbitratorExtraData": "Extra data for the arbitrator.",
          "_challengeMultiplier": "Multiplier for calculating challenger's deposit. In basis points.",
          "_loserStakeMultiplier": "Multiplier of the appeal cost that the loser has to pay for a round. In basis points.",
          "_reviewTimeout": "Time in seconds during which a translation can be challenged.",
          "_sharedStakeMultiplier": "Multiplier of the appeal cost that submitter must pay for a round when there is no winner/loser in the previous round. In basis points.",
          "_translationMultiplier": "Multiplier for calculating translator's deposit. In basis points.",
          "_winnerStakeMultiplier": "Multiplier of the appeal cost that the winner has to pay for a round. In basis points."
        }
      },
      "createTask(uint256,uint256,string)": {
        "details": "Creates a task based on provided details. Requires a value of maximal price to be deposited.",
        "params": {
          "_deadline": "The deadline for the translation to be completed.",
          "_metaEvidence": "A URI of meta-evidence object for task submission.",
          "_minPrice": "A minimal price of the translation. In wei."
        },
        "returns": {
          "taskID": "The ID of the created task."
        }
      },
      "fundAppeal(uint256,uint8)": {
        "details": "Takes up to the total amount required to fund a side of an appeal. Reimburses the rest. Creates an appeal if all sides are fully funded.",
        "params": {
          "_side": "The party that pays the appeal fee.",
          "_taskID": "The ID of challenged task."
        }
      },
      "getChallengeValue(uint256)": {
        "details": "Gets the deposit required for challenging the translation.",
        "params": {
          "_taskID": "The ID of the task."
        },
        "returns": {
          "deposit": "The challengers's deposit."
        }
      },
      "getContributions(uint256,uint256,address)": {
        "details": "Gets the contributions made by a party for a given round of task's appeal.",
        "params": {
          "_contributor": "The address of the contributor.",
          "_round": "The position of the round.",
          "_taskID": "The ID of the task."
        },
        "returns": {
          "contributions": "The contributions."
        }
      },
      "getDepositValue(uint256)": {
        "details": "Gets the deposit required for self-assigning the task.",
        "params": {
          "_taskID": "The ID of the task."
        },
        "returns": {
          "deposit": "The translator's deposit."
        }
      },
      "getNumberOfRounds(uint256)": {
        "details": "Gets the number of rounds of the specific task.",
        "params": {
          "_taskID": "The ID of the task."
        },
        "returns": {
          "_0": "The number of rounds."
        }
      },
      "getRoundInfo(uint256,uint256)": {
        "details": "Gets the information on a round of a task.",
        "params": {
          "_round": "The round to be queried.",
          "_taskID": "The ID of the task."
        },
        "returns": {
          "feeRewards": "The amount available to pay for fees provide rewards to the winenr side.",
          "hasPaid": "Whether or not a given party has paid the full fees for the round.",
          "paidFees": "The amount paid by each party in the round."
        }
      },
      "getTaskCount()": {
        "details": "Gets the total number of created tasks.",
        "returns": {
          "_0": "The number of created tasks."
        }
      },
      "getTaskParties(uint256)": {
        "details": "Gets the addresses of parties of a specified task.",
        "params": {
          "_taskID": "The ID of the task."
        },
        "returns": {
          "parties": "The addresses of requester, translator and challenger."
        }
      },
      "getTaskPrice(uint256)": {
        "details": "Gets the current price of a specified task.",
        "params": {
          "_taskID": "The ID of the task."
        },
        "returns": {
          "price": "The price of the task."
        }
      },
      "reimburseRequester(uint256)": {
        "details": "Reimburses the requester if no one picked the task or the translator failed to submit the translation before deadline.",
        "params": {
          "_taskID": "The ID of the task."
        }
      },
      "rule(uint256,uint256)": {
        "details": "Gives a ruling for a dispute. Can only be called by the arbitrator.  The purpose of this function is to ensure that the address calling it has the right to rule on the contract and to invert the ruling in the case a party loses from lack of appeal fees funding.",
        "params": {
          "_disputeID": "ID of the dispute in the Arbitrator contract.",
          "_ruling": "Ruling given by the arbitrator. Note that 0 is reserved for \"Refuse to arbitrate\"."
        }
      },
      "submitEvidence(uint256,string)": {
        "details": "Submit a reference to evidence. EVENT.",
        "params": {
          "_evidence": "A link to evidence using its URI.",
          "_taskID": "A task evidence is submitted for."
        }
      },
      "submitTranslation(uint256,string)": {
        "details": "Submits translated text for a specific task.",
        "params": {
          "_taskID": "The ID of the task.",
          "_translation": "A URI to the translated text."
        }
      },
      "withdrawFeesAndRewards(address,uint256,uint256)": {
        "details": "Witdraws contributions of appeal rounds. Reimburses contributions if no disputes were raised. If a dispute was raised, sends the fee stake rewards and reimbursements proportional to the contributions made to the winner of a dispute.",
        "params": {
          "_beneficiary": "The address that made contributions.",
          "_round": "The round from which to withdraw.",
          "_taskID": "The ID of the associated task."
        }
      }
    },
    "title": "Linguo  Linguo is a decentralized platform where anyone can submit a document for translation and have it translated by freelancers.  It has no platform fees and disputes about translation quality are handled by Kleros jurors.  NOTE: This contract trusts that the Arbitrator is honest and will not reenter or modify its costs during a call.  The arbitrator must support appeal period.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1392,
        "contract": "contracts/0.7.x/Linguo.sol:Linguo",
        "label": "governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1394,
        "contract": "contracts/0.7.x/Linguo.sol:Linguo",
        "label": "arbitrator",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IArbitrator)113"
      },
      {
        "astId": 1396,
        "contract": "contracts/0.7.x/Linguo.sol:Linguo",
        "label": "arbitratorExtraData",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 1398,
        "contract": "contracts/0.7.x/Linguo.sol:Linguo",
        "label": "reviewTimeout",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1400,
        "contract": "contracts/0.7.x/Linguo.sol:Linguo",
        "label": "translationMultiplier",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1402,
        "contract": "contracts/0.7.x/Linguo.sol:Linguo",
        "label": "challengeMultiplier",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1404,
        "contract": "contracts/0.7.x/Linguo.sol:Linguo",
        "label": "sharedStakeMultiplier",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1406,
        "contract": "contracts/0.7.x/Linguo.sol:Linguo",
        "label": "winnerStakeMultiplier",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1408,
        "contract": "contracts/0.7.x/Linguo.sol:Linguo",
        "label": "loserStakeMultiplier",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1411,
        "contract": "contracts/0.7.x/Linguo.sol:Linguo",
        "label": "tasks",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Task)1371_storage)dyn_storage"
      },
      {
        "astId": 1415,
        "contract": "contracts/0.7.x/Linguo.sol:Linguo",
        "label": "disputeIDtoTaskID",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)3_storage": {
        "base": "t_address_payable",
        "encoding": "inplace",
        "label": "address payable[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_bool)3_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[3]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Round)1388_storage)dyn_storage": {
        "base": "t_struct(Round)1388_storage",
        "encoding": "dynamic_array",
        "label": "struct Linguo.Round[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Task)1371_storage)dyn_storage": {
        "base": "t_struct(Task)1371_storage",
        "encoding": "dynamic_array",
        "label": "struct Linguo.Task[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IArbitrator)113": {
        "encoding": "inplace",
        "label": "contract IArbitrator",
        "numberOfBytes": "20"
      },
      "t_enum(Status)1339": {
        "encoding": "inplace",
        "label": "enum Linguo.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)3_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)3_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Round)1388_storage": {
        "encoding": "inplace",
        "label": "struct Linguo.Round",
        "members": [
          {
            "astId": 1375,
            "contract": "contracts/0.7.x/Linguo.sol:Linguo",
            "label": "paidFees",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 1379,
            "contract": "contracts/0.7.x/Linguo.sol:Linguo",
            "label": "hasPaid",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_bool)3_storage"
          },
          {
            "astId": 1381,
            "contract": "contracts/0.7.x/Linguo.sol:Linguo",
            "label": "feeRewards",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1387,
            "contract": "contracts/0.7.x/Linguo.sol:Linguo",
            "label": "contributions",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_array(t_uint256)3_storage)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Task)1371_storage": {
        "encoding": "inplace",
        "label": "struct Linguo.Task",
        "members": [
          {
            "astId": 1345,
            "contract": "contracts/0.7.x/Linguo.sol:Linguo",
            "label": "submissionTimeout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1347,
            "contract": "contracts/0.7.x/Linguo.sol:Linguo",
            "label": "minPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1349,
            "contract": "contracts/0.7.x/Linguo.sol:Linguo",
            "label": "maxPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1351,
            "contract": "contracts/0.7.x/Linguo.sol:Linguo",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(Status)1339"
          },
          {
            "astId": 1353,
            "contract": "contracts/0.7.x/Linguo.sol:Linguo",
            "label": "lastInteraction",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1355,
            "contract": "contracts/0.7.x/Linguo.sol:Linguo",
            "label": "requester",
            "offset": 0,
            "slot": "5",
            "type": "t_address_payable"
          },
          {
            "astId": 1357,
            "contract": "contracts/0.7.x/Linguo.sol:Linguo",
            "label": "requesterDeposit",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1359,
            "contract": "contracts/0.7.x/Linguo.sol:Linguo",
            "label": "sumDeposit",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1363,
            "contract": "contracts/0.7.x/Linguo.sol:Linguo",
            "label": "parties",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_address_payable)3_storage"
          },
          {
            "astId": 1365,
            "contract": "contracts/0.7.x/Linguo.sol:Linguo",
            "label": "disputeID",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 1368,
            "contract": "contracts/0.7.x/Linguo.sol:Linguo",
            "label": "rounds",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_struct(Round)1388_storage)dyn_storage"
          },
          {
            "astId": 1370,
            "contract": "contracts/0.7.x/Linguo.sol:Linguo",
            "label": "ruling",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "2787200",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "MULTIPLIER_DIVISOR()": "316",
      "VERSION_ID()": "284",
      "acceptTranslation(uint256)": "infinite",
      "amountWithdrawable(uint256,address)": "infinite",
      "arbitrator()": "1137",
      "arbitratorExtraData()": "infinite",
      "assignTask(uint256)": "infinite",
      "batchRoundWithdraw(address,uint256,uint256,uint256)": "infinite",
      "challengeMultiplier()": "1162",
      "challengeTranslation(uint256,string)": "infinite",
      "changeChallengeMultiplier(uint256)": "21109",
      "changeGovernor(address)": "22121",
      "changeLoserStakeMultiplier(uint256)": "21198",
      "changeReviewTimeout(uint256)": "21133",
      "changeSharedStakeMultiplier(uint256)": "21132",
      "changeTranslationMultiplier(uint256)": "21153",
      "changeWinnerStakeMultiplier(uint256)": "21197",
      "createTask(uint256,uint256,string)": "infinite",
      "disputeIDtoTaskID(uint256)": "1218",
      "fundAppeal(uint256,uint8)": "infinite",
      "getChallengeValue(uint256)": "infinite",
      "getContributions(uint256,uint256,address)": "infinite",
      "getDepositValue(uint256)": "infinite",
      "getNumberOfRounds(uint256)": "2158",
      "getRoundInfo(uint256,uint256)": "infinite",
      "getTaskCount()": "1117",
      "getTaskParties(uint256)": "infinite",
      "getTaskPrice(uint256)": "7860",
      "governor()": "1161",
      "loserStakeMultiplier()": "1140",
      "reimburseRequester(uint256)": "infinite",
      "reviewTimeout()": "1161",
      "rule(uint256,uint256)": "infinite",
      "sharedStakeMultiplier()": "1162",
      "submitEvidence(uint256,string)": "infinite",
      "submitTranslation(uint256,string)": "infinite",
      "tasks(uint256)": "9750",
      "translationMultiplier()": "1140",
      "winnerStakeMultiplier()": "1161",
      "withdrawFeesAndRewards(address,uint256,uint256)": "infinite"
    },
    "internal": {
      "calculateContribution(uint256,uint256)": "78",
      "executeRuling(uint256,uint256)": "infinite"
    }
  }
}
