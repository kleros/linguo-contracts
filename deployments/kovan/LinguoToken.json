{
  "address": "0xA4cA48ffdA84D5808E4FC1CfcCdb57A1F2592C95",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_arbitratorExtraData",
          "type": "bytes"
        },
        {
          "internalType": "contract ERC20",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_reviewTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_translationMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sharedStakeMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_winnerStakeMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loserStakeMultiplier",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum LinguoToken.Party",
          "name": "_party",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "AppealContribution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_metaEvidenceID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_evidenceGroupID",
          "type": "uint256"
        }
      ],
      "name": "Dispute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_evidenceGroupID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "Evidence",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum LinguoToken.Party",
          "name": "_party",
          "type": "uint8"
        }
      ],
      "name": "HasPaidAppealFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_metaEvidenceID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "MetaEvidence",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "Ruling",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_translator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "TaskAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "TaskCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "TaskResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_challenger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "TranslationChallenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_translator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_translatedText",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "TranslationSubmitted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MULTIPLIER_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_ID",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "acceptTranslation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "amountWithdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "internalType": "contract IArbitrator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitratorExtraData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "assignTask",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "batchRoundWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "challengeTranslation",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "changeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loserStakeMultiplier",
          "type": "uint256"
        }
      ],
      "name": "changeLoserStakeMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reviewTimeout",
          "type": "uint256"
        }
      ],
      "name": "changeReviewTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sharedStakeMultiplier",
          "type": "uint256"
        }
      ],
      "name": "changeSharedStakeMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_translationMultiplier",
          "type": "uint256"
        }
      ],
      "name": "changeTranslationMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_winnerStakeMultiplier",
          "type": "uint256"
        }
      ],
      "name": "changeWinnerStakeMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metaEvidence",
          "type": "string"
        }
      ],
      "name": "createTask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "taskID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputeIDtoTaskID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "enum LinguoToken.Party",
          "name": "_side",
          "type": "uint8"
        }
      ],
      "name": "fundAppeal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "getChallengeValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        }
      ],
      "name": "getContributions",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "contributions",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "getDepositValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "getNumberOfRounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "getRoundInfo",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "paidFees",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool[3]",
          "name": "hasPaid",
          "type": "bool[3]"
        },
        {
          "internalType": "uint256",
          "name": "feeRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTaskCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "getTaskParties",
      "outputs": [
        {
          "internalType": "address payable[3]",
          "name": "parties",
          "type": "address[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "getTaskPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "getTaskPriceInETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loserStakeMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        }
      ],
      "name": "reimburseRequester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reviewTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "rule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharedStakeMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_evidence",
          "type": "string"
        }
      ],
      "name": "submitEvidence",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_translation",
          "type": "string"
        }
      ],
      "name": "submitTranslation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tasks",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "submissionTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "enum LinguoToken.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "lastInteraction",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "requesterDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sumDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "disputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ruling",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "translationMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerStakeMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_taskID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "withdrawFeesAndRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6a57d591119a1c57bc2de39126142ee880ea1691466c8faf3f441ab66e773fd6",
  "receipt": {
    "to": null,
    "from": "0xceB4c079Dd21494E0bc99DA732EAdf220b727389",
    "contractAddress": "0xA4cA48ffdA84D5808E4FC1CfcCdb57A1F2592C95",
    "transactionIndex": 1,
    "gasUsed": "3770585",
    "logsBloom": "0x
    "blockHash": "0x22037f3390e36244169c72a0cce07338dcc822ead93ce9b423a0ae271720a01e",
    "transactionHash": "0x6a57d591119a1c57bc2de39126142ee880ea1691466c8faf3f441ab66e773fd6",
    "logs": [],
    "blockNumber": 21643448,
    "cumulativeGasUsed": "4267695",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA8243657a1E6ad1AAf2b59c4CCDFE85fC6fD7a8B",
    "0x",
    "0xd0A1E359811322d97991E03f863a0C30C2cF029C",
    "0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f",
    "86400",
    "1000",
    "10000",
    "5000",
    "20000"
  ],
  "solcInputHash": "0x834fac1401dd18ec1a27b1c0cc86ab92685a0b2da971e9ef32ec80543cc7ffc6",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_arbitratorExtraData\",\"type\":\"bytes\"},{\"internalType\":\"contract ERC20\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reviewTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_translationMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharedStakeMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winnerStakeMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loserStakeMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum LinguoToken.Party\",\"name\":\"_party\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AppealContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_evidenceGroupID\",\"type\":\"uint256\"}],\"name\":\"Dispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_evidenceGroupID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"Evidence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum LinguoToken.Party\",\"name\":\"_party\",\"type\":\"uint8\"}],\"name\":\"HasPaidAppealFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_metaEvidenceID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"MetaEvidence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"Ruling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_translator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"TaskAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"TaskResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"TranslationChallenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_translator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_translatedText\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"TranslationSubmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MULTIPLIER_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_ID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"acceptTranslation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"amountWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"contract IArbitrator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitratorExtraData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"assignTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"batchRoundWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"challengeTranslation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loserStakeMultiplier\",\"type\":\"uint256\"}],\"name\":\"changeLoserStakeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reviewTimeout\",\"type\":\"uint256\"}],\"name\":\"changeReviewTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharedStakeMultiplier\",\"type\":\"uint256\"}],\"name\":\"changeSharedStakeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_translationMultiplier\",\"type\":\"uint256\"}],\"name\":\"changeTranslationMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winnerStakeMultiplier\",\"type\":\"uint256\"}],\"name\":\"changeWinnerStakeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metaEvidence\",\"type\":\"string\"}],\"name\":\"createTask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"taskID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputeIDtoTaskID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"enum LinguoToken.Party\",\"name\":\"_side\",\"type\":\"uint8\"}],\"name\":\"fundAppeal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"getChallengeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"getContributions\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"contributions\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"getDepositValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"getNumberOfRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundInfo\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"paidFees\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool[3]\",\"name\":\"hasPaid\",\"type\":\"bool[3]\"},{\"internalType\":\"uint256\",\"name\":\"feeRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaskCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"getTaskParties\",\"outputs\":[{\"internalType\":\"address payable[3]\",\"name\":\"parties\",\"type\":\"address[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"getTaskPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"getTaskPriceInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceETH\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loserStakeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"}],\"name\":\"reimburseRequester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reviewTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharedStakeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_evidence\",\"type\":\"string\"}],\"name\":\"submitEvidence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_translation\",\"type\":\"string\"}],\"name\":\"submitTranslation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tasks\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"submissionTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"enum LinguoToken.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastInteraction\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requesterDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"translationMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerStakeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_taskID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"withdrawFeesAndRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AppealContribution(uint256,uint8,address,uint256)\":{\"details\":\"To be emitted when someone contributes to the appeal process.\",\"params\":{\"_amount\":\"The amount contributed.\",\"_contributor\":\"The address of the contributor.\",\"_party\":\"The party which received the contribution.\",\"_taskID\":\"The ID of the respective task.\"}},\"HasPaidAppealFee(uint256,uint8)\":{\"details\":\"To be emitted when the appeal fees of one of the parties are fully funded.\",\"params\":{\"_party\":\"The party that is fully funded.\",\"_taskID\":\"The ID of the respective task.\"}},\"TaskAssigned(uint256,address,uint256,uint256)\":{\"details\":\"To be emitted when a translator assigns the task to himself.\",\"params\":{\"_price\":\"The task price at the moment it was assigned.\",\"_taskID\":\"The ID of the assigned task.\",\"_timestamp\":\"When the task was assigned.\",\"_translator\":\"The address that was assigned to the task.\"}},\"TaskCreated(uint256,address,address,uint256)\":{\"details\":\"To be emitted when the new task is created.\",\"params\":{\"_requester\":\"The address that created the task.\",\"_taskID\":\"The ID of the newly created task.\",\"_timestamp\":\"When the task was created.\",\"_token\":\"The token that task uses.\"}},\"TaskResolved(uint256,string,uint256)\":{\"details\":\"To be emitted when a task is resolved, either by the translation being accepted, the requester being reimbursed or a dispute being settled.\",\"params\":{\"_reason\":\"Short description of what caused the task to be solved. One of: 'translation-accepted' | 'requester-reimbursed' | 'dispute-settled'\",\"_taskID\":\"The ID of the respective task.\",\"_timestamp\":\"When the task was resolved.\"}},\"TranslationChallenged(uint256,address,uint256)\":{\"details\":\"To be emitted when a translation is challenged.\",\"params\":{\"_challenger\":\"The address of the challenger.\",\"_taskID\":\"The ID of the respective task.\",\"_timestamp\":\"When the task was challenged.\"}},\"TranslationSubmitted(uint256,address,string,uint256)\":{\"details\":\"To be emitted when a translation is submitted.\",\"params\":{\"_taskID\":\"The ID of the respective task.\",\"_timestamp\":\"When the translation was submitted.\",\"_translatedText\":\"A URI to the translated text.\",\"_translator\":\"The address that performed the translation.\"}}},\"kind\":\"dev\",\"methods\":{\"acceptTranslation(uint256)\":{\"details\":\"Pays the translator for completed task if no one challenged the translation during review period.\",\"params\":{\"_taskID\":\"The ID of the task.\"}},\"amountWithdrawable(uint256,address)\":{\"details\":\"Returns the sum of withdrawable wei from appeal rounds. This function is O(n), where n is the number of rounds of the task. This could exceed the gas limit, therefore this function should only be used for interface display and not by other contracts.\",\"params\":{\"_beneficiary\":\"The contributor for which to query.\",\"_taskID\":\"The ID of the associated task.\"},\"returns\":{\"total\":\"The total amount of wei available to withdraw.\"}},\"assignTask(uint256)\":{\"details\":\"Assigns a specific task to the sender. Requires a translator's deposit in wei.\",\"params\":{\"_taskID\":\"The ID of the task.\"}},\"batchRoundWithdraw(address,uint256,uint256,uint256)\":{\"details\":\"Withdraws contributions of multiple appeal rounds at once. This function is O(n) where n is the number of rounds. This could exceed the gas limit, therefore this function should be used only as a utility and not be relied upon by other contracts.\",\"params\":{\"_beneficiary\":\"The address that made contributions.\",\"_count\":\"The number of rounds to iterate. If set to 0 or a value larger than the number of rounds, iterates until the last round.\",\"_cursor\":\"The round from where to start withdrawing.\",\"_taskID\":\"The ID of the associated task.\"}},\"challengeTranslation(uint256,string)\":{\"details\":\"Challenges the translation of a specific task. Requires challenger's deposit in wei.\",\"params\":{\"_evidence\":\"A link to evidence using its URI. Ignored if not provided.\",\"_taskID\":\"The ID of the task.\"}},\"changeGovernor(address)\":{\"details\":\"Changes the governor of this contract.\",\"params\":{\"_governor\":\"A new governor.\"}},\"changeLoserStakeMultiplier(uint256)\":{\"details\":\"Changes the percentage of arbitration fees that must be paid as a fee stake by the party that lost the previous round.\",\"params\":{\"_loserStakeMultiplier\":\"A new value of the multiplier of the appeal cost that the party that lost the previous round has to pay. In basis points.\"}},\"changeReviewTimeout(uint256)\":{\"details\":\"Changes the time allocated for review phase.\",\"params\":{\"_reviewTimeout\":\"A new value of the time allotted for reviewing a translation. In seconds.\"}},\"changeSharedStakeMultiplier(uint256)\":{\"details\":\"Changes the percentage of arbitration fees that must be paid by parties as a fee stake if there was no winner and loser in the previous round.\",\"params\":{\"_sharedStakeMultiplier\":\"A new value of the multiplier of the appeal cost in case when there is no winner/loser in previous round. In basis point.\"}},\"changeTranslationMultiplier(uint256)\":{\"details\":\"Changes the multiplier for translator's deposit.\",\"params\":{\"_translationMultiplier\":\"A new value of the multiplier for calculating translator's deposit. In basis points.\"}},\"changeWinnerStakeMultiplier(uint256)\":{\"details\":\"Changes the percentage of arbitration fees that must be paid as a fee stake by the party that won the previous round.\",\"params\":{\"_winnerStakeMultiplier\":\"A new value of the multiplier of the appeal cost that the winner of the previous round has to pay. In basis points.\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_WETH\":\"Address of the WETH token contract.\",\"_arbitrator\":\"The arbitrator of the contract.\",\"_arbitratorExtraData\":\"Extra data for the arbitrator.\",\"_loserStakeMultiplier\":\"Multiplier of the appeal cost that the loser has to pay for a round. In basis points.\",\"_reviewTimeout\":\"Time in seconds during which a translation can be challenged.\",\"_sharedStakeMultiplier\":\"Multiplier of the appeal cost that submitter must pay for a round when there is no winner/loser in the previous round. In basis points.\",\"_translationMultiplier\":\"Multiplier for calculating translator's deposit. In basis points.\",\"_uniswapFactory\":\"Address of the UniswapPair factory contract.\",\"_winnerStakeMultiplier\":\"Multiplier of the appeal cost that the winner has to pay for a round. In basis points.\"}},\"createTask(uint256,address,uint256,uint256,string)\":{\"details\":\"Creates a task based on provided details. Requires a value of maximal price to be deposited.\",\"params\":{\"_deadline\":\"The deadline for the translation to be completed.\",\"_maxPrice\":\"A maximal price of the translation. This value should be deposited by the requester.\",\"_metaEvidence\":\"A URI of meta-evidence object for task submission.\",\"_minPrice\":\"A minimal price of the translation.\",\"_token\":\"The token that will be paid for the completion of the task.\"},\"returns\":{\"taskID\":\"The ID of the created task.\"}},\"fundAppeal(uint256,uint8)\":{\"details\":\"Takes up to the total amount required to fund a side of an appeal. Reimburses the rest. Creates an appeal if all sides are fully funded.\",\"params\":{\"_side\":\"The party that pays the appeal fee.\",\"_taskID\":\"The ID of challenged task.\"}},\"getChallengeValue(uint256)\":{\"details\":\"Gets the deposit required for challenging the translation.\",\"params\":{\"_taskID\":\"The ID of the task.\"},\"returns\":{\"deposit\":\"The challengers's deposit.\"}},\"getContributions(uint256,uint256,address)\":{\"details\":\"Gets the contributions made by a party for a given round of task's appeal.\",\"params\":{\"_contributor\":\"The address of the contributor.\",\"_round\":\"The position of the round.\",\"_taskID\":\"The ID of the task.\"},\"returns\":{\"contributions\":\"The contributions.\"}},\"getDepositValue(uint256)\":{\"details\":\"Gets the deposit required for self-assigning the task.\",\"params\":{\"_taskID\":\"The ID of the task.\"},\"returns\":{\"deposit\":\"The translator's deposit.\"}},\"getNumberOfRounds(uint256)\":{\"details\":\"Gets the number of rounds of the specific task.\",\"params\":{\"_taskID\":\"The ID of the task.\"},\"returns\":{\"_0\":\"The number of rounds.\"}},\"getRoundInfo(uint256,uint256)\":{\"details\":\"Gets the information on a round of a task.\",\"params\":{\"_round\":\"The round to be queried.\",\"_taskID\":\"The ID of the task.\"},\"returns\":{\"feeRewards\":\"The amount available to pay for fees provide rewards to the winenr side.\",\"hasPaid\":\"Whether or not a given party has paid the full fees for the round.\",\"paidFees\":\"The amount paid by each party in the round.\"}},\"getTaskCount()\":{\"details\":\"Gets the total number of created tasks.\",\"returns\":{\"_0\":\"The number of created tasks.\"}},\"getTaskParties(uint256)\":{\"details\":\"Gets the addresses of parties of a specified task.\",\"params\":{\"_taskID\":\"The ID of the task.\"},\"returns\":{\"parties\":\"The addresses of requester, translator and challenger.\"}},\"getTaskPrice(uint256)\":{\"details\":\"Gets the current price of a specified task. Returns 0 if the task can no longer be assigned.\",\"params\":{\"_taskID\":\"The ID of the task.\"},\"returns\":{\"price\":\"The price of the task.\"}},\"getTaskPriceInETH(uint256)\":{\"details\":\"Gets the current price of a specified task in ETH. Returns 0 if the task can no longer be assigned.\",\"params\":{\"_taskID\":\"The ID of the task.\"},\"returns\":{\"priceETH\":\"The price of the task.\"}},\"reimburseRequester(uint256)\":{\"details\":\"Reimburses the requester if no one picked the task or the translator failed to submit the translation before deadline.\",\"params\":{\"_taskID\":\"The ID of the task.\"}},\"rule(uint256,uint256)\":{\"details\":\"Gives a ruling for a dispute. Can only be called by the arbitrator.  The purpose of this function is to ensure that the address calling it has the right to rule on the contract and to invert the ruling in the case a party loses from lack of appeal fees funding.\",\"params\":{\"_disputeID\":\"ID of the dispute in the Arbitrator contract.\",\"_ruling\":\"Ruling given by the arbitrator. Note that 0 is reserved for \\\"Refuse to arbitrate\\\".\"}},\"submitEvidence(uint256,string)\":{\"details\":\"Submit a reference to evidence. EVENT.\",\"params\":{\"_evidence\":\"A link to evidence using its URI.\",\"_taskID\":\"A task evidence is submitted for.\"}},\"submitTranslation(uint256,string)\":{\"details\":\"Submits translated text for a specific task.\",\"params\":{\"_taskID\":\"The ID of the task.\",\"_translation\":\"A URI to the translated text.\"}},\"withdrawFeesAndRewards(address,uint256,uint256)\":{\"details\":\"Witdraws contributions of appeal rounds. Reimburses contributions if no disputes were raised. If a dispute was raised, sends the fee stake rewards and reimbursements proportional to the contributions made to the winner of a dispute.\",\"params\":{\"_beneficiary\":\"The address that made contributions.\",\"_round\":\"The round from which to withdraw.\",\"_taskID\":\"The ID of the associated task.\"}}},\"title\":\"LinguoToken  Linguo is a decentralized platform where anyone can submit a document for translation and have it translated by freelancers.  It has no platform fees and disputes about translation quality are handled by Kleros jurors.  This version of the contract is made for ERC-20 tokens support.  NOTE: This contract trusts that the Arbitrator is honest and will not reenter or modify its costs during a call.  The arbitrator must support appeal period.  Also note that this contract trusts that the tokens will not allow the recipients to block the transfers.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/0.7.x/LinguoToken.sol\":\"LinguoToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@kleros/erc-792/contracts/IArbitrable.sol\":{\"content\":\"/**\\n * @authors: [@ferittuncer, @hbarcelos]\\n * @reviewers: [@remedcu*]\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n * SPDX-License-Identifier: MIT\\n */\\npragma solidity >=0.7;\\n\\nimport \\\"./IArbitrator.sol\\\";\\n\\n/**\\n * @title IArbitrable\\n * Arbitrable interface.\\n * When developing arbitrable contracts, we need to:\\n * - Define the action taken when a ruling is received by the contract.\\n * - Allow dispute creation. For this a function must call arbitrator.createDispute{value: _fee}(_choices,_extraData);\\n */\\ninterface IArbitrable {\\n    /**\\n     * @dev To be raised when a ruling is given.\\n     * @param _arbitrator The arbitrator giving the ruling.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _ruling The ruling which was given.\\n     */\\n    event Ruling(IArbitrator indexed _arbitrator, uint256 indexed _disputeID, uint256 _ruling);\\n\\n    /**\\n     * @dev Give a ruling for a dispute. Must be called by the arbitrator.\\n     * The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\\n     */\\n    function rule(uint256 _disputeID, uint256 _ruling) external;\\n}\\n\",\"keccak256\":\"0x1803a3433a78c509b20bd9477a2c60a71b2ce1ee7e17eb0ef0601618a8a72526\",\"license\":\"MIT\"},\"@kleros/erc-792/contracts/IArbitrator.sol\":{\"content\":\"/**\\n * @authors: [@ferittuncer, @hbarcelos]\\n * @reviewers: [@remedcu*]\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n * SPDX-License-Identifier: MIT\\n */\\n\\npragma solidity >=0.7;\\n\\nimport \\\"./IArbitrable.sol\\\";\\n\\n/**\\n * @title Arbitrator\\n * Arbitrator abstract contract.\\n * When developing arbitrator contracts we need to:\\n * - Define the functions for dispute creation (createDispute) and appeal (appeal). Don't forget to store the arbitrated contract and the disputeID (which should be unique, may nbDisputes).\\n * - Define the functions for cost display (arbitrationCost and appealCost).\\n * - Allow giving rulings. For this a function must call arbitrable.rule(disputeID, ruling).\\n */\\ninterface IArbitrator {\\n    enum DisputeStatus {Waiting, Appealable, Solved}\\n\\n    /**\\n     * @dev To be emitted when a dispute is created.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event DisputeCreation(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev To be emitted when a dispute can be appealed.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event AppealPossible(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev To be emitted when the current ruling is appealed.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event AppealDecision(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev Create a dispute. Must be called by the arbitrable contract.\\n     * Must be paid at least arbitrationCost(_extraData).\\n     * @param _choices Amount of choices the arbitrator can make in this dispute.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return disputeID ID of the dispute created.\\n     */\\n    function createDispute(uint256 _choices, bytes calldata _extraData) external payable returns (uint256 disputeID);\\n\\n    /**\\n     * @dev Compute the cost of arbitration. It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return cost Amount to be paid.\\n     */\\n    function arbitrationCost(bytes calldata _extraData) external view returns (uint256 cost);\\n\\n    /**\\n     * @dev Appeal a ruling. Note that it has to be called before the arbitrator contract calls rule.\\n     * @param _disputeID ID of the dispute to be appealed.\\n     * @param _extraData Can be used to give extra info on the appeal.\\n     */\\n    function appeal(uint256 _disputeID, bytes calldata _extraData) external payable;\\n\\n    /**\\n     * @dev Compute the cost of appeal. It is recommended not to increase it often, as it can be higly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n     * @param _disputeID ID of the dispute to be appealed.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return cost Amount to be paid.\\n     */\\n    function appealCost(uint256 _disputeID, bytes calldata _extraData) external view returns (uint256 cost);\\n\\n    /**\\n     * @dev Compute the start and end of the dispute's current or next appeal period, if possible. If not known or appeal is impossible: should return (0, 0).\\n     * @param _disputeID ID of the dispute.\\n     * @return start The start of the period.\\n     * @return end The end of the period.\\n     */\\n    function appealPeriod(uint256 _disputeID) external view returns (uint256 start, uint256 end);\\n\\n    /**\\n     * @dev Return the status of a dispute.\\n     * @param _disputeID ID of the dispute to rule.\\n     * @return status The status of the dispute.\\n     */\\n    function disputeStatus(uint256 _disputeID) external view returns (DisputeStatus status);\\n\\n    /**\\n     * @dev Return the current ruling of a dispute. This is useful for parties to know if they should appeal.\\n     * @param _disputeID ID of the dispute.\\n     * @return ruling The ruling which has been given or the one which will be given if there is no appeal.\\n     */\\n    function currentRuling(uint256 _disputeID) external view returns (uint256 ruling);\\n}\\n\",\"keccak256\":\"0x240a4142f9ec379da0333dfc82409b7b058cff9ea118368eb5e8f15447996c1e\",\"license\":\"MIT\"},\"@kleros/erc-792/contracts/erc-1497/IEvidence.sol\":{\"content\":\"/**\\n * @authors: [@ferittuncer, @hbarcelos]\\n * @reviewers: []\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n * SPDX-License-Identifier: MIT\\n */\\npragma solidity >=0.7;\\n\\nimport \\\"../IArbitrator.sol\\\";\\n\\n/** @title IEvidence\\n *  ERC-1497: Evidence Standard\\n */\\ninterface IEvidence {\\n    /**\\n     * @dev To be emitted when meta-evidence is submitted.\\n     * @param _metaEvidenceID Unique identifier of meta-evidence.\\n     * @param _evidence A link to the meta-evidence JSON.\\n     */\\n    event MetaEvidence(uint256 indexed _metaEvidenceID, string _evidence);\\n\\n    /**\\n     * @dev To be raised when evidence is submitted. Should point to the resource (evidences are not to be stored on chain due to gas considerations).\\n     * @param _arbitrator The arbitrator of the contract.\\n     * @param _evidenceGroupID Unique identifier of the evidence group the evidence belongs to.\\n     * @param _party The address of the party submiting the evidence. Note that 0x0 refers to evidence not submitted by any party.\\n     * @param _evidence A URI to the evidence JSON file whose name should be its keccak256 hash followed by .json.\\n     */\\n    event Evidence(\\n        IArbitrator indexed _arbitrator,\\n        uint256 indexed _evidenceGroupID,\\n        address indexed _party,\\n        string _evidence\\n    );\\n\\n    /**\\n     * @dev To be emitted when a dispute is created to link the correct meta-evidence to the disputeID.\\n     * @param _arbitrator The arbitrator of the contract.\\n     * @param _disputeID ID of the dispute in the Arbitrator contract.\\n     * @param _metaEvidenceID Unique identifier of meta-evidence.\\n     * @param _evidenceGroupID Unique identifier of the evidence group that is linked to this dispute.\\n     */\\n    event Dispute(\\n        IArbitrator indexed _arbitrator,\\n        uint256 indexed _disputeID,\\n        uint256 _metaEvidenceID,\\n        uint256 _evidenceGroupID\\n    );\\n}\\n\",\"keccak256\":\"0x1ccedf5213730632540c748486637d7b1977ee73375818bf498a8276ca49dd13\",\"license\":\"MIT\"},\"@kleros/ethereum-libraries/contracts/CappedMath.sol\":{\"content\":\"/**\\n * @authors: [@mtsalenc, @hbarcelos]\\n * @reviewers: [@clesaege*]\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n * SPDX-License-Identifier: MIT\\n */\\n\\npragma solidity >=0.7;\\n\\n\\n/**\\n * @title CappedMath\\n * @dev Math operations with caps for under and overflow.\\n */\\nlibrary CappedMath {\\n    uint constant private UINT_MAX = 2**256 - 1;\\n\\n    /**\\n     * @dev Adds two unsigned integers, returns 2^256 - 1 on overflow.\\n     */\\n    function addCap(uint _a, uint _b) internal pure returns (uint) {\\n        uint c = _a + _b;\\n        return c >= _a ? c : UINT_MAX;\\n    }\\n\\n    /**\\n     * @dev Subtracts two integers, returns 0 on underflow.\\n     */\\n    function subCap(uint _a, uint _b) internal pure returns (uint) {\\n        if (_b > _a)\\n            return 0;\\n        else\\n            return _a - _b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two unsigned integers, returns 2^256 - 1 on overflow.\\n     */\\n    function mulCap(uint _a, uint _b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring '_a' not being zero, but the\\n        // benefit is lost if '_b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0)\\n            return 0;\\n\\n        uint c = _a * _b;\\n        return c / _a == _b ? c : UINT_MAX;\\n    }\\n}\\n\",\"keccak256\":\"0x5dd32b4108aa98da968c5d59a3b23cdf64b8ecbc0d4982d2771e899378f99b1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xaeb6a782d9ae2dd3b4070369ffb74c7503e17b00f478bf184a8db2ab9654a527\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\",\"license\":\"MIT\"},\"contracts/0.7.x/LinguoToken.sol\":{\"content\":\"/**\\n * @authors: [@unknownunknown1, @hbarcelos]\\n * @reviewers: []\\n * @auditors: []\\n * @bounties: []\\n * @deployments: []\\n *\\n * SPDX-License-Identifier: MIT\\n */\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@kleros/erc-792/contracts/IArbitrable.sol\\\";\\nimport \\\"@kleros/erc-792/contracts/IArbitrator.sol\\\";\\nimport \\\"@kleros/erc-792/contracts/erc-1497/IEvidence.sol\\\";\\nimport \\\"@kleros/ethereum-libraries/contracts/CappedMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair {\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 _reserve0,\\n            uint112 _reserve1,\\n            uint32 _blockTimestampLast\\n        );\\n}\\n\\n/** @title LinguoToken\\n *  Linguo is a decentralized platform where anyone can submit a document for translation and have it translated by freelancers.\\n *  It has no platform fees and disputes about translation quality are handled by Kleros jurors.\\n *  This version of the contract is made for ERC-20 tokens support.\\n *  NOTE: This contract trusts that the Arbitrator is honest and will not reenter or modify its costs during a call.\\n *  The arbitrator must support appeal period.\\n *  Also note that this contract trusts that the tokens will not allow the recipients to block the transfers.\\n */\\ncontract LinguoToken is IArbitrable, IEvidence {\\n    using CappedMath for uint256;\\n\\n    /* *** Contract variables *** */\\n    uint8 public constant VERSION_ID = 128; // Value that represents the version of the contract. The value is incremented each time the new version is deployed. Range for LinguoToken: 128-255, LinguoETH: 0-127.\\n    uint256 public constant MULTIPLIER_DIVISOR = 10000; // Divisor parameter for multipliers.\\n    uint256 constant NOT_PAYABLE_VALUE = (2**256 - 2) / 2; // A value depositor won't be able to pay.\\n\\n    enum Status {Created, Assigned, AwaitingReview, DisputeCreated, Resolved}\\n\\n    enum Party {\\n        None, // Party that is mapped with 0 dispute ruling.\\n        Translator, // The one performing translation task.\\n        Challenger // The one challenging translated text in the review period.\\n    }\\n\\n    // Arrays of 3 elements in the Task and Round structs map to the parties. Index \\\"0\\\" is not used, \\\"1\\\" is used for translator and \\\"2\\\" for challenger.\\n    struct Task {\\n        ERC20 token; // Token that will be paid for the completion of the task.\\n        uint256 submissionTimeout; // Time in seconds allotted for submitting a translation. The end of this period is considered a deadline.\\n        uint256 minPrice; // Minimal price for the translation. When the task is created it has minimal price that gradually increases such as it reaches maximal price at deadline.\\n        uint256 maxPrice; // Maximal price for the translation and also value that must be deposited by the requester.\\n        Status status; // Status of the task.\\n        uint256 lastInteraction; // The time of the last action performed on the task. Note that lastInteraction is updated only during timeout-related actions such as the creation of the task and the submission of the translation.\\n        address payable requester; // The party requesting the translation.\\n        uint256 requesterDeposit; // The deposit requester makes when creating the task. Once a task is assigned this deposit will be partially reimbursed and its value will be replaced by task price.\\n        uint256 sumDeposit; // The sum of the deposits of translator and challenger, if any. This value (minus arbitration fees) will be paid to the party that wins the dispute.\\n        address payable[3] parties; // Translator and challenger of the task.\\n        uint256 disputeID; // The ID of the dispute created in arbitrator contract.\\n        Round[] rounds; // Tracks each appeal round of a dispute.\\n        uint256 ruling; // Ruling given to the dispute of the task by the arbitrator.\\n    }\\n\\n    // Rounds are only used in appeal funding.\\n    struct Round {\\n        uint256[3] paidFees; // Tracks the fees paid by each side in this round.\\n        bool[3] hasPaid; // True when the side has fully paid its fee. False otherwise.\\n        uint256 feeRewards; // Sum of reimbursable fees and stake rewards available to the parties that made contributions to the side that ultimately wins a dispute.\\n        mapping(address => uint256[3]) contributions; // Maps contributors to their contributions for each side.\\n    }\\n\\n    ERC20 public WETH; // Address of the wETH token contract. It's required for token -> ETH conversion.\\n    address public uniswapFactory; // Address of the UniswapPair factory. It's required for token -> ETH conversion.\\n\\n    address public governor = msg.sender; // The governor of the contract.\\n    IArbitrator public arbitrator; // The address of the ERC-792 Arbitrator.\\n    bytes public arbitratorExtraData; // Extra data to allow creting a dispute on the arbitrator.\\n    uint256 public reviewTimeout; // Time in seconds, during which the submitted translation can be challenged.\\n    uint256 public translationMultiplier; // Multiplier for calculating the value of the deposit translator must pay to self-assign a task.\\n\\n    // All multipliers below are in basis points.\\n    uint256 public sharedStakeMultiplier; // Multiplier for calculating the appeal fee that must be paid by submitter in the case where there is no winner or loser (e.g. when the arbitrator ruled \\\"refuse to arbitrate\\\").\\n    uint256 public winnerStakeMultiplier; // Multiplier for calculating the appeal fee of the party that won the previous round.\\n    uint256 public loserStakeMultiplier; // Multiplier for calculating the appeal fee of the party that lost the previous round.\\n\\n    Task[] public tasks; // Stores all created tasks.\\n\\n    mapping(uint256 => uint256) public disputeIDtoTaskID; // Maps a disputeID to its respective task.\\n\\n    /* *** Events *** */\\n\\n    /** @dev To be emitted when the new task is created.\\n     *  @param _taskID The ID of the newly created task.\\n     *  @param _requester The address that created the task.\\n     *  @param _token The token that task uses.\\n     *  @param _timestamp When the task was created.\\n     */\\n    event TaskCreated(uint256 indexed _taskID, address indexed _requester, ERC20 _token, uint256 _timestamp);\\n\\n    /** @dev To be emitted when a translator assigns the task to himself.\\n     *  @param _taskID The ID of the assigned task.\\n     *  @param _translator The address that was assigned to the task.\\n     *  @param _price The task price at the moment it was assigned.\\n     *  @param _timestamp When the task was assigned.\\n     */\\n    event TaskAssigned(uint256 indexed _taskID, address indexed _translator, uint256 _price, uint256 _timestamp);\\n\\n    /** @dev To be emitted when a translation is submitted.\\n     *  @param _taskID The ID of the respective task.\\n     *  @param _translator The address that performed the translation.\\n     *  @param _translatedText A URI to the translated text.\\n     *  @param _timestamp When the translation was submitted.\\n     */\\n    event TranslationSubmitted(\\n        uint256 indexed _taskID,\\n        address indexed _translator,\\n        string _translatedText,\\n        uint256 _timestamp\\n    );\\n\\n    /** @dev To be emitted when a translation is challenged.\\n     *  @param _taskID The ID of the respective task.\\n     *  @param _challenger The address of the challenger.\\n     *  @param _timestamp When the task was challenged.\\n     */\\n    event TranslationChallenged(uint256 indexed _taskID, address indexed _challenger, uint256 _timestamp);\\n\\n    /** @dev To be emitted when a task is resolved, either by the translation being accepted, the requester being reimbursed or a dispute being settled.\\n     *  @param _taskID The ID of the respective task.\\n     *  @param _reason Short description of what caused the task to be solved. One of: 'translation-accepted' | 'requester-reimbursed' | 'dispute-settled'\\n     *  @param _timestamp When the task was resolved.\\n     */\\n    event TaskResolved(uint256 indexed _taskID, string _reason, uint256 _timestamp);\\n\\n    /** @dev To be emitted when someone contributes to the appeal process.\\n     *  @param _taskID The ID of the respective task.\\n     *  @param _party The party which received the contribution.\\n     *  @param _contributor The address of the contributor.\\n     *  @param _amount The amount contributed.\\n     */\\n    event AppealContribution(uint256 indexed _taskID, Party _party, address _contributor, uint256 _amount);\\n\\n    /** @dev To be emitted when the appeal fees of one of the parties are fully funded.\\n     *  @param _taskID The ID of the respective task.\\n     *  @param _party The party that is fully funded.\\n     */\\n    event HasPaidAppealFee(uint256 indexed _taskID, Party _party);\\n\\n    /* *** Modifiers *** */\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor, \\\"Only governor is allowed to perform this.\\\");\\n        _;\\n    }\\n\\n    /** @dev Constructor.\\n     *  @param _arbitrator The arbitrator of the contract.\\n     *  @param _arbitratorExtraData Extra data for the arbitrator.\\n     *  @param _WETH Address of the WETH token contract.\\n     *  @param _uniswapFactory Address of the UniswapPair factory contract.\\n     *  @param _reviewTimeout Time in seconds during which a translation can be challenged.\\n     *  @param _translationMultiplier Multiplier for calculating translator's deposit. In basis points.\\n     *  @param _sharedStakeMultiplier Multiplier of the appeal cost that submitter must pay for a round when there is no winner/loser in the previous round. In basis points.\\n     *  @param _winnerStakeMultiplier Multiplier of the appeal cost that the winner has to pay for a round. In basis points.\\n     *  @param _loserStakeMultiplier Multiplier of the appeal cost that the loser has to pay for a round. In basis points.\\n     */\\n    constructor(\\n        IArbitrator _arbitrator,\\n        bytes memory _arbitratorExtraData,\\n        ERC20 _WETH,\\n        address _uniswapFactory,\\n        uint256 _reviewTimeout,\\n        uint256 _translationMultiplier,\\n        uint256 _sharedStakeMultiplier,\\n        uint256 _winnerStakeMultiplier,\\n        uint256 _loserStakeMultiplier\\n    ) {\\n        arbitrator = _arbitrator;\\n        arbitratorExtraData = _arbitratorExtraData;\\n        WETH = _WETH;\\n        uniswapFactory = _uniswapFactory;\\n        reviewTimeout = _reviewTimeout;\\n        translationMultiplier = _translationMultiplier;\\n        sharedStakeMultiplier = _sharedStakeMultiplier;\\n        winnerStakeMultiplier = _winnerStakeMultiplier;\\n        loserStakeMultiplier = _loserStakeMultiplier;\\n    }\\n\\n    // ******************** //\\n    // *    Governance    * //\\n    // ******************** //\\n\\n    /** @dev Changes the governor of this contract.\\n     *  @param _governor A new governor.\\n     */\\n    function changeGovernor(address _governor) public onlyGovernor {\\n        governor = _governor;\\n    }\\n\\n    /** @dev Changes the time allocated for review phase.\\n     *  @param _reviewTimeout A new value of the time allotted for reviewing a translation. In seconds.\\n     */\\n    function changeReviewTimeout(uint256 _reviewTimeout) public onlyGovernor {\\n        reviewTimeout = _reviewTimeout;\\n    }\\n\\n    /** @dev Changes the multiplier for translator's deposit.\\n     *  @param _translationMultiplier A new value of the multiplier for calculating translator's deposit. In basis points.\\n     */\\n    function changeTranslationMultiplier(uint256 _translationMultiplier) public onlyGovernor {\\n        translationMultiplier = _translationMultiplier;\\n    }\\n\\n    /** @dev Changes the percentage of arbitration fees that must be paid by parties as a fee stake if there was no winner and loser in the previous round.\\n     *  @param _sharedStakeMultiplier A new value of the multiplier of the appeal cost in case when there is no winner/loser in previous round. In basis point.\\n     */\\n    function changeSharedStakeMultiplier(uint256 _sharedStakeMultiplier) public onlyGovernor {\\n        sharedStakeMultiplier = _sharedStakeMultiplier;\\n    }\\n\\n    /** @dev Changes the percentage of arbitration fees that must be paid as a fee stake by the party that won the previous round.\\n     *  @param _winnerStakeMultiplier A new value of the multiplier of the appeal cost that the winner of the previous round has to pay. In basis points.\\n     */\\n    function changeWinnerStakeMultiplier(uint256 _winnerStakeMultiplier) public onlyGovernor {\\n        winnerStakeMultiplier = _winnerStakeMultiplier;\\n    }\\n\\n    /** @dev Changes the percentage of arbitration fees that must be paid as a fee stake by the party that lost the previous round.\\n     *  @param _loserStakeMultiplier A new value of the multiplier of the appeal cost that the party that lost the previous round has to pay. In basis points.\\n     */\\n    function changeLoserStakeMultiplier(uint256 _loserStakeMultiplier) public onlyGovernor {\\n        loserStakeMultiplier = _loserStakeMultiplier;\\n    }\\n\\n    // **************************** //\\n    // *    Modifying the state   * //\\n    // **************************** //\\n\\n    /** @dev Creates a task based on provided details. Requires a value of maximal price to be deposited.\\n     *  @param _deadline The deadline for the translation to be completed.\\n     *  @param _token The token that will be paid for the completion of the task.\\n     *  @param _minPrice A minimal price of the translation.\\n     *  @param _maxPrice A maximal price of the translation. This value should be deposited by the requester.\\n     *  @param _metaEvidence A URI of meta-evidence object for task submission.\\n     *  @return taskID The ID of the created task.\\n     */\\n    function createTask(\\n        uint256 _deadline,\\n        ERC20 _token,\\n        uint256 _minPrice,\\n        uint256 _maxPrice,\\n        string calldata _metaEvidence\\n    ) external returns (uint256 taskID) {\\n        require(_minPrice <= _maxPrice, \\\"The minimal price should be less than or equal to max price.\\\");\\n        require(\\n            _token.transferFrom(msg.sender, address(this), _maxPrice),\\n            \\\"Requester does not have enough tokens to cover the max price.\\\"\\n        );\\n        require(_deadline > block.timestamp, \\\"The deadline should be in the future.\\\");\\n\\n        taskID = tasks.length;\\n\\n        Task storage task = tasks.push();\\n        task.token = _token;\\n        task.submissionTimeout = _deadline - block.timestamp;\\n        task.minPrice = _minPrice;\\n        task.maxPrice = _maxPrice;\\n        task.lastInteraction = block.timestamp;\\n        task.requester = msg.sender;\\n        task.requesterDeposit = _maxPrice;\\n\\n        emit MetaEvidence(taskID, _metaEvidence);\\n        emit TaskCreated(taskID, msg.sender, task.token, block.timestamp);\\n    }\\n\\n    /** @dev Assigns a specific task to the sender. Requires a translator's deposit in wei.\\n     *  @param _taskID The ID of the task.\\n     */\\n    function assignTask(uint256 _taskID) external payable {\\n        Task storage task = tasks[_taskID];\\n        require(block.timestamp - task.lastInteraction <= task.submissionTimeout, \\\"The deadline has already passed.\\\");\\n\\n        uint256 price = task.minPrice +\\n            ((task.maxPrice - task.minPrice) * (block.timestamp - task.lastInteraction)) /\\n            task.submissionTimeout;\\n\\n        uint256 priceETH = getTaskPriceInETH(_taskID);\\n        uint256 arbitrationCost = arbitrator.arbitrationCost(arbitratorExtraData);\\n        uint256 translatorDeposit = arbitrationCost.addCap(\\n            (translationMultiplier.mulCap(priceETH)) / MULTIPLIER_DIVISOR\\n        );\\n\\n        require(task.status == Status.Created, \\\"Task has already been assigned or reimbursed.\\\");\\n        require(msg.value >= translatorDeposit, \\\"Not enough ETH to reach the required deposit value.\\\");\\n\\n        task.parties[uint256(Party.Translator)] = msg.sender;\\n        task.status = Status.Assigned;\\n\\n        // Update requester's deposit since we reimbursed him the difference between maximal and actual price.\\n        task.requesterDeposit = price;\\n        task.sumDeposit = translatorDeposit;\\n\\n        uint256 remainder = msg.value - translatorDeposit;\\n        msg.sender.send(remainder);\\n\\n        remainder = task.maxPrice.subCap(price);\\n        require(task.token.transfer(task.requester, remainder), \\\"Could not transfer tokens to the requester.\\\");\\n        emit TaskAssigned(_taskID, msg.sender, price, block.timestamp);\\n    }\\n\\n    /** @dev Submits translated text for a specific task.\\n     *  @param _taskID The ID of the task.\\n     *  @param _translation A URI to the translated text.\\n     */\\n    function submitTranslation(uint256 _taskID, string calldata _translation) external {\\n        Task storage task = tasks[_taskID];\\n        require(\\n            task.status == Status.Assigned,\\n            \\\"The task is either not assigned or translation has already been submitted.\\\"\\n        );\\n        require(block.timestamp - task.lastInteraction <= task.submissionTimeout, \\\"The deadline has already passed.\\\");\\n        require(\\n            msg.sender == task.parties[uint256(Party.Translator)],\\n            \\\"Can't submit translation to the task that wasn't assigned to you.\\\"\\n        );\\n        task.status = Status.AwaitingReview;\\n        task.lastInteraction = block.timestamp;\\n\\n        emit TranslationSubmitted(_taskID, msg.sender, _translation, block.timestamp);\\n    }\\n\\n    /** @dev Reimburses the requester if no one picked the task or the translator failed to submit the translation before deadline.\\n     *  @param _taskID The ID of the task.\\n     */\\n    function reimburseRequester(uint256 _taskID) external {\\n        Task storage task = tasks[_taskID];\\n        require(task.status < Status.AwaitingReview, \\\"Can't reimburse if translation was submitted.\\\");\\n        require(\\n            block.timestamp - task.lastInteraction > task.submissionTimeout,\\n            \\\"Can't reimburse if the deadline hasn't passed yet.\\\"\\n        );\\n        task.status = Status.Resolved;\\n        uint256 requesterDeposit = task.requesterDeposit;\\n        uint256 sumDeposit = task.sumDeposit;\\n        task.requesterDeposit = 0;\\n        task.sumDeposit = 0;\\n        // Requester gets his deposit back and also the deposit of the translator, if there was one.\\n        task.requester.send(sumDeposit);\\n        require(task.token.transfer(task.requester, requesterDeposit), \\\"The token transfer was unsuccessful.\\\");\\n\\n        emit TaskResolved(_taskID, \\\"requester-reimbursed\\\", block.timestamp);\\n    }\\n\\n    /** @dev Pays the translator for completed task if no one challenged the translation during review period.\\n     *  @param _taskID The ID of the task.\\n     */\\n    function acceptTranslation(uint256 _taskID) external {\\n        Task storage task = tasks[_taskID];\\n        require(task.status == Status.AwaitingReview, \\\"The task is in the wrong status.\\\");\\n        require(block.timestamp - task.lastInteraction > reviewTimeout, \\\"The review phase hasn't passed yet.\\\");\\n        task.status = Status.Resolved;\\n        // Translator gets the price of the task and his deposit back.\\n        address payable translator = task.parties[uint256(Party.Translator)];\\n        uint256 requesterDeposit = task.requesterDeposit;\\n        uint256 sumDeposit = task.sumDeposit;\\n        task.requesterDeposit = 0;\\n        task.sumDeposit = 0;\\n        translator.send(sumDeposit);\\n        require(task.token.transfer(translator, requesterDeposit), \\\"The token transfer was unsuccessful.\\\");\\n\\n        emit TaskResolved(_taskID, \\\"translation-accepted\\\", block.timestamp);\\n    }\\n\\n    /** @dev Challenges the translation of a specific task. Requires challenger's deposit in wei.\\n     *  @param _taskID The ID of the task.\\n     *  @param _evidence A link to evidence using its URI. Ignored if not provided.\\n     */\\n    function challengeTranslation(uint256 _taskID, string calldata _evidence) external payable {\\n        Task storage task = tasks[_taskID];\\n\\n        // The challenger should only deposit the value of arbitration cost.\\n        uint256 arbitrationCost = arbitrator.arbitrationCost(arbitratorExtraData);\\n\\n        require(task.status == Status.AwaitingReview, \\\"The task is in the wrong status.\\\");\\n        require(block.timestamp - task.lastInteraction <= reviewTimeout, \\\"The review phase has already passed.\\\");\\n        require(msg.value >= arbitrationCost, \\\"Not enough ETH to cover challenge deposit.\\\");\\n\\n        task.status = Status.DisputeCreated;\\n        task.parties[uint256(Party.Challenger)] = msg.sender;\\n\\n        task.disputeID = arbitrator.createDispute{value: arbitrationCost}(2, arbitratorExtraData);\\n        disputeIDtoTaskID[task.disputeID] = _taskID;\\n        task.rounds.push();\\n        // We don't change sumDeposit because adding challenger's deposit while subtracting arbitration fee will give 0 as a result.\\n\\n        uint256 remainder = msg.value - arbitrationCost;\\n        msg.sender.send(remainder);\\n\\n        emit Dispute(arbitrator, task.disputeID, _taskID, _taskID);\\n        emit TranslationChallenged(_taskID, msg.sender, block.timestamp);\\n\\n        if (bytes(_evidence).length > 0) emit Evidence(arbitrator, _taskID, msg.sender, _evidence);\\n    }\\n\\n    /** @dev Takes up to the total amount required to fund a side of an appeal. Reimburses the rest. Creates an appeal if all sides are fully funded.\\n     *  @param _taskID The ID of challenged task.\\n     *  @param _side The party that pays the appeal fee.\\n     */\\n    function fundAppeal(uint256 _taskID, Party _side) external payable {\\n        Task storage task = tasks[_taskID];\\n        require(\\n            _side == Party.Translator || _side == Party.Challenger,\\n            \\\"Recipient must be either the translator or challenger.\\\"\\n        );\\n        require(task.status == Status.DisputeCreated, \\\"No dispute to appeal\\\");\\n        require(\\n            arbitrator.disputeStatus(task.disputeID) == IArbitrator.DisputeStatus.Appealable,\\n            \\\"Dispute is not appealable.\\\"\\n        );\\n\\n        (uint256 appealPeriodStart, uint256 appealPeriodEnd) = arbitrator.appealPeriod(task.disputeID);\\n        require(block.timestamp >= appealPeriodStart && block.timestamp < appealPeriodEnd, \\\"Funding must be made within the appeal period.\\\");\\n\\n        uint256 winner = arbitrator.currentRuling(task.disputeID);\\n        uint256 multiplier;\\n        if (winner == uint256(_side)) {\\n            multiplier = winnerStakeMultiplier;\\n        } else if (winner == 0) {\\n            multiplier = sharedStakeMultiplier;\\n        } else {\\n            require(\\n                block.timestamp - appealPeriodStart < (appealPeriodEnd - appealPeriodStart) / 2,\\n                \\\"The loser must pay during the first half of the appeal period.\\\"\\n            );\\n            multiplier = loserStakeMultiplier;\\n        }\\n\\n        Round storage round = task.rounds[task.rounds.length - 1];\\n        require(!round.hasPaid[uint256(_side)], \\\"Appeal fee has already been paid.\\\");\\n\\n        uint256 appealCost = arbitrator.appealCost(task.disputeID, arbitratorExtraData);\\n        uint256 totalCost = appealCost.addCap((appealCost.mulCap(multiplier)) / MULTIPLIER_DIVISOR);\\n\\n        // Take up to the amount necessary to fund the current round at the current costs.\\n        uint256 contribution; // Amount contributed.\\n        uint256 remainingETH; // Remaining ETH to send back.\\n        (contribution, remainingETH) = calculateContribution(\\n            msg.value,\\n            totalCost.subCap(round.paidFees[uint256(_side)])\\n        );\\n        round.contributions[msg.sender][uint256(_side)] += contribution;\\n        round.paidFees[uint256(_side)] += contribution;\\n\\n        emit AppealContribution(_taskID, _side, msg.sender, contribution);\\n\\n        // Add contribution to reward when the fee funding is successful, otherwise it can be withdrawn later.\\n        if (round.paidFees[uint256(_side)] >= totalCost) {\\n            round.hasPaid[uint256(_side)] = true;\\n            round.feeRewards += round.paidFees[uint256(_side)];\\n            emit HasPaidAppealFee(_taskID, _side);\\n        }\\n\\n        // Reimburse leftover ETH.\\n        msg.sender.send(remainingETH); // Deliberate use of send in order to not block the contract in case of reverting fallback.\\n\\n        // Create an appeal if each side is funded.\\n        if (round.hasPaid[uint256(Party.Translator)] && round.hasPaid[uint256(Party.Challenger)]) {\\n            arbitrator.appeal{value: appealCost}(task.disputeID, arbitratorExtraData);\\n            task.rounds.push();\\n            round.feeRewards = round.feeRewards.subCap(appealCost);\\n        }\\n    }\\n\\n    /** @dev Returns the contribution value and remainder from available ETH and required amount.\\n     *  @param _available The amount of ETH available for the contribution.\\n     *  @param _requiredAmount The amount of ETH required for the contribution.\\n     *  @return taken The amount of ETH taken.\\n     *  @return remainder The amount of ETH left from the contribution.\\n     */\\n    function calculateContribution(uint256 _available, uint256 _requiredAmount)\\n        internal\\n        pure\\n        returns (uint256 taken, uint256 remainder)\\n    {\\n        if (_requiredAmount > _available) return (_available, 0); // Take whatever is available, return 0 as leftover ETH.\\n\\n        remainder = _available - _requiredAmount;\\n        return (_requiredAmount, remainder);\\n    }\\n\\n    /** @dev Witdraws contributions of appeal rounds. Reimburses contributions if no disputes were raised. If a dispute was raised, sends the fee stake rewards and reimbursements proportional to the contributions made to the winner of a dispute.\\n     *  @param _beneficiary The address that made contributions.\\n     *  @param _taskID The ID of the associated task.\\n     *  @param _round The round from which to withdraw.\\n     */\\n    function withdrawFeesAndRewards(\\n        address payable _beneficiary,\\n        uint256 _taskID,\\n        uint256 _round\\n    ) public {\\n        Task storage task = tasks[_taskID];\\n        Round storage round = task.rounds[_round];\\n        require(task.status == Status.Resolved, \\\"The task should be resolved.\\\");\\n        uint256 reward;\\n        if (!round.hasPaid[uint256(Party.Translator)] || !round.hasPaid[uint256(Party.Challenger)]) {\\n            // Allow to reimburse if funding was unsuccessful.\\n            reward =\\n                round.contributions[_beneficiary][uint256(Party.Translator)] +\\n                round.contributions[_beneficiary][uint256(Party.Challenger)];\\n            round.contributions[_beneficiary][uint256(Party.Translator)] = 0;\\n            round.contributions[_beneficiary][uint256(Party.Challenger)] = 0;\\n        } else if (task.ruling == uint256(Party.None)) {\\n            // Reimburse unspent fees proportionally if there is no winner and loser.\\n            uint256 rewardTranslator = round.paidFees[uint256(Party.Translator)] > 0\\n                ? (round.contributions[_beneficiary][uint256(Party.Translator)] * round.feeRewards) /\\n                    (round.paidFees[uint256(Party.Translator)] + round.paidFees[uint256(Party.Challenger)])\\n                : 0;\\n            uint256 rewardChallenger = round.paidFees[uint256(Party.Challenger)] > 0\\n                ? (round.contributions[_beneficiary][uint256(Party.Challenger)] * round.feeRewards) /\\n                    (round.paidFees[uint256(Party.Translator)] + round.paidFees[uint256(Party.Challenger)])\\n                : 0;\\n\\n            reward = rewardTranslator + rewardChallenger;\\n            round.contributions[_beneficiary][uint256(Party.Translator)] = 0;\\n            round.contributions[_beneficiary][uint256(Party.Challenger)] = 0;\\n        } else {\\n            // Reward the winner.\\n            reward = round.paidFees[task.ruling] > 0\\n                ? (round.contributions[_beneficiary][task.ruling] * round.feeRewards) / round.paidFees[task.ruling]\\n                : 0;\\n            round.contributions[_beneficiary][task.ruling] = 0;\\n        }\\n\\n        _beneficiary.send(reward); // It is the user responsibility to accept ETH.\\n    }\\n\\n    /** @dev Withdraws contributions of multiple appeal rounds at once. This function is O(n) where n is the number of rounds. This could exceed the gas limit, therefore this function should be used only as a utility and not be relied upon by other contracts.\\n     *  @param _beneficiary The address that made contributions.\\n     *  @param _taskID The ID of the associated task.\\n     *  @param _cursor The round from where to start withdrawing.\\n     *  @param _count The number of rounds to iterate. If set to 0 or a value larger than the number of rounds, iterates until the last round.\\n     */\\n    function batchRoundWithdraw(\\n        address payable _beneficiary,\\n        uint256 _taskID,\\n        uint256 _cursor,\\n        uint256 _count\\n    ) public {\\n        Task storage task = tasks[_taskID];\\n        for (uint256 i = _cursor; i < task.rounds.length && (_count == 0 || i < _cursor + _count); i++)\\n            withdrawFeesAndRewards(_beneficiary, _taskID, i);\\n    }\\n\\n    /** @dev Gives a ruling for a dispute. Can only be called by the arbitrator.\\n     *  The purpose of this function is to ensure that the address calling it has the right to rule on the contract and to invert the ruling in the case a party loses from lack of appeal fees funding.\\n     *  @param _disputeID ID of the dispute in the Arbitrator contract.\\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \\\"Refuse to arbitrate\\\".\\n     */\\n    function rule(uint256 _disputeID, uint256 _ruling) external override {\\n        Party resultRuling = Party(_ruling);\\n        uint256 taskID = disputeIDtoTaskID[_disputeID];\\n        Task storage task = tasks[taskID];\\n        Round storage round = task.rounds[task.rounds.length - 1];\\n        require(msg.sender == address(arbitrator), \\\"Must be called by the arbitrator.\\\");\\n        require(task.status == Status.DisputeCreated, \\\"The dispute has already been resolved.\\\");\\n\\n        // If only one side paid its fees we assume the ruling to be in its favor.\\n        if (round.hasPaid[uint256(Party.Translator)] == true) resultRuling = Party.Translator;\\n        else if (round.hasPaid[uint256(Party.Challenger)] == true) resultRuling = Party.Challenger;\\n\\n        emit Ruling(IArbitrator(msg.sender), _disputeID, uint256(resultRuling));\\n        executeRuling(_disputeID, uint256(resultRuling));\\n    }\\n\\n    /** @dev Executes a ruling of a dispute.\\n     *  @param _disputeID ID of the dispute in the Arbitrator contract.\\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \\\"Refuse to arbitrate\\\".\\n     */\\n    function executeRuling(uint256 _disputeID, uint256 _ruling) internal {\\n        uint256 taskID = disputeIDtoTaskID[_disputeID];\\n        Task storage task = tasks[taskID];\\n        task.status = Status.Resolved;\\n        task.ruling = _ruling;\\n        uint256 sumDeposit = task.sumDeposit;\\n        uint256 requesterDeposit = task.requesterDeposit;\\n        task.requesterDeposit = 0;\\n        task.sumDeposit = 0;\\n\\n        if (_ruling == uint256(Party.None)) {\\n            // The value of sumDeposit is split among parties in this case. If it's uneven the value of 1 wei can be burnt.\\n            sumDeposit = sumDeposit / 2;\\n            task.parties[uint256(Party.Translator)].send(sumDeposit);\\n            task.parties[uint256(Party.Challenger)].send(sumDeposit);\\n            require(task.token.transfer(task.requester, requesterDeposit), \\\"Could not transfer tokens to requester.\\\");\\n        } else if (_ruling == uint256(Party.Translator)) {\\n            task.parties[uint256(Party.Translator)].send(sumDeposit);\\n            require(\\n                task.token.transfer(task.parties[uint256(Party.Translator)], requesterDeposit),\\n                \\\"Could not transfer tokens to translator.\\\"\\n            );\\n        } else {\\n            task.parties[uint256(Party.Challenger)].send(sumDeposit);\\n            require(task.token.transfer(task.requester, requesterDeposit), \\\"Could not transfer tokens to requester.\\\");\\n        }\\n\\n        emit TaskResolved(taskID, \\\"dispute-settled\\\", block.timestamp);\\n    }\\n\\n    /** @dev Submit a reference to evidence. EVENT.\\n     *  @param _taskID A task evidence is submitted for.\\n     *  @param _evidence A link to evidence using its URI.\\n     */\\n    function submitEvidence(uint256 _taskID, string calldata _evidence) external {\\n        Task storage task = tasks[_taskID];\\n        require(task.status != Status.Resolved, \\\"The task must not already be resolved.\\\");\\n        emit Evidence(arbitrator, _taskID, msg.sender, _evidence);\\n    }\\n\\n    // ******************** //\\n    // *      Getters     * //\\n    // ******************** //\\n\\n    /** @dev Returns the sum of withdrawable wei from appeal rounds. This function is O(n), where n is the number of rounds of the task. This could exceed the gas limit, therefore this function should only be used for interface display and not by other contracts.\\n     *  @param _taskID The ID of the associated task.\\n     *  @param _beneficiary The contributor for which to query.\\n     *  @return total The total amount of wei available to withdraw.\\n     */\\n    function amountWithdrawable(uint256 _taskID, address _beneficiary) external view returns (uint256 total) {\\n        Task storage task = tasks[_taskID];\\n        if (task.status != Status.Resolved) return total;\\n\\n        for (uint256 i = 0; i < task.rounds.length; i++) {\\n            Round storage round = task.rounds[i];\\n            if (!round.hasPaid[uint256(Party.Translator)] || !round.hasPaid[uint256(Party.Challenger)]) {\\n                total +=\\n                    round.contributions[_beneficiary][uint256(Party.Translator)] +\\n                    round.contributions[_beneficiary][uint256(Party.Challenger)];\\n            } else if (task.ruling == uint256(Party.None)) {\\n                uint256 rewardTranslator = round.paidFees[uint256(Party.Translator)] > 0\\n                    ? (round.contributions[_beneficiary][uint256(Party.Translator)] * round.feeRewards) /\\n                        (round.paidFees[uint256(Party.Translator)] + round.paidFees[uint256(Party.Challenger)])\\n                    : 0;\\n                uint256 rewardChallenger = round.paidFees[uint256(Party.Challenger)] > 0\\n                    ? (round.contributions[_beneficiary][uint256(Party.Challenger)] * round.feeRewards) /\\n                        (round.paidFees[uint256(Party.Translator)] + round.paidFees[uint256(Party.Challenger)])\\n                    : 0;\\n\\n                total += rewardTranslator + rewardChallenger;\\n            } else {\\n                total += round.paidFees[uint256(task.ruling)] > 0\\n                    ? (round.contributions[_beneficiary][uint256(task.ruling)] * round.feeRewards) /\\n                        round.paidFees[uint256(task.ruling)]\\n                    : 0;\\n            }\\n        }\\n\\n        return total;\\n    }\\n\\n    /** @dev Gets the deposit required for self-assigning the task.\\n     *  @param _taskID The ID of the task.\\n     *  @return deposit The translator's deposit.\\n     */\\n    function getDepositValue(uint256 _taskID) public view returns (uint256 deposit) {\\n        Task storage task = tasks[_taskID];\\n        if (block.timestamp - task.lastInteraction > task.submissionTimeout || task.status != Status.Created) {\\n            deposit = NOT_PAYABLE_VALUE;\\n        } else {\\n            uint256 priceETH = getTaskPriceInETH(_taskID);\\n\\n            uint256 arbitrationCost = arbitrator.arbitrationCost(arbitratorExtraData);\\n            deposit = arbitrationCost.addCap((translationMultiplier.mulCap(priceETH)) / MULTIPLIER_DIVISOR);\\n        }\\n    }\\n\\n    /** @dev Gets the deposit required for challenging the translation.\\n     *  @param _taskID The ID of the task.\\n     *  @return deposit The challengers's deposit.\\n     */\\n    function getChallengeValue(uint256 _taskID) public view returns (uint256 deposit) {\\n        Task storage task = tasks[_taskID];\\n        if (block.timestamp - task.lastInteraction > reviewTimeout || task.status != Status.AwaitingReview) {\\n            deposit = NOT_PAYABLE_VALUE;\\n        } else {\\n            deposit = arbitrator.arbitrationCost(arbitratorExtraData);\\n        }\\n    }\\n\\n    /** @dev Gets the current price of a specified task. Returns 0 if the task can no longer be assigned.\\n     *  @param _taskID The ID of the task.\\n     *  @return price The price of the task.\\n     */\\n    function getTaskPrice(uint256 _taskID) public view returns (uint256 price) {\\n        Task storage task = tasks[_taskID];\\n        if (block.timestamp - task.lastInteraction > task.submissionTimeout || task.status != Status.Created) {\\n            price = 0;\\n        } else {\\n            price =\\n                task.minPrice +\\n                ((task.maxPrice - task.minPrice) * (block.timestamp - task.lastInteraction)) /\\n                task.submissionTimeout;\\n        }\\n    }\\n\\n    /** @dev Gets the current price of a specified task in ETH. Returns 0 if the task can no longer be assigned.\\n     *  @param _taskID The ID of the task.\\n     *  @return priceETH The price of the task.\\n     */\\n    function getTaskPriceInETH(uint256 _taskID) public view returns (uint256 priceETH) {\\n        Task storage task = tasks[_taskID];\\n        uint256 tokenPrice = task.minPrice +\\n            ((task.maxPrice - task.minPrice) * (block.timestamp - task.lastInteraction)) /\\n            task.submissionTimeout;\\n        if (block.timestamp - task.lastInteraction > task.submissionTimeout || task.status != Status.Created) priceETH = 0;\\n        else if (task.token == WETH) priceETH = tokenPrice;\\n        else {\\n            (ERC20 token0, ERC20 token1) = task.token < WETH ? (task.token, WETH) : (WETH, task.token);\\n            IUniswapV2Pair pair = IUniswapV2Pair(\\n                address(\\n                    uint256(\\n                        keccak256(\\n                            abi.encodePacked(\\n                                hex\\\"ff\\\",\\n                                uniswapFactory,\\n                                keccak256(abi.encodePacked(token0, token1)),\\n                                hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\"\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n            (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n            (uint256 reserveA, uint256 reserveB) = token0 == task.token ? (reserve0, reserve1) : (reserve1, reserve0);\\n            require(reserveA > 0 && reserveB > 0, \\\"Could not calculate the price.\\\");\\n            priceETH = tokenPrice.mulCap(reserveB) / reserveA;\\n        }\\n    }\\n\\n    /** @dev Gets the total number of created tasks.\\n     *  @return The number of created tasks.\\n     */\\n    function getTaskCount() public view returns (uint256) {\\n        return tasks.length;\\n    }\\n\\n    /** @dev Gets the number of rounds of the specific task.\\n     *  @param _taskID The ID of the task.\\n     *  @return The number of rounds.\\n     */\\n    function getNumberOfRounds(uint256 _taskID) public view returns (uint256) {\\n        Task storage task = tasks[_taskID];\\n        return task.rounds.length;\\n    }\\n\\n    /** @dev Gets the contributions made by a party for a given round of task's appeal.\\n     *  @param _taskID The ID of the task.\\n     *  @param _round The position of the round.\\n     *  @param _contributor The address of the contributor.\\n     *  @return contributions The contributions.\\n     */\\n    function getContributions(\\n        uint256 _taskID,\\n        uint256 _round,\\n        address _contributor\\n    ) public view returns (uint256[3] memory contributions) {\\n        Task storage task = tasks[_taskID];\\n        Round storage round = task.rounds[_round];\\n        contributions = round.contributions[_contributor];\\n    }\\n\\n    /** @dev Gets the addresses of parties of a specified task.\\n     *  @param _taskID The ID of the task.\\n     *  @return parties The addresses of requester, translator and challenger.\\n     */\\n    function getTaskParties(uint256 _taskID) public view returns (address payable[3] memory parties) {\\n        Task storage task = tasks[_taskID];\\n        parties = task.parties;\\n    }\\n\\n    /** @dev Gets the information on a round of a task.\\n     *  @param _taskID The ID of the task.\\n     *  @param _round The round to be queried.\\n     *  @return paidFees The amount paid by each party in the round.\\n     *  @return hasPaid Whether or not a given party has paid the full fees for the round.\\n     *  @return feeRewards The amount available to pay for fees provide rewards to the winenr side.\\n     */\\n    function getRoundInfo(uint256 _taskID, uint256 _round)\\n        public\\n        view\\n        returns (\\n            uint256[3] memory paidFees,\\n            bool[3] memory hasPaid,\\n            uint256 feeRewards\\n        )\\n    {\\n        Task storage task = tasks[_taskID];\\n        Round storage round = task.rounds[_round];\\n        return (round.paidFees, round.hasPaid, round.feeRewards);\\n    }\\n}\\n\",\"keccak256\":\"0x7d0f09daffe5ada0cf2d6230947932609e84d84033c69fbe1b3a222333a71936\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600280546001600160a01b031916331790553480156200002357600080fd5b506040516200427e3803806200427e833981016040819052620000469162000183565b600380546001600160a01b0319166001600160a01b038b161790558751620000769060049060208b0190620000c5565b50600080546001600160a01b039889166001600160a01b031991821617909155600180549790981696169590951790955560059290925560065560075560089190915560095550620002cc9050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620000fd576000855562000148565b82601f106200011857805160ff191683800117855562000148565b8280016001018555821562000148579182015b82811115620001485782518255916020019190600101906200012b565b50620001569291506200015a565b5090565b5b808211156200015657600081556001016200015b565b80516200017e81620002b3565b919050565b60008060008060008060008060006101208a8c031215620001a2578485fd5b8951620001af81620002b3565b60208b810151919a50906001600160401b0380821115620001ce578788fd5b818d0191508d601f830112620001e2578788fd5b815181811115620001ef57fe5b604051601f8201601f19168101850183811182821017156200020d57fe5b80604052508181528f858386010111156200022657898afd5b8992505b818310156200024957838301850151818401860152918401916200022a565b818311156200025a57898583830101525b809c5050505050506200027060408b0162000171565b96506200028060608b0162000171565b955060808a0151945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b6001600160a01b0381168114620002c957600080fd5b50565b613fa280620002dc6000396000f3fe6080604052600436106102465760003560e01c8063881f7c5711610139578063adc7faba116100b6578063cc7b9d061161007a578063cc7b9d061461067d578063d2dbe1d81461069f578063d661dd31146106bf578063e4c0aaf4146106d4578063f0900d2f146106f4578063fc6f8f161461071457610246565b8063adc7faba14610600578063b857318514610620578063c17a340e14610633578063c36cd19614610648578063c4e690df1461066857610246565b806395c95522116100fd57806395c955221461055e578063a6a7f0eb1461058b578063a95c9805146105ab578063aba4ab74146105cb578063ad5c4648146105eb57610246565b8063881f7c57146104b05780638a9bb02a146104c35780638bdb2afa146104f25780638d9776721461050757806392239dff1461053e57610246565b8063311a6c56116101c757806368c76ffd1161018b57806368c76ffd146104195780636cc6cde1146104465780636e8218aa1461045b5780636e99a23a1461047b5780637b9433831461049b57610246565b8063311a6c561461038f578063339ac67c146103af5780633a2dabfa146103cf57806341658341146103e457806354954d82146103f957610246565b806312b3a2c01161020e57806312b3a2c01461030757806312ce35251461031a5780631972483a1461033a5780631d5120851461035a578063244772e81461036f57610246565b8063064ba1891461024b57806309e24ad4146102815780630c340a24146102a35780630c7ac7b6146102c55780631165542b146102e7575b600080fd5b34801561025757600080fd5b5061026b610266366004613095565b610734565b6040516102789190613f16565b60405180910390f35b34801561028d57600080fd5b506102a161029c366004613095565b610746565b005b3480156102af57600080fd5b506102b861077e565b60405161027891906133a5565b3480156102d157600080fd5b506102da61078d565b604051610278919061347d565b3480156102f357600080fd5b5061026b6103023660046130c5565b61081b565b6102a1610315366004613165565b610a2a565b34801561032657600080fd5b506102a1610335366004613095565b611080565b34801561034657600080fd5b5061026b610355366004613095565b6110af565b34801561036657600080fd5b5061026b611195565b34801561037b57600080fd5b5061026b61038a366004613095565b61119b565b34801561039b57600080fd5b506102a16103aa3660046131d3565b611222565b3480156103bb57600080fd5b506102a16103ca366004612fd1565b611387565b3480156103db57600080fd5b5061026b6113e0565b3480156103f057600080fd5b5061026b6113e6565b34801561040557600080fd5b5061026b610414366004613095565b6113ec565b34801561042557600080fd5b50610439610434366004613217565b61163d565b6040516102789190613427565b34801561045257600080fd5b506102b86116d9565b34801561046757600080fd5b5061026b610476366004613095565b6116e8565b34801561048757600080fd5b506102a1610496366004612f9d565b61180e565b3480156104a757600080fd5b5061026b611a8d565b6102a16104be366004613189565b611a93565b3480156104cf57600080fd5b506104e36104de3660046131d3565b611d8d565b60405161027893929190613435565b3480156104fe57600080fd5b506102b8611e88565b34801561051357600080fd5b50610527610522366004613095565b611e97565b6040516102789b9a999897969594939291906134ea565b34801561054a57600080fd5b506102a1610559366004613095565b611f11565b34801561056a57600080fd5b5061057e610579366004613095565b611f40565b60405161027891906133f6565b34801561059757600080fd5b506102a16105a6366004613189565b611fac565b3480156105b757600080fd5b506102a16105c6366004613095565b612052565b3480156105d757600080fd5b506102a16105e6366004613095565b612081565b3480156105f757600080fd5b506102b8612233565b34801561060c57600080fd5b506102a161061b366004613095565b612242565b6102a161062e366004613095565b612271565b34801561063f57600080fd5b5061026b61253f565b34801561065457600080fd5b506102a1610663366004613189565b612545565b34801561067457600080fd5b5061026b61264c565b34801561068957600080fd5b50610692612652565b6040516102789190613f2d565b3480156106ab57600080fd5b506102a16106ba366004613095565b612657565b3480156106cb57600080fd5b5061026b612804565b3480156106e057600080fd5b506102a16106ef366004612f81565b61280a565b34801561070057600080fd5b5061026b61070f3660046130f4565b612856565b34801561072057600080fd5b5061026b61072f366004613095565b612b04565b600b6020526000908152604090205481565b6002546001600160a01b031633146107795760405162461bcd60e51b815260040161077090613aa4565b60405180910390fd5b600555565b6002546001600160a01b031681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108135780601f106107e857610100808354040283529160200191610813565b820191906000526020600020905b8154815290600101906020018083116107f657829003601f168201915b505050505081565b600080600a848154811061082b57fe5b60009182526020909120600f9091020190506004808083015460ff169081111561085157fe5b1461085c5750610a24565b60005b600d820154811015610a2157600082600d01828154811061087c57fe5b60009182526020909120600360069092020190810154909150610100900460ff1615806108b45750600381015462010000900460ff16155b156108e9576001600160a01b038516600090815260058201602052604090206002810154600190910154019390930192610a18565b600e8301546109a357600080826001015411610906576000610942565b8160020154826001015460048401546001600160a01b03891660009081526005860160205260409020929091019160010154028161094057fe5b045b9050600080836002015411610958576000610994565b8260020154836001015460048501546001600160a01b038a1660009081526005870160205260409020929091019160020154028161099257fe5b045b91909101949094019350610a18565b60008160000184600e0154600381106109b857fe5b0154116109c6576000610a13565b600e8301548190600381106109d757fe5b015460048201546001600160a01b03871660009081526005840160205260409020600e86015460038110610a0757fe5b01540281610a1157fe5b045b840193505b5060010161085f565b50505b92915050565b6000600a8381548110610a3957fe5b60009182526020909120600f9091020190506001826002811115610a5957fe5b1480610a7057506002826002811115610a6e57fe5b145b610a8c5760405162461bcd60e51b815260040161077090613e27565b600360048083015460ff1690811115610aa157fe5b14610abe5760405162461bcd60e51b815260040161077090613b3f565b6001600354600c83015460405163021e2d3d60e31b81526001600160a01b03909216916310f169e891610af391600401613f16565b60206040518083038186803b158015610b0b57600080fd5b505afa158015610b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b43919061302b565b6002811115610b4e57fe5b14610b6b5760405162461bcd60e51b815260040161077090613ba3565b600354600c82015460405163afe15cfb60e01b815260009283926001600160a01b039091169163afe15cfb91610ba391600401613f16565b604080518083038186803b158015610bba57600080fd5b505afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf291906131f4565b91509150814210158015610c0557508042105b610c215760405162461bcd60e51b8152600401610770906135e0565b600354600c840154604051631c3db16d60e01b81526000926001600160a01b031691631c3db16d91610c569190600401613f16565b60206040518083038186803b158015610c6e57600080fd5b505afa158015610c82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca691906130ad565b90506000856002811115610cb657fe5b821415610cc65750600854610cff565b81610cd45750600754610cff565b60028484030484420310610cfa5760405162461bcd60e51b8152600401610770906137fb565b506009545b600d85018054600091906000198101908110610d1757fe5b9060005260206000209060060201905080600301876002811115610d3757fe5b60038110610d4157fe5b602081049091015460ff601f9092166101000a90041615610d745760405162461bcd60e51b815260040161077090613da1565b600354600c87015460405163791f8b7360e11b81526000926001600160a01b03169163f23f16e691610dab9190600490810161358f565b60206040518083038186803b158015610dc357600080fd5b505afa158015610dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfb91906130ad565b90506000610e1f612710610e0f8487612b31565b81610e1657fe5b84919004612b65565b9050600080610e5034610e4b878e6002811115610e3857fe5b60038110610e4257fe5b01548690612b7a565b612b95565b3360009081526005880160205260409020919350915082908c6002811115610e7457fe5b60038110610e7e57fe5b018054909101905581858c6002811115610e9457fe5b60038110610e9e57fe5b01805490910190556040518c907f22039e79a27860a038aece214124c8ecef12fdc1334feb8e8a157a0ae16a1db490610edc908e9033908790613567565b60405180910390a282858c6002811115610ef257fe5b60038110610efc57fe5b015410610fa0576001856003018c6002811115610f1557fe5b60038110610f1f57fe5b602091828204019190066101000a81548160ff021916908315150217905550846000018b6002811115610f4e57fe5b60038110610f5857fe5b015460048601805490910190556040518c907f213276d821d6205d87fa4f4658db4bf5a24a2323b0fdd8ffcd239c445f86a57b90610f97908e90613559565b60405180910390a25b604051339082156108fc029083906000818181858888f1505050506003860154610100900460ff1690508015610fe05750600385015462010000900460ff165b1561107257600354600c8b015460405163093225f160e31b81526001600160a01b03909216916349912f8891879161101d9190600490810161358f565b6000604051808303818588803b15801561103657600080fd5b505af115801561104a573d6000803e3d6000fd5b505050600d8c01805460010181556000525050600485015461106c9085612b7a565b60048601555b505050505050505050505050565b6002546001600160a01b031633146110aa5760405162461bcd60e51b815260040161077090613aa4565b600755565b600080600a83815481106110bf57fe5b90600052602060002090600f020190506005548160050154420311806110f85750600260048083015460ff16908111156110f557fe5b14155b1561110c576001600160ff1b03915061118f565b60035460405163f7434ea960e01b81526001600160a01b039091169063f7434ea99061113c9060049081016134d0565b60206040518083038186803b15801561115457600080fd5b505afa158015611168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118c91906130ad565b91505b50919050565b60095481565b600080600a83815481106111ab57fe5b90600052602060002090600f0201905080600101548160050154420311806111e65750600060048083015460ff16908111156111e357fe5b14155b156111f4576000915061118f565b8060010154816005015442038260020154836003015403028161121357fe5b04816002015401915050919050565b600081600281111561123057fe5b6000848152600b6020526040812054600a805493945090928390811061125257fe5b600091825260208220600d600f90920201908101805491935090600019810190811061127a57fe5b6000918252602090912060035460069092020191506001600160a01b031633146112b65760405162461bcd60e51b8152600401610770906137ba565b600360048084015460ff16908111156112cb57fe5b146112e85760405162461bcd60e51b815260040161077090613704565b600381015460ff610100909104161515600114156113095760019350611326565b600381015462010000900460ff1615156001141561132657600293505b85337f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e7562227686600281111561135557fe5b6040516113629190613f16565b60405180910390a361137f8685600281111561137a57fe5b612bba565b505050505050565b6000600a848154811061139657fe5b90600052602060002090600f0201905060008390505b600d820154811080156113c857508215806113c8575082840181105b1561137f576113d886868361180e565b6001016113ac565b60065481565b60075481565b600080600a83815481106113fc57fe5b90600052602060002090600f0201905060008160010154826005015442038360020154846003015403028161142d57fe5b04826002015401905081600101548260050154420311806114615750600060048084015460ff169081111561145e57fe5b14155b1561146f5760009250611636565b60005482546001600160a01b039081169116141561148f57809250611636565b60008054835482916001600160a01b039081169116106114c05760005484546001600160a01b0391821691166114d3565b83546000546001600160a01b0391821691165b6001546040519294509092506000916001600160a01b03909116906114fe9085908590602001613328565b6040516020818303038152906040528051906020012060405160200161152592919061334f565b6040516020818303038152906040528051906020012060001c9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561157c57600080fd5b505afa158015611590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b49190613047565b5088546001600160701b0392831694509116915060009081906001600160a01b038881169116146115e65782846115e9565b83835b915091506000821180156115fd5750600081115b6116195760405162461bcd60e51b8152600401610770906138bf565b816116248983612b31565b8161162b57fe5b049950505050505050505b5050919050565b611645612f0c565b6000600a858154811061165457fe5b90600052602060002090600f02019050600081600d01858154811061167557fe5b600091825260208083206001600160a01b03881684526005600690930201918201905260409182902082516060810190935290925060038282826020028201915b8154815260200190600101908083116116b6575050505050925050509392505050565b6003546001600160a01b031681565b600080600a83815481106116f857fe5b90600052602060002090600f0201905080600101548160050154420311806117335750600060048083015460ff169081111561173057fe5b14155b15611747576001600160ff1b03915061118f565b6000611752846113ec565b60035460405163f7434ea960e01b81529192506000916001600160a01b039091169063f7434ea9906117889060049081016134d0565b60206040518083038186803b1580156117a057600080fd5b505afa1580156117b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d891906130ad565b90506118056127106117f584600654612b3190919063ffffffff16565b816117fc57fe5b83919004612b65565b95945050505050565b6000600a838154811061181d57fe5b90600052602060002090600f02019050600081600d01838154811061183e57fe5b6000918252602090912060069091020190506004808084015460ff169081111561186457fe5b146118815760405162461bcd60e51b815260040161077090613c8c565b6003810154600090610100900460ff1615806118a85750600382015462010000900460ff16155b156118e257506001600160a01b03851660009081526005820160205260408120600281018054600190920180549084905592905501611a60565b600e8301546119bf576000808360010154116118ff57600061193b565b8260020154836001015460048501546001600160a01b038a1660009081526005870160205260409020929091019160010154028161193957fe5b045b905060008084600201541161195157600061198d565b8360020154846001015460048601546001600160a01b038b1660009081526005880160205260409020929091019160020154028161198b57fe5b045b6001600160a01b038916600090815260058601602052604081206001810182905560020155919091019150611a609050565b60008260000184600e0154600381106119d457fe5b0154116119e2576000611a2f565b600e8301548290600381106119f357fe5b015460048301546001600160a01b03881660009081526005850160205260409020600e86015460038110611a2357fe5b01540281611a2d57fe5b045b6001600160a01b03871660009081526005840160205260408120600e860154929350909160038110611a5d57fe5b01555b6040516001600160a01b0387169082156108fc029083906000818181858888f15050505050505050505050565b60085481565b6000600a8481548110611aa257fe5b60009182526020822060035460405163f7434ea960e01b8152600f90930290910193506001600160a01b03169063f7434ea990611ae39060049081016134d0565b60206040518083038186803b158015611afb57600080fd5b505afa158015611b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3391906130ad565b9050600260048084015460ff1690811115611b4a57fe5b14611b675760405162461bcd60e51b815260040161077090613981565b600554826005015442031115611b8f5760405162461bcd60e51b815260040161077090613d5d565b80341015611baf5760405162461bcd60e51b8152600401610770906139fd565b60048201805460ff19166003179055336009830160020180546001600160a01b0319166001600160a01b0392831617905560035460405163c13517e160e01b815291169063c13517e1908390611c0c90600290600490810161358f565b6020604051808303818588803b158015611c2557600080fd5b505af1158015611c39573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611c5e91906130ad565b600c83018190556000908152600b6020526040808220879055600d8401805460010181558252513483900391339183156108fc0291849190818181858888f1505050600c8501546003546040519193506001600160a01b031691507f74baab670a4015ab2f1b467c5252a96141a2573f2908e58a92081e80d3cfde3d90611ce8908a908190613f1f565b60405180910390a3336001600160a01b0316867f6f0bb1c54bb0ad8822894f45a3837ab62e23e77d25c5881ab57e1c6a99f7e0b542604051611d2a9190613f16565b60405180910390a3831561137f57600354604051339188916001600160a01b03909116907fdccf2f8b2cc26eafcd61905cba744cff4b81d14740725f6376390dc6298a6a3c90611d7d908a908a906135a8565b60405180910390a4505050505050565b611d95612f0c565b611d9d612f0c565b600080600a8681548110611dad57fe5b90600052602060002090600f02019050600081600d018681548110611dce57fe5b906000526020600020906006020190508060000181600301826004015482600380602002604051908101604052809291908260038015611e23576020028201915b815481526020019060010190808311611e0f575b5050604080516060810191829052949750869350600392509050826000855b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411611e425790505050505050915094509450945050509250925092565b6001546001600160a01b031681565b600a8181548110611ea757600080fd5b60009182526020909120600f90910201805460018201546002830154600384015460048501546005860154600687015460078801546008890154600c8a0154600e909a01546001600160a01b03998a169b5097999698959760ff909516969395909216939092908b565b6002546001600160a01b03163314611f3b5760405162461bcd60e51b815260040161077090613aa4565b600955565b611f48612f0c565b6000600a8381548110611f5757fe5b60009182526020909120604080516060810191829052600f9093029091019250600983019060039082845b81546001600160a01b03168152600190910190602001808311611f82575050505050915050919050565b6000600a8481548110611fbb57fe5b60009182526020909120600f9091020190506004808083015460ff1690811115611fe157fe5b1415611fff5760405162461bcd60e51b815260040161077090613e7d565b600354604051339186916001600160a01b03909116907fdccf2f8b2cc26eafcd61905cba744cff4b81d14740725f6376390dc6298a6a3c9061204490889088906135a8565b60405180910390a450505050565b6002546001600160a01b0316331461207c5760405162461bcd60e51b815260040161077090613aa4565b600655565b6000600a828154811061209057fe5b60009182526020909120600f909102019050600260048083015460ff16908111156120b757fe5b106120d45760405162461bcd60e51b815260040161077090613d10565b806001015481600501544203116120fd5760405162461bcd60e51b815260040161077090613aed565b6004818101805460ff19169091179055600781018054600883018054600093849055908390556006840154604051929391926001600160a01b03909116916108fc841502918491818181858888f150508554600687015460405163a9059cbb60e01b81526001600160a01b03928316955063a9059cbb9450612187935091169086906004016133dd565b602060405180830381600087803b1580156121a157600080fd5b505af11580156121b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d9919061300b565b6121f55760405162461bcd60e51b815260040161077090613663565b837f5850eca3b971056e7a311e04b06c359c0aceec8e422e4e015301e136efbd888a426040516122259190613b6d565b60405180910390a250505050565b6000546001600160a01b031681565b6002546001600160a01b0316331461226c5760405162461bcd60e51b815260040161077090613aa4565b600855565b6000600a828154811061228057fe5b90600052602060002090600f0201905080600101548160050154420311156122ba5760405162461bcd60e51b81526004016107709061362e565b6000816001015482600501544203836002015484600301540302816122db57fe5b04826002015401905060006122ef846113ec565b60035460405163f7434ea960e01b81529192506000916001600160a01b039091169063f7434ea9906123259060049081016134d0565b60206040518083038186803b15801561233d57600080fd5b505afa158015612351573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237591906130ad565b90506000612394612710610e0f85600654612b3190919063ffffffff16565b9050600060048087015460ff16908111156123ab57fe5b146123c85760405162461bcd60e51b815260040161077090613cc3565b803410156123e85760405162461bcd60e51b815260040161077090613ec3565b600a850180546001600160a01b0319163390811790915560048601805460ff1916600117905560078601859055600886018290556040513483900391906108fc8315029083906000818181858888f150505050600387015461244b915086612b7a565b8654600688015460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb9261248492169085906004016133dd565b602060405180830381600087803b15801561249e57600080fd5b505af11580156124b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d6919061300b565b6124f25760405162461bcd60e51b815260040161077090613bda565b336001600160a01b0316877f9c8de00bfaaca6ca425ca3047c87c81f398e79f7c15166f53dcb29782ef9da42874260405161252e929190613f1f565b60405180910390a350505050505050565b600a5490565b6000600a848154811061255457fe5b60009182526020909120600f909102019050600160048083015460ff169081111561257b57fe5b146125985760405162461bcd60e51b81526004016107709061374a565b80600101548160050154420311156125c25760405162461bcd60e51b81526004016107709061362e565b60098101600101546001600160a01b031633146125f15760405162461bcd60e51b815260040161077090613858565b60048101805460ff191660021790554260058201819055604051339186917f81c1cc8daea412565717a44fb42a08dbcb5d73101f5473d062391293c947d26d9161263e91889188916135bc565b60405180910390a350505050565b60055481565b608081565b6000600a828154811061266657fe5b60009182526020909120600f909102019050600260048083015460ff169081111561268d57fe5b146126aa5760405162461bcd60e51b815260040161077090613981565b60055481600501544203116126d15760405162461bcd60e51b81526004016107709061393e565b6004818101805460ff19169091179055600a810154600782018054600884018054600093849055908390556040516001600160a01b03909416939192909184916108fc841502918491818181858888f15050865460405163a9059cbb60e01b81526001600160a01b03909116935063a9059cbb92506127579150869086906004016133dd565b602060405180830381600087803b15801561277157600080fd5b505af1158015612785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a9919061300b565b6127c55760405162461bcd60e51b815260040161077090613663565b847f5850eca3b971056e7a311e04b06c359c0aceec8e422e4e015301e136efbd888a426040516127f59190613c56565b60405180910390a25050505050565b61271081565b6002546001600160a01b031633146128345760405162461bcd60e51b815260040161077090613aa4565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000838511156128785760405162461bcd60e51b815260040161077090613a47565b6040516323b872dd60e01b81526001600160a01b038716906323b872dd906128a8903390309089906004016133b9565b602060405180830381600087803b1580156128c257600080fd5b505af11580156128d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fa919061300b565b6129165760405162461bcd60e51b8152600401610770906136a7565b4287116129355760405162461bcd60e51b815260040161077090613de2565b50600a8054600181018255600091909152600f81027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8810180546001600160a01b0389166001600160a01b031991821617825542808b037fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a98501557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2aa84018990557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ab84018890557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ad8401557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ae83018054909116331790557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2af90910185905560405182907f61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d90612aa790879087906135a8565b60405180910390a28054604051339184917ff3efa663e8763e3719e2bdc58b7fdc03d43b6fcec97b7bcf371e6a4ea870448891612af1916001600160a01b039091169042906133dd565b60405180910390a3509695505050505050565b600080600a8381548110612b1457fe5b60009182526020909120600d600f9092020101549150505b919050565b600082612b4057506000610a24565b82820282848281612b4d57fe5b0414612b5b57600019612b5d565b805b949350505050565b600082820183811015612b5b57600019612b5d565b600082821115612b8c57506000610a24565b50808203610a24565b60008083831115612bab57508290506000612bb3565b508190508083035b9250929050565b6000828152600b6020526040812054600a805491929183908110612bda57fe5b600091825260208220600f909102016004818101805460ff19169091179055600e810185905560088101805460078301805490859055939091559092509084612d2357600a8301546040516002909304926001600160a01b03909116906108fc8415029084906000818181858888f1505050600b8501546040516001600160a01b0390911692506108fc851502915084906000818181858888f150508554600687015460405163a9059cbb60e01b81526001600160a01b03928316955063a9059cbb9450612cb0935091169085906004016133dd565b602060405180830381600087803b158015612cca57600080fd5b505af1158015612cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d02919061300b565b612d1e5760405162461bcd60e51b8152600401610770906139b6565b612ecc565b6001851415612dfc57600a8301546040516001600160a01b03909116906108fc8415029084906000818181858888f150508554600a87015460405163a9059cbb60e01b81526001600160a01b03928316955063a9059cbb9450612d8e935091169085906004016133dd565b602060405180830381600087803b158015612da857600080fd5b505af1158015612dbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de0919061300b565b612d1e5760405162461bcd60e51b8152600401610770906138f6565b600b8301546040516001600160a01b03909116906108fc8415029084906000818181858888f150508554600687015460405163a9059cbb60e01b81526001600160a01b03928316955063a9059cbb9450612e5e935091169085906004016133dd565b602060405180830381600087803b158015612e7857600080fd5b505af1158015612e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb0919061300b565b612ecc5760405162461bcd60e51b8152600401610770906139b6565b837f5850eca3b971056e7a311e04b06c359c0aceec8e422e4e015301e136efbd888a42604051612efc9190613c25565b60405180910390a2505050505050565b60405180606001604052806003906020820280368337509192915050565b60008083601f840112612f3b578182fd5b50813567ffffffffffffffff811115612f52578182fd5b602083019150836020828501011115612bb357600080fd5b80516001600160701b0381168114612b2c57600080fd5b600060208284031215612f92578081fd5b8135612b5b81613f47565b600080600060608486031215612fb1578182fd5b8335612fbc81613f47565b95602085013595506040909401359392505050565b60008060008060808587031215612fe6578081fd5b8435612ff181613f47565b966020860135965060408601359560600135945092505050565b60006020828403121561301c578081fd5b81518015158114612b5b578182fd5b60006020828403121561303c578081fd5b8151612b5b81613f5f565b60008060006060848603121561305b578283fd5b61306484612f6a565b925061307260208501612f6a565b9150604084015163ffffffff8116811461308a578182fd5b809150509250925092565b6000602082840312156130a6578081fd5b5035919050565b6000602082840312156130be578081fd5b5051919050565b600080604083850312156130d7578182fd5b8235915060208301356130e981613f47565b809150509250929050565b60008060008060008060a0878903121561310c578182fd5b86359550602087013561311e81613f47565b94506040870135935060608701359250608087013567ffffffffffffffff811115613147578283fd5b61315389828a01612f2a565b979a9699509497509295939492505050565b60008060408385031215613177578182fd5b8235915060208301356130e981613f5f565b60008060006040848603121561319d578283fd5b83359250602084013567ffffffffffffffff8111156131ba578283fd5b6131c686828701612f2a565b9497909650939450505050565b600080604083850312156131e5578182fd5b50508035926020909101359150565b60008060408385031215613206578182fd5b505080516020909101519092909150565b60008060006060848603121561322b578081fd5b8335925060208401359150604084013561308a81613f47565b8060005b6003811015613267578151845260209384019390910190600101613248565b50505050565b6000815460018082166000811461328b57600181146132a9576132e7565b60028304607f16865260ff19831660208701526040860193506132e7565b600283048087526132b986613f3b565b60005b828110156132dd5781546020828b01015284820191506020810190506132bc565b8801602001955050505b50505092915050565b600381106132fa57fe5b9052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b6001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60608101818360005b60038110156132e75781516001600160a01b03168352602092830192909101906001016133ff565b60608101610a248284613244565b60e081016134438286613244565b606082018460005b600381101561346c578151151583526020928301929091019060010161344b565b5050508260c0830152949350505050565b6000602080835283518082850152825b818110156134a95785810183015185820160400152820161348d565b818111156134ba5783604083870101525b50601f01601f1916929092016040019392505050565b6000602082526134e3602083018461326d565b9392505050565b6001600160a01b038c81168252602082018c9052604082018b9052606082018a905261016082019060058a1061351c57fe5b608083019990995260a08201979097529490961660c085015260e08401929092526101008301526101208201526101400191909152949350505050565b60208101610a2482846132f0565b6060810161357582866132f0565b6001600160a01b0393909316602082015260400152919050565b600083825260406020830152612b5d604083018461326d565b600060208252612b5d6020830184866132fe565b6000604082526135d06040830185876132fe565b9050826020830152949350505050565b6020808252602e908201527f46756e64696e67206d757374206265206d6164652077697468696e207468652060408201526d30b83832b0b6103832b934b7b21760911b606082015260800190565b6020808252818101527f54686520646561646c696e652068617320616c7265616479207061737365642e604082015260600190565b60208082526024908201527f54686520746f6b656e207472616e736665722077617320756e73756363657373604082015263333ab61760e11b606082015260800190565b6020808252603d908201527f52657175657374657220646f6573206e6f74206861766520656e6f756768207460408201527f6f6b656e7320746f20636f76657220746865206d61782070726963652e000000606082015260800190565b60208082526026908201527f54686520646973707574652068617320616c7265616479206265656e2072657360408201526537b63b32b21760d11b606082015260800190565b6020808252604a908201527f546865207461736b20697320656974686572206e6f742061737369676e65642060408201527f6f72207472616e736c6174696f6e2068617320616c7265616479206265656e2060608201526939bab136b4ba3a32b21760b11b608082015260a00190565b60208082526021908201527f4d7573742062652063616c6c6564206279207468652061726269747261746f726040820152601760f91b606082015260800190565b6020808252603e908201527f546865206c6f736572206d7573742070617920647572696e672074686520666960408201527f7273742068616c66206f66207468652061707065616c20706572696f642e0000606082015260800190565b60208082526041908201527f43616e2774207375626d6974207472616e736c6174696f6e20746f207468652060408201527f7461736b2074686174207761736e27742061737369676e656420746f20796f756060820152601760f91b608082015260a00190565b6020808252601e908201527f436f756c64206e6f742063616c63756c617465207468652070726963652e0000604082015260600190565b60208082526028908201527f436f756c64206e6f74207472616e7366657220746f6b656e7320746f207472616040820152673739b630ba37b91760c11b606082015260800190565b60208082526023908201527f54686520726576696577207068617365206861736e277420706173736564207960408201526232ba1760e91b606082015260800190565b6020808252818101527f546865207461736b20697320696e207468652077726f6e67207374617475732e604082015260600190565b60208082526027908201527f436f756c64206e6f74207472616e7366657220746f6b656e7320746f207265716040820152663ab2b9ba32b91760c91b606082015260800190565b6020808252602a908201527f4e6f7420656e6f7567682045544820746f20636f766572206368616c6c656e6760408201526932903232b837b9b4ba1760b11b606082015260800190565b6020808252603c908201527f546865206d696e696d616c2070726963652073686f756c64206265206c65737360408201527f207468616e206f7220657175616c20746f206d61782070726963652e00000000606082015260800190565b60208082526029908201527f4f6e6c7920676f7665726e6f7220697320616c6c6f77656420746f207065726660408201526837b936903a3434b99760b91b606082015260800190565b60208082526032908201527f43616e2774207265696d62757273652069662074686520646561646c696e65206040820152713430b9b713ba103830b9b9b2b2103cb2ba1760711b606082015260800190565b602080825260149082015273139bc8191a5cdc1d5d19481d1bc8185c1c19585b60621b604082015260600190565b6040808252601490820152731c995c5d595cdd195c8b5c995a5b589d5c9cd95960621b6060820152602081019190915260800190565b6020808252601a908201527f44697370757465206973206e6f742061707065616c61626c652e000000000000604082015260600190565b6020808252602b908201527f436f756c64206e6f74207472616e7366657220746f6b656e7320746f2074686560408201526a103932b8bab2b9ba32b91760a91b606082015260800190565b6040808252600f908201526e191a5cdc1d5d194b5cd95d1d1b1959608a1b6060820152602081019190915260800190565b6040808252601490820152731d1c985b9cdb185d1a5bdb8b5858d8d95c1d195960621b6060820152602081019190915260800190565b6020808252601c908201527f546865207461736b2073686f756c64206265207265736f6c7665642e00000000604082015260600190565b6020808252602d908201527f5461736b2068617320616c7265616479206265656e2061737369676e6564206f60408201526c39103932b4b6b13ab939b2b21760991b606082015260800190565b6020808252602d908201527f43616e2774207265696d6275727365206966207472616e736c6174696f6e207760408201526c30b99039bab136b4ba3a32b21760991b606082015260800190565b60208082526024908201527f546865207265766965772070686173652068617320616c72656164792070617360408201526339b2b21760e11b606082015260800190565b60208082526021908201527f41707065616c206665652068617320616c7265616479206265656e20706169646040820152601760f91b606082015260800190565b60208082526025908201527f54686520646561646c696e652073686f756c6420626520696e207468652066756040820152643a3ab9329760d91b606082015260800190565b60208082526036908201527f526563697069656e74206d7573742062652065697468657220746865207472616040820152753739b630ba37b91037b91031b430b63632b733b2b91760511b606082015260800190565b60208082526026908201527f546865207461736b206d757374206e6f7420616c72656164792062652072657360408201526537b63b32b21760d11b606082015260800190565b60208082526033908201527f4e6f7420656e6f7567682045544820746f20726561636820746865207265717560408201527234b932b2103232b837b9b4ba103b30b63ab29760691b606082015260800190565b90815260200190565b918252602082015260400190565b60ff91909116815260200190565b60009081526020902090565b6001600160a01b0381168114613f5c57600080fd5b50565b60038110613f5c57600080fdfea264697066735822122034e7765540a97efd521f090e8d58952ba96265cb39141a105a7f83c293cce60b64736f6c63430007040033",
  "deployedBytecode": "0x6080604052600436106102465760003560e01c8063881f7c5711610139578063adc7faba116100b6578063cc7b9d061161007a578063cc7b9d061461067d578063d2dbe1d81461069f578063d661dd31146106bf578063e4c0aaf4146106d4578063f0900d2f146106f4578063fc6f8f161461071457610246565b8063adc7faba14610600578063b857318514610620578063c17a340e14610633578063c36cd19614610648578063c4e690df1461066857610246565b806395c95522116100fd57806395c955221461055e578063a6a7f0eb1461058b578063a95c9805146105ab578063aba4ab74146105cb578063ad5c4648146105eb57610246565b8063881f7c57146104b05780638a9bb02a146104c35780638bdb2afa146104f25780638d9776721461050757806392239dff1461053e57610246565b8063311a6c56116101c757806368c76ffd1161018b57806368c76ffd146104195780636cc6cde1146104465780636e8218aa1461045b5780636e99a23a1461047b5780637b9433831461049b57610246565b8063311a6c561461038f578063339ac67c146103af5780633a2dabfa146103cf57806341658341146103e457806354954d82146103f957610246565b806312b3a2c01161020e57806312b3a2c01461030757806312ce35251461031a5780631972483a1461033a5780631d5120851461035a578063244772e81461036f57610246565b8063064ba1891461024b57806309e24ad4146102815780630c340a24146102a35780630c7ac7b6146102c55780631165542b146102e7575b600080fd5b34801561025757600080fd5b5061026b610266366004613095565b610734565b6040516102789190613f16565b60405180910390f35b34801561028d57600080fd5b506102a161029c366004613095565b610746565b005b3480156102af57600080fd5b506102b861077e565b60405161027891906133a5565b3480156102d157600080fd5b506102da61078d565b604051610278919061347d565b3480156102f357600080fd5b5061026b6103023660046130c5565b61081b565b6102a1610315366004613165565b610a2a565b34801561032657600080fd5b506102a1610335366004613095565b611080565b34801561034657600080fd5b5061026b610355366004613095565b6110af565b34801561036657600080fd5b5061026b611195565b34801561037b57600080fd5b5061026b61038a366004613095565b61119b565b34801561039b57600080fd5b506102a16103aa3660046131d3565b611222565b3480156103bb57600080fd5b506102a16103ca366004612fd1565b611387565b3480156103db57600080fd5b5061026b6113e0565b3480156103f057600080fd5b5061026b6113e6565b34801561040557600080fd5b5061026b610414366004613095565b6113ec565b34801561042557600080fd5b50610439610434366004613217565b61163d565b6040516102789190613427565b34801561045257600080fd5b506102b86116d9565b34801561046757600080fd5b5061026b610476366004613095565b6116e8565b34801561048757600080fd5b506102a1610496366004612f9d565b61180e565b3480156104a757600080fd5b5061026b611a8d565b6102a16104be366004613189565b611a93565b3480156104cf57600080fd5b506104e36104de3660046131d3565b611d8d565b60405161027893929190613435565b3480156104fe57600080fd5b506102b8611e88565b34801561051357600080fd5b50610527610522366004613095565b611e97565b6040516102789b9a999897969594939291906134ea565b34801561054a57600080fd5b506102a1610559366004613095565b611f11565b34801561056a57600080fd5b5061057e610579366004613095565b611f40565b60405161027891906133f6565b34801561059757600080fd5b506102a16105a6366004613189565b611fac565b3480156105b757600080fd5b506102a16105c6366004613095565b612052565b3480156105d757600080fd5b506102a16105e6366004613095565b612081565b3480156105f757600080fd5b506102b8612233565b34801561060c57600080fd5b506102a161061b366004613095565b612242565b6102a161062e366004613095565b612271565b34801561063f57600080fd5b5061026b61253f565b34801561065457600080fd5b506102a1610663366004613189565b612545565b34801561067457600080fd5b5061026b61264c565b34801561068957600080fd5b50610692612652565b6040516102789190613f2d565b3480156106ab57600080fd5b506102a16106ba366004613095565b612657565b3480156106cb57600080fd5b5061026b612804565b3480156106e057600080fd5b506102a16106ef366004612f81565b61280a565b34801561070057600080fd5b5061026b61070f3660046130f4565b612856565b34801561072057600080fd5b5061026b61072f366004613095565b612b04565b600b6020526000908152604090205481565b6002546001600160a01b031633146107795760405162461bcd60e51b815260040161077090613aa4565b60405180910390fd5b600555565b6002546001600160a01b031681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108135780601f106107e857610100808354040283529160200191610813565b820191906000526020600020905b8154815290600101906020018083116107f657829003601f168201915b505050505081565b600080600a848154811061082b57fe5b60009182526020909120600f9091020190506004808083015460ff169081111561085157fe5b1461085c5750610a24565b60005b600d820154811015610a2157600082600d01828154811061087c57fe5b60009182526020909120600360069092020190810154909150610100900460ff1615806108b45750600381015462010000900460ff16155b156108e9576001600160a01b038516600090815260058201602052604090206002810154600190910154019390930192610a18565b600e8301546109a357600080826001015411610906576000610942565b8160020154826001015460048401546001600160a01b03891660009081526005860160205260409020929091019160010154028161094057fe5b045b9050600080836002015411610958576000610994565b8260020154836001015460048501546001600160a01b038a1660009081526005870160205260409020929091019160020154028161099257fe5b045b91909101949094019350610a18565b60008160000184600e0154600381106109b857fe5b0154116109c6576000610a13565b600e8301548190600381106109d757fe5b015460048201546001600160a01b03871660009081526005840160205260409020600e86015460038110610a0757fe5b01540281610a1157fe5b045b840193505b5060010161085f565b50505b92915050565b6000600a8381548110610a3957fe5b60009182526020909120600f9091020190506001826002811115610a5957fe5b1480610a7057506002826002811115610a6e57fe5b145b610a8c5760405162461bcd60e51b815260040161077090613e27565b600360048083015460ff1690811115610aa157fe5b14610abe5760405162461bcd60e51b815260040161077090613b3f565b6001600354600c83015460405163021e2d3d60e31b81526001600160a01b03909216916310f169e891610af391600401613f16565b60206040518083038186803b158015610b0b57600080fd5b505afa158015610b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b43919061302b565b6002811115610b4e57fe5b14610b6b5760405162461bcd60e51b815260040161077090613ba3565b600354600c82015460405163afe15cfb60e01b815260009283926001600160a01b039091169163afe15cfb91610ba391600401613f16565b604080518083038186803b158015610bba57600080fd5b505afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf291906131f4565b91509150814210158015610c0557508042105b610c215760405162461bcd60e51b8152600401610770906135e0565b600354600c840154604051631c3db16d60e01b81526000926001600160a01b031691631c3db16d91610c569190600401613f16565b60206040518083038186803b158015610c6e57600080fd5b505afa158015610c82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca691906130ad565b90506000856002811115610cb657fe5b821415610cc65750600854610cff565b81610cd45750600754610cff565b60028484030484420310610cfa5760405162461bcd60e51b8152600401610770906137fb565b506009545b600d85018054600091906000198101908110610d1757fe5b9060005260206000209060060201905080600301876002811115610d3757fe5b60038110610d4157fe5b602081049091015460ff601f9092166101000a90041615610d745760405162461bcd60e51b815260040161077090613da1565b600354600c87015460405163791f8b7360e11b81526000926001600160a01b03169163f23f16e691610dab9190600490810161358f565b60206040518083038186803b158015610dc357600080fd5b505afa158015610dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfb91906130ad565b90506000610e1f612710610e0f8487612b31565b81610e1657fe5b84919004612b65565b9050600080610e5034610e4b878e6002811115610e3857fe5b60038110610e4257fe5b01548690612b7a565b612b95565b3360009081526005880160205260409020919350915082908c6002811115610e7457fe5b60038110610e7e57fe5b018054909101905581858c6002811115610e9457fe5b60038110610e9e57fe5b01805490910190556040518c907f22039e79a27860a038aece214124c8ecef12fdc1334feb8e8a157a0ae16a1db490610edc908e9033908790613567565b60405180910390a282858c6002811115610ef257fe5b60038110610efc57fe5b015410610fa0576001856003018c6002811115610f1557fe5b60038110610f1f57fe5b602091828204019190066101000a81548160ff021916908315150217905550846000018b6002811115610f4e57fe5b60038110610f5857fe5b015460048601805490910190556040518c907f213276d821d6205d87fa4f4658db4bf5a24a2323b0fdd8ffcd239c445f86a57b90610f97908e90613559565b60405180910390a25b604051339082156108fc029083906000818181858888f1505050506003860154610100900460ff1690508015610fe05750600385015462010000900460ff165b1561107257600354600c8b015460405163093225f160e31b81526001600160a01b03909216916349912f8891879161101d9190600490810161358f565b6000604051808303818588803b15801561103657600080fd5b505af115801561104a573d6000803e3d6000fd5b505050600d8c01805460010181556000525050600485015461106c9085612b7a565b60048601555b505050505050505050505050565b6002546001600160a01b031633146110aa5760405162461bcd60e51b815260040161077090613aa4565b600755565b600080600a83815481106110bf57fe5b90600052602060002090600f020190506005548160050154420311806110f85750600260048083015460ff16908111156110f557fe5b14155b1561110c576001600160ff1b03915061118f565b60035460405163f7434ea960e01b81526001600160a01b039091169063f7434ea99061113c9060049081016134d0565b60206040518083038186803b15801561115457600080fd5b505afa158015611168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118c91906130ad565b91505b50919050565b60095481565b600080600a83815481106111ab57fe5b90600052602060002090600f0201905080600101548160050154420311806111e65750600060048083015460ff16908111156111e357fe5b14155b156111f4576000915061118f565b8060010154816005015442038260020154836003015403028161121357fe5b04816002015401915050919050565b600081600281111561123057fe5b6000848152600b6020526040812054600a805493945090928390811061125257fe5b600091825260208220600d600f90920201908101805491935090600019810190811061127a57fe5b6000918252602090912060035460069092020191506001600160a01b031633146112b65760405162461bcd60e51b8152600401610770906137ba565b600360048084015460ff16908111156112cb57fe5b146112e85760405162461bcd60e51b815260040161077090613704565b600381015460ff610100909104161515600114156113095760019350611326565b600381015462010000900460ff1615156001141561132657600293505b85337f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e7562227686600281111561135557fe5b6040516113629190613f16565b60405180910390a361137f8685600281111561137a57fe5b612bba565b505050505050565b6000600a848154811061139657fe5b90600052602060002090600f0201905060008390505b600d820154811080156113c857508215806113c8575082840181105b1561137f576113d886868361180e565b6001016113ac565b60065481565b60075481565b600080600a83815481106113fc57fe5b90600052602060002090600f0201905060008160010154826005015442038360020154846003015403028161142d57fe5b04826002015401905081600101548260050154420311806114615750600060048084015460ff169081111561145e57fe5b14155b1561146f5760009250611636565b60005482546001600160a01b039081169116141561148f57809250611636565b60008054835482916001600160a01b039081169116106114c05760005484546001600160a01b0391821691166114d3565b83546000546001600160a01b0391821691165b6001546040519294509092506000916001600160a01b03909116906114fe9085908590602001613328565b6040516020818303038152906040528051906020012060405160200161152592919061334f565b6040516020818303038152906040528051906020012060001c9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561157c57600080fd5b505afa158015611590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b49190613047565b5088546001600160701b0392831694509116915060009081906001600160a01b038881169116146115e65782846115e9565b83835b915091506000821180156115fd5750600081115b6116195760405162461bcd60e51b8152600401610770906138bf565b816116248983612b31565b8161162b57fe5b049950505050505050505b5050919050565b611645612f0c565b6000600a858154811061165457fe5b90600052602060002090600f02019050600081600d01858154811061167557fe5b600091825260208083206001600160a01b03881684526005600690930201918201905260409182902082516060810190935290925060038282826020028201915b8154815260200190600101908083116116b6575050505050925050509392505050565b6003546001600160a01b031681565b600080600a83815481106116f857fe5b90600052602060002090600f0201905080600101548160050154420311806117335750600060048083015460ff169081111561173057fe5b14155b15611747576001600160ff1b03915061118f565b6000611752846113ec565b60035460405163f7434ea960e01b81529192506000916001600160a01b039091169063f7434ea9906117889060049081016134d0565b60206040518083038186803b1580156117a057600080fd5b505afa1580156117b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d891906130ad565b90506118056127106117f584600654612b3190919063ffffffff16565b816117fc57fe5b83919004612b65565b95945050505050565b6000600a838154811061181d57fe5b90600052602060002090600f02019050600081600d01838154811061183e57fe5b6000918252602090912060069091020190506004808084015460ff169081111561186457fe5b146118815760405162461bcd60e51b815260040161077090613c8c565b6003810154600090610100900460ff1615806118a85750600382015462010000900460ff16155b156118e257506001600160a01b03851660009081526005820160205260408120600281018054600190920180549084905592905501611a60565b600e8301546119bf576000808360010154116118ff57600061193b565b8260020154836001015460048501546001600160a01b038a1660009081526005870160205260409020929091019160010154028161193957fe5b045b905060008084600201541161195157600061198d565b8360020154846001015460048601546001600160a01b038b1660009081526005880160205260409020929091019160020154028161198b57fe5b045b6001600160a01b038916600090815260058601602052604081206001810182905560020155919091019150611a609050565b60008260000184600e0154600381106119d457fe5b0154116119e2576000611a2f565b600e8301548290600381106119f357fe5b015460048301546001600160a01b03881660009081526005850160205260409020600e86015460038110611a2357fe5b01540281611a2d57fe5b045b6001600160a01b03871660009081526005840160205260408120600e860154929350909160038110611a5d57fe5b01555b6040516001600160a01b0387169082156108fc029083906000818181858888f15050505050505050505050565b60085481565b6000600a8481548110611aa257fe5b60009182526020822060035460405163f7434ea960e01b8152600f90930290910193506001600160a01b03169063f7434ea990611ae39060049081016134d0565b60206040518083038186803b158015611afb57600080fd5b505afa158015611b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3391906130ad565b9050600260048084015460ff1690811115611b4a57fe5b14611b675760405162461bcd60e51b815260040161077090613981565b600554826005015442031115611b8f5760405162461bcd60e51b815260040161077090613d5d565b80341015611baf5760405162461bcd60e51b8152600401610770906139fd565b60048201805460ff19166003179055336009830160020180546001600160a01b0319166001600160a01b0392831617905560035460405163c13517e160e01b815291169063c13517e1908390611c0c90600290600490810161358f565b6020604051808303818588803b158015611c2557600080fd5b505af1158015611c39573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611c5e91906130ad565b600c83018190556000908152600b6020526040808220879055600d8401805460010181558252513483900391339183156108fc0291849190818181858888f1505050600c8501546003546040519193506001600160a01b031691507f74baab670a4015ab2f1b467c5252a96141a2573f2908e58a92081e80d3cfde3d90611ce8908a908190613f1f565b60405180910390a3336001600160a01b0316867f6f0bb1c54bb0ad8822894f45a3837ab62e23e77d25c5881ab57e1c6a99f7e0b542604051611d2a9190613f16565b60405180910390a3831561137f57600354604051339188916001600160a01b03909116907fdccf2f8b2cc26eafcd61905cba744cff4b81d14740725f6376390dc6298a6a3c90611d7d908a908a906135a8565b60405180910390a4505050505050565b611d95612f0c565b611d9d612f0c565b600080600a8681548110611dad57fe5b90600052602060002090600f02019050600081600d018681548110611dce57fe5b906000526020600020906006020190508060000181600301826004015482600380602002604051908101604052809291908260038015611e23576020028201915b815481526020019060010190808311611e0f575b5050604080516060810191829052949750869350600392509050826000855b825461010083900a900460ff161515815260206001928301818104948501949093039092029101808411611e425790505050505050915094509450945050509250925092565b6001546001600160a01b031681565b600a8181548110611ea757600080fd5b60009182526020909120600f90910201805460018201546002830154600384015460048501546005860154600687015460078801546008890154600c8a0154600e909a01546001600160a01b03998a169b5097999698959760ff909516969395909216939092908b565b6002546001600160a01b03163314611f3b5760405162461bcd60e51b815260040161077090613aa4565b600955565b611f48612f0c565b6000600a8381548110611f5757fe5b60009182526020909120604080516060810191829052600f9093029091019250600983019060039082845b81546001600160a01b03168152600190910190602001808311611f82575050505050915050919050565b6000600a8481548110611fbb57fe5b60009182526020909120600f9091020190506004808083015460ff1690811115611fe157fe5b1415611fff5760405162461bcd60e51b815260040161077090613e7d565b600354604051339186916001600160a01b03909116907fdccf2f8b2cc26eafcd61905cba744cff4b81d14740725f6376390dc6298a6a3c9061204490889088906135a8565b60405180910390a450505050565b6002546001600160a01b0316331461207c5760405162461bcd60e51b815260040161077090613aa4565b600655565b6000600a828154811061209057fe5b60009182526020909120600f909102019050600260048083015460ff16908111156120b757fe5b106120d45760405162461bcd60e51b815260040161077090613d10565b806001015481600501544203116120fd5760405162461bcd60e51b815260040161077090613aed565b6004818101805460ff19169091179055600781018054600883018054600093849055908390556006840154604051929391926001600160a01b03909116916108fc841502918491818181858888f150508554600687015460405163a9059cbb60e01b81526001600160a01b03928316955063a9059cbb9450612187935091169086906004016133dd565b602060405180830381600087803b1580156121a157600080fd5b505af11580156121b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d9919061300b565b6121f55760405162461bcd60e51b815260040161077090613663565b837f5850eca3b971056e7a311e04b06c359c0aceec8e422e4e015301e136efbd888a426040516122259190613b6d565b60405180910390a250505050565b6000546001600160a01b031681565b6002546001600160a01b0316331461226c5760405162461bcd60e51b815260040161077090613aa4565b600855565b6000600a828154811061228057fe5b90600052602060002090600f0201905080600101548160050154420311156122ba5760405162461bcd60e51b81526004016107709061362e565b6000816001015482600501544203836002015484600301540302816122db57fe5b04826002015401905060006122ef846113ec565b60035460405163f7434ea960e01b81529192506000916001600160a01b039091169063f7434ea9906123259060049081016134d0565b60206040518083038186803b15801561233d57600080fd5b505afa158015612351573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237591906130ad565b90506000612394612710610e0f85600654612b3190919063ffffffff16565b9050600060048087015460ff16908111156123ab57fe5b146123c85760405162461bcd60e51b815260040161077090613cc3565b803410156123e85760405162461bcd60e51b815260040161077090613ec3565b600a850180546001600160a01b0319163390811790915560048601805460ff1916600117905560078601859055600886018290556040513483900391906108fc8315029083906000818181858888f150505050600387015461244b915086612b7a565b8654600688015460405163a9059cbb60e01b81529293506001600160a01b039182169263a9059cbb9261248492169085906004016133dd565b602060405180830381600087803b15801561249e57600080fd5b505af11580156124b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d6919061300b565b6124f25760405162461bcd60e51b815260040161077090613bda565b336001600160a01b0316877f9c8de00bfaaca6ca425ca3047c87c81f398e79f7c15166f53dcb29782ef9da42874260405161252e929190613f1f565b60405180910390a350505050505050565b600a5490565b6000600a848154811061255457fe5b60009182526020909120600f909102019050600160048083015460ff169081111561257b57fe5b146125985760405162461bcd60e51b81526004016107709061374a565b80600101548160050154420311156125c25760405162461bcd60e51b81526004016107709061362e565b60098101600101546001600160a01b031633146125f15760405162461bcd60e51b815260040161077090613858565b60048101805460ff191660021790554260058201819055604051339186917f81c1cc8daea412565717a44fb42a08dbcb5d73101f5473d062391293c947d26d9161263e91889188916135bc565b60405180910390a350505050565b60055481565b608081565b6000600a828154811061266657fe5b60009182526020909120600f909102019050600260048083015460ff169081111561268d57fe5b146126aa5760405162461bcd60e51b815260040161077090613981565b60055481600501544203116126d15760405162461bcd60e51b81526004016107709061393e565b6004818101805460ff19169091179055600a810154600782018054600884018054600093849055908390556040516001600160a01b03909416939192909184916108fc841502918491818181858888f15050865460405163a9059cbb60e01b81526001600160a01b03909116935063a9059cbb92506127579150869086906004016133dd565b602060405180830381600087803b15801561277157600080fd5b505af1158015612785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a9919061300b565b6127c55760405162461bcd60e51b815260040161077090613663565b847f5850eca3b971056e7a311e04b06c359c0aceec8e422e4e015301e136efbd888a426040516127f59190613c56565b60405180910390a25050505050565b61271081565b6002546001600160a01b031633146128345760405162461bcd60e51b815260040161077090613aa4565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000838511156128785760405162461bcd60e51b815260040161077090613a47565b6040516323b872dd60e01b81526001600160a01b038716906323b872dd906128a8903390309089906004016133b9565b602060405180830381600087803b1580156128c257600080fd5b505af11580156128d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fa919061300b565b6129165760405162461bcd60e51b8152600401610770906136a7565b4287116129355760405162461bcd60e51b815260040161077090613de2565b50600a8054600181018255600091909152600f81027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8810180546001600160a01b0389166001600160a01b031991821617825542808b037fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a98501557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2aa84018990557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ab84018890557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ad8401557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ae83018054909116331790557fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2af90910185905560405182907f61606860eb6c87306811e2695215385101daab53bd6ab4e9f9049aead9363c7d90612aa790879087906135a8565b60405180910390a28054604051339184917ff3efa663e8763e3719e2bdc58b7fdc03d43b6fcec97b7bcf371e6a4ea870448891612af1916001600160a01b039091169042906133dd565b60405180910390a3509695505050505050565b600080600a8381548110612b1457fe5b60009182526020909120600d600f9092020101549150505b919050565b600082612b4057506000610a24565b82820282848281612b4d57fe5b0414612b5b57600019612b5d565b805b949350505050565b600082820183811015612b5b57600019612b5d565b600082821115612b8c57506000610a24565b50808203610a24565b60008083831115612bab57508290506000612bb3565b508190508083035b9250929050565b6000828152600b6020526040812054600a805491929183908110612bda57fe5b600091825260208220600f909102016004818101805460ff19169091179055600e810185905560088101805460078301805490859055939091559092509084612d2357600a8301546040516002909304926001600160a01b03909116906108fc8415029084906000818181858888f1505050600b8501546040516001600160a01b0390911692506108fc851502915084906000818181858888f150508554600687015460405163a9059cbb60e01b81526001600160a01b03928316955063a9059cbb9450612cb0935091169085906004016133dd565b602060405180830381600087803b158015612cca57600080fd5b505af1158015612cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d02919061300b565b612d1e5760405162461bcd60e51b8152600401610770906139b6565b612ecc565b6001851415612dfc57600a8301546040516001600160a01b03909116906108fc8415029084906000818181858888f150508554600a87015460405163a9059cbb60e01b81526001600160a01b03928316955063a9059cbb9450612d8e935091169085906004016133dd565b602060405180830381600087803b158015612da857600080fd5b505af1158015612dbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de0919061300b565b612d1e5760405162461bcd60e51b8152600401610770906138f6565b600b8301546040516001600160a01b03909116906108fc8415029084906000818181858888f150508554600687015460405163a9059cbb60e01b81526001600160a01b03928316955063a9059cbb9450612e5e935091169085906004016133dd565b602060405180830381600087803b158015612e7857600080fd5b505af1158015612e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb0919061300b565b612ecc5760405162461bcd60e51b8152600401610770906139b6565b837f5850eca3b971056e7a311e04b06c359c0aceec8e422e4e015301e136efbd888a42604051612efc9190613c25565b60405180910390a2505050505050565b60405180606001604052806003906020820280368337509192915050565b60008083601f840112612f3b578182fd5b50813567ffffffffffffffff811115612f52578182fd5b602083019150836020828501011115612bb357600080fd5b80516001600160701b0381168114612b2c57600080fd5b600060208284031215612f92578081fd5b8135612b5b81613f47565b600080600060608486031215612fb1578182fd5b8335612fbc81613f47565b95602085013595506040909401359392505050565b60008060008060808587031215612fe6578081fd5b8435612ff181613f47565b966020860135965060408601359560600135945092505050565b60006020828403121561301c578081fd5b81518015158114612b5b578182fd5b60006020828403121561303c578081fd5b8151612b5b81613f5f565b60008060006060848603121561305b578283fd5b61306484612f6a565b925061307260208501612f6a565b9150604084015163ffffffff8116811461308a578182fd5b809150509250925092565b6000602082840312156130a6578081fd5b5035919050565b6000602082840312156130be578081fd5b5051919050565b600080604083850312156130d7578182fd5b8235915060208301356130e981613f47565b809150509250929050565b60008060008060008060a0878903121561310c578182fd5b86359550602087013561311e81613f47565b94506040870135935060608701359250608087013567ffffffffffffffff811115613147578283fd5b61315389828a01612f2a565b979a9699509497509295939492505050565b60008060408385031215613177578182fd5b8235915060208301356130e981613f5f565b60008060006040848603121561319d578283fd5b83359250602084013567ffffffffffffffff8111156131ba578283fd5b6131c686828701612f2a565b9497909650939450505050565b600080604083850312156131e5578182fd5b50508035926020909101359150565b60008060408385031215613206578182fd5b505080516020909101519092909150565b60008060006060848603121561322b578081fd5b8335925060208401359150604084013561308a81613f47565b8060005b6003811015613267578151845260209384019390910190600101613248565b50505050565b6000815460018082166000811461328b57600181146132a9576132e7565b60028304607f16865260ff19831660208701526040860193506132e7565b600283048087526132b986613f3b565b60005b828110156132dd5781546020828b01015284820191506020810190506132bc565b8801602001955050505b50505092915050565b600381106132fa57fe5b9052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b6001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60608101818360005b60038110156132e75781516001600160a01b03168352602092830192909101906001016133ff565b60608101610a248284613244565b60e081016134438286613244565b606082018460005b600381101561346c578151151583526020928301929091019060010161344b565b5050508260c0830152949350505050565b6000602080835283518082850152825b818110156134a95785810183015185820160400152820161348d565b818111156134ba5783604083870101525b50601f01601f1916929092016040019392505050565b6000602082526134e3602083018461326d565b9392505050565b6001600160a01b038c81168252602082018c9052604082018b9052606082018a905261016082019060058a1061351c57fe5b608083019990995260a08201979097529490961660c085015260e08401929092526101008301526101208201526101400191909152949350505050565b60208101610a2482846132f0565b6060810161357582866132f0565b6001600160a01b0393909316602082015260400152919050565b600083825260406020830152612b5d604083018461326d565b600060208252612b5d6020830184866132fe565b6000604082526135d06040830185876132fe565b9050826020830152949350505050565b6020808252602e908201527f46756e64696e67206d757374206265206d6164652077697468696e207468652060408201526d30b83832b0b6103832b934b7b21760911b606082015260800190565b6020808252818101527f54686520646561646c696e652068617320616c7265616479207061737365642e604082015260600190565b60208082526024908201527f54686520746f6b656e207472616e736665722077617320756e73756363657373604082015263333ab61760e11b606082015260800190565b6020808252603d908201527f52657175657374657220646f6573206e6f74206861766520656e6f756768207460408201527f6f6b656e7320746f20636f76657220746865206d61782070726963652e000000606082015260800190565b60208082526026908201527f54686520646973707574652068617320616c7265616479206265656e2072657360408201526537b63b32b21760d11b606082015260800190565b6020808252604a908201527f546865207461736b20697320656974686572206e6f742061737369676e65642060408201527f6f72207472616e736c6174696f6e2068617320616c7265616479206265656e2060608201526939bab136b4ba3a32b21760b11b608082015260a00190565b60208082526021908201527f4d7573742062652063616c6c6564206279207468652061726269747261746f726040820152601760f91b606082015260800190565b6020808252603e908201527f546865206c6f736572206d7573742070617920647572696e672074686520666960408201527f7273742068616c66206f66207468652061707065616c20706572696f642e0000606082015260800190565b60208082526041908201527f43616e2774207375626d6974207472616e736c6174696f6e20746f207468652060408201527f7461736b2074686174207761736e27742061737369676e656420746f20796f756060820152601760f91b608082015260a00190565b6020808252601e908201527f436f756c64206e6f742063616c63756c617465207468652070726963652e0000604082015260600190565b60208082526028908201527f436f756c64206e6f74207472616e7366657220746f6b656e7320746f207472616040820152673739b630ba37b91760c11b606082015260800190565b60208082526023908201527f54686520726576696577207068617365206861736e277420706173736564207960408201526232ba1760e91b606082015260800190565b6020808252818101527f546865207461736b20697320696e207468652077726f6e67207374617475732e604082015260600190565b60208082526027908201527f436f756c64206e6f74207472616e7366657220746f6b656e7320746f207265716040820152663ab2b9ba32b91760c91b606082015260800190565b6020808252602a908201527f4e6f7420656e6f7567682045544820746f20636f766572206368616c6c656e6760408201526932903232b837b9b4ba1760b11b606082015260800190565b6020808252603c908201527f546865206d696e696d616c2070726963652073686f756c64206265206c65737360408201527f207468616e206f7220657175616c20746f206d61782070726963652e00000000606082015260800190565b60208082526029908201527f4f6e6c7920676f7665726e6f7220697320616c6c6f77656420746f207065726660408201526837b936903a3434b99760b91b606082015260800190565b60208082526032908201527f43616e2774207265696d62757273652069662074686520646561646c696e65206040820152713430b9b713ba103830b9b9b2b2103cb2ba1760711b606082015260800190565b602080825260149082015273139bc8191a5cdc1d5d19481d1bc8185c1c19585b60621b604082015260600190565b6040808252601490820152731c995c5d595cdd195c8b5c995a5b589d5c9cd95960621b6060820152602081019190915260800190565b6020808252601a908201527f44697370757465206973206e6f742061707065616c61626c652e000000000000604082015260600190565b6020808252602b908201527f436f756c64206e6f74207472616e7366657220746f6b656e7320746f2074686560408201526a103932b8bab2b9ba32b91760a91b606082015260800190565b6040808252600f908201526e191a5cdc1d5d194b5cd95d1d1b1959608a1b6060820152602081019190915260800190565b6040808252601490820152731d1c985b9cdb185d1a5bdb8b5858d8d95c1d195960621b6060820152602081019190915260800190565b6020808252601c908201527f546865207461736b2073686f756c64206265207265736f6c7665642e00000000604082015260600190565b6020808252602d908201527f5461736b2068617320616c7265616479206265656e2061737369676e6564206f60408201526c39103932b4b6b13ab939b2b21760991b606082015260800190565b6020808252602d908201527f43616e2774207265696d6275727365206966207472616e736c6174696f6e207760408201526c30b99039bab136b4ba3a32b21760991b606082015260800190565b60208082526024908201527f546865207265766965772070686173652068617320616c72656164792070617360408201526339b2b21760e11b606082015260800190565b60208082526021908201527f41707065616c206665652068617320616c7265616479206265656e20706169646040820152601760f91b606082015260800190565b60208082526025908201527f54686520646561646c696e652073686f756c6420626520696e207468652066756040820152643a3ab9329760d91b606082015260800190565b60208082526036908201527f526563697069656e74206d7573742062652065697468657220746865207472616040820152753739b630ba37b91037b91031b430b63632b733b2b91760511b606082015260800190565b60208082526026908201527f546865207461736b206d757374206e6f7420616c72656164792062652072657360408201526537b63b32b21760d11b606082015260800190565b60208082526033908201527f4e6f7420656e6f7567682045544820746f20726561636820746865207265717560408201527234b932b2103232b837b9b4ba103b30b63ab29760691b606082015260800190565b90815260200190565b918252602082015260400190565b60ff91909116815260200190565b60009081526020902090565b6001600160a01b0381168114613f5c57600080fd5b50565b60038110613f5c57600080fdfea264697066735822122034e7765540a97efd521f090e8d58952ba96265cb39141a105a7f83c293cce60b64736f6c63430007040033",
  "devdoc": {
    "events": {
      "AppealContribution(uint256,uint8,address,uint256)": {
        "details": "To be emitted when someone contributes to the appeal process.",
        "params": {
          "_amount": "The amount contributed.",
          "_contributor": "The address of the contributor.",
          "_party": "The party which received the contribution.",
          "_taskID": "The ID of the respective task."
        }
      },
      "HasPaidAppealFee(uint256,uint8)": {
        "details": "To be emitted when the appeal fees of one of the parties are fully funded.",
        "params": {
          "_party": "The party that is fully funded.",
          "_taskID": "The ID of the respective task."
        }
      },
      "TaskAssigned(uint256,address,uint256,uint256)": {
        "details": "To be emitted when a translator assigns the task to himself.",
        "params": {
          "_price": "The task price at the moment it was assigned.",
          "_taskID": "The ID of the assigned task.",
          "_timestamp": "When the task was assigned.",
          "_translator": "The address that was assigned to the task."
        }
      },
      "TaskCreated(uint256,address,address,uint256)": {
        "details": "To be emitted when the new task is created.",
        "params": {
          "_requester": "The address that created the task.",
          "_taskID": "The ID of the newly created task.",
          "_timestamp": "When the task was created.",
          "_token": "The token that task uses."
        }
      },
      "TaskResolved(uint256,string,uint256)": {
        "details": "To be emitted when a task is resolved, either by the translation being accepted, the requester being reimbursed or a dispute being settled.",
        "params": {
          "_reason": "Short description of what caused the task to be solved. One of: 'translation-accepted' | 'requester-reimbursed' | 'dispute-settled'",
          "_taskID": "The ID of the respective task.",
          "_timestamp": "When the task was resolved."
        }
      },
      "TranslationChallenged(uint256,address,uint256)": {
        "details": "To be emitted when a translation is challenged.",
        "params": {
          "_challenger": "The address of the challenger.",
          "_taskID": "The ID of the respective task.",
          "_timestamp": "When the task was challenged."
        }
      },
      "TranslationSubmitted(uint256,address,string,uint256)": {
        "details": "To be emitted when a translation is submitted.",
        "params": {
          "_taskID": "The ID of the respective task.",
          "_timestamp": "When the translation was submitted.",
          "_translatedText": "A URI to the translated text.",
          "_translator": "The address that performed the translation."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acceptTranslation(uint256)": {
        "details": "Pays the translator for completed task if no one challenged the translation during review period.",
        "params": {
          "_taskID": "The ID of the task."
        }
      },
      "amountWithdrawable(uint256,address)": {
        "details": "Returns the sum of withdrawable wei from appeal rounds. This function is O(n), where n is the number of rounds of the task. This could exceed the gas limit, therefore this function should only be used for interface display and not by other contracts.",
        "params": {
          "_beneficiary": "The contributor for which to query.",
          "_taskID": "The ID of the associated task."
        },
        "returns": {
          "total": "The total amount of wei available to withdraw."
        }
      },
      "assignTask(uint256)": {
        "details": "Assigns a specific task to the sender. Requires a translator's deposit in wei.",
        "params": {
          "_taskID": "The ID of the task."
        }
      },
      "batchRoundWithdraw(address,uint256,uint256,uint256)": {
        "details": "Withdraws contributions of multiple appeal rounds at once. This function is O(n) where n is the number of rounds. This could exceed the gas limit, therefore this function should be used only as a utility and not be relied upon by other contracts.",
        "params": {
          "_beneficiary": "The address that made contributions.",
          "_count": "The number of rounds to iterate. If set to 0 or a value larger than the number of rounds, iterates until the last round.",
          "_cursor": "The round from where to start withdrawing.",
          "_taskID": "The ID of the associated task."
        }
      },
      "challengeTranslation(uint256,string)": {
        "details": "Challenges the translation of a specific task. Requires challenger's deposit in wei.",
        "params": {
          "_evidence": "A link to evidence using its URI. Ignored if not provided.",
          "_taskID": "The ID of the task."
        }
      },
      "changeGovernor(address)": {
        "details": "Changes the governor of this contract.",
        "params": {
          "_governor": "A new governor."
        }
      },
      "changeLoserStakeMultiplier(uint256)": {
        "details": "Changes the percentage of arbitration fees that must be paid as a fee stake by the party that lost the previous round.",
        "params": {
          "_loserStakeMultiplier": "A new value of the multiplier of the appeal cost that the party that lost the previous round has to pay. In basis points."
        }
      },
      "changeReviewTimeout(uint256)": {
        "details": "Changes the time allocated for review phase.",
        "params": {
          "_reviewTimeout": "A new value of the time allotted for reviewing a translation. In seconds."
        }
      },
      "changeSharedStakeMultiplier(uint256)": {
        "details": "Changes the percentage of arbitration fees that must be paid by parties as a fee stake if there was no winner and loser in the previous round.",
        "params": {
          "_sharedStakeMultiplier": "A new value of the multiplier of the appeal cost in case when there is no winner/loser in previous round. In basis point."
        }
      },
      "changeTranslationMultiplier(uint256)": {
        "details": "Changes the multiplier for translator's deposit.",
        "params": {
          "_translationMultiplier": "A new value of the multiplier for calculating translator's deposit. In basis points."
        }
      },
      "changeWinnerStakeMultiplier(uint256)": {
        "details": "Changes the percentage of arbitration fees that must be paid as a fee stake by the party that won the previous round.",
        "params": {
          "_winnerStakeMultiplier": "A new value of the multiplier of the appeal cost that the winner of the previous round has to pay. In basis points."
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_WETH": "Address of the WETH token contract.",
          "_arbitrator": "The arbitrator of the contract.",
          "_arbitratorExtraData": "Extra data for the arbitrator.",
          "_loserStakeMultiplier": "Multiplier of the appeal cost that the loser has to pay for a round. In basis points.",
          "_reviewTimeout": "Time in seconds during which a translation can be challenged.",
          "_sharedStakeMultiplier": "Multiplier of the appeal cost that submitter must pay for a round when there is no winner/loser in the previous round. In basis points.",
          "_translationMultiplier": "Multiplier for calculating translator's deposit. In basis points.",
          "_uniswapFactory": "Address of the UniswapPair factory contract.",
          "_winnerStakeMultiplier": "Multiplier of the appeal cost that the winner has to pay for a round. In basis points."
        }
      },
      "createTask(uint256,address,uint256,uint256,string)": {
        "details": "Creates a task based on provided details. Requires a value of maximal price to be deposited.",
        "params": {
          "_deadline": "The deadline for the translation to be completed.",
          "_maxPrice": "A maximal price of the translation. This value should be deposited by the requester.",
          "_metaEvidence": "A URI of meta-evidence object for task submission.",
          "_minPrice": "A minimal price of the translation.",
          "_token": "The token that will be paid for the completion of the task."
        },
        "returns": {
          "taskID": "The ID of the created task."
        }
      },
      "fundAppeal(uint256,uint8)": {
        "details": "Takes up to the total amount required to fund a side of an appeal. Reimburses the rest. Creates an appeal if all sides are fully funded.",
        "params": {
          "_side": "The party that pays the appeal fee.",
          "_taskID": "The ID of challenged task."
        }
      },
      "getChallengeValue(uint256)": {
        "details": "Gets the deposit required for challenging the translation.",
        "params": {
          "_taskID": "The ID of the task."
        },
        "returns": {
          "deposit": "The challengers's deposit."
        }
      },
      "getContributions(uint256,uint256,address)": {
        "details": "Gets the contributions made by a party for a given round of task's appeal.",
        "params": {
          "_contributor": "The address of the contributor.",
          "_round": "The position of the round.",
          "_taskID": "The ID of the task."
        },
        "returns": {
          "contributions": "The contributions."
        }
      },
      "getDepositValue(uint256)": {
        "details": "Gets the deposit required for self-assigning the task.",
        "params": {
          "_taskID": "The ID of the task."
        },
        "returns": {
          "deposit": "The translator's deposit."
        }
      },
      "getNumberOfRounds(uint256)": {
        "details": "Gets the number of rounds of the specific task.",
        "params": {
          "_taskID": "The ID of the task."
        },
        "returns": {
          "_0": "The number of rounds."
        }
      },
      "getRoundInfo(uint256,uint256)": {
        "details": "Gets the information on a round of a task.",
        "params": {
          "_round": "The round to be queried.",
          "_taskID": "The ID of the task."
        },
        "returns": {
          "feeRewards": "The amount available to pay for fees provide rewards to the winenr side.",
          "hasPaid": "Whether or not a given party has paid the full fees for the round.",
          "paidFees": "The amount paid by each party in the round."
        }
      },
      "getTaskCount()": {
        "details": "Gets the total number of created tasks.",
        "returns": {
          "_0": "The number of created tasks."
        }
      },
      "getTaskParties(uint256)": {
        "details": "Gets the addresses of parties of a specified task.",
        "params": {
          "_taskID": "The ID of the task."
        },
        "returns": {
          "parties": "The addresses of requester, translator and challenger."
        }
      },
      "getTaskPrice(uint256)": {
        "details": "Gets the current price of a specified task. Returns 0 if the task can no longer be assigned.",
        "params": {
          "_taskID": "The ID of the task."
        },
        "returns": {
          "price": "The price of the task."
        }
      },
      "getTaskPriceInETH(uint256)": {
        "details": "Gets the current price of a specified task in ETH. Returns 0 if the task can no longer be assigned.",
        "params": {
          "_taskID": "The ID of the task."
        },
        "returns": {
          "priceETH": "The price of the task."
        }
      },
      "reimburseRequester(uint256)": {
        "details": "Reimburses the requester if no one picked the task or the translator failed to submit the translation before deadline.",
        "params": {
          "_taskID": "The ID of the task."
        }
      },
      "rule(uint256,uint256)": {
        "details": "Gives a ruling for a dispute. Can only be called by the arbitrator.  The purpose of this function is to ensure that the address calling it has the right to rule on the contract and to invert the ruling in the case a party loses from lack of appeal fees funding.",
        "params": {
          "_disputeID": "ID of the dispute in the Arbitrator contract.",
          "_ruling": "Ruling given by the arbitrator. Note that 0 is reserved for \"Refuse to arbitrate\"."
        }
      },
      "submitEvidence(uint256,string)": {
        "details": "Submit a reference to evidence. EVENT.",
        "params": {
          "_evidence": "A link to evidence using its URI.",
          "_taskID": "A task evidence is submitted for."
        }
      },
      "submitTranslation(uint256,string)": {
        "details": "Submits translated text for a specific task.",
        "params": {
          "_taskID": "The ID of the task.",
          "_translation": "A URI to the translated text."
        }
      },
      "withdrawFeesAndRewards(address,uint256,uint256)": {
        "details": "Witdraws contributions of appeal rounds. Reimburses contributions if no disputes were raised. If a dispute was raised, sends the fee stake rewards and reimbursements proportional to the contributions made to the winner of a dispute.",
        "params": {
          "_beneficiary": "The address that made contributions.",
          "_round": "The round from which to withdraw.",
          "_taskID": "The ID of the associated task."
        }
      }
    },
    "title": "LinguoToken  Linguo is a decentralized platform where anyone can submit a document for translation and have it translated by freelancers.  It has no platform fees and disputes about translation quality are handled by Kleros jurors.  This version of the contract is made for ERC-20 tokens support.  NOTE: This contract trusts that the Arbitrator is honest and will not reenter or modify its costs during a call.  The arbitrator must support appeal period.  Also note that this contract trusts that the tokens will not allow the recipients to block the transfers.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3957,
        "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
        "label": "WETH",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ERC20)961"
      },
      {
        "astId": 3959,
        "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
        "label": "uniswapFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3963,
        "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
        "label": "governor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3965,
        "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
        "label": "arbitrator",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IArbitrator)113"
      },
      {
        "astId": 3967,
        "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
        "label": "arbitratorExtraData",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes_storage"
      },
      {
        "astId": 3969,
        "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
        "label": "reviewTimeout",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3971,
        "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
        "label": "translationMultiplier",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3973,
        "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
        "label": "sharedStakeMultiplier",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3975,
        "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
        "label": "winnerStakeMultiplier",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3977,
        "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
        "label": "loserStakeMultiplier",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3980,
        "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
        "label": "tasks",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Task)3938_storage)dyn_storage"
      },
      {
        "astId": 3984,
        "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
        "label": "disputeIDtoTaskID",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)3_storage": {
        "base": "t_address_payable",
        "encoding": "inplace",
        "label": "address payable[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_bool)3_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[3]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Round)3955_storage)dyn_storage": {
        "base": "t_struct(Round)3955_storage",
        "encoding": "dynamic_array",
        "label": "struct LinguoToken.Round[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Task)3938_storage)dyn_storage": {
        "base": "t_struct(Task)3938_storage",
        "encoding": "dynamic_array",
        "label": "struct LinguoToken.Task[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20)961": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IArbitrator)113": {
        "encoding": "inplace",
        "label": "contract IArbitrator",
        "numberOfBytes": "20"
      },
      "t_enum(Status)3904": {
        "encoding": "inplace",
        "label": "enum LinguoToken.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)3_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)3_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Round)3955_storage": {
        "encoding": "inplace",
        "label": "struct LinguoToken.Round",
        "members": [
          {
            "astId": 3942,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "paidFees",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 3946,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "hasPaid",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_bool)3_storage"
          },
          {
            "astId": 3948,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "feeRewards",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3954,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "contributions",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_array(t_uint256)3_storage)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Task)3938_storage": {
        "encoding": "inplace",
        "label": "struct LinguoToken.Task",
        "members": [
          {
            "astId": 3910,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(ERC20)961"
          },
          {
            "astId": 3912,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "submissionTimeout",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3914,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "minPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3916,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "maxPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3918,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "status",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(Status)3904"
          },
          {
            "astId": 3920,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "lastInteraction",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3922,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "requester",
            "offset": 0,
            "slot": "6",
            "type": "t_address_payable"
          },
          {
            "astId": 3924,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "requesterDeposit",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 3926,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "sumDeposit",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3930,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "parties",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_address_payable)3_storage"
          },
          {
            "astId": 3932,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "disputeID",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 3935,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "rounds",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_struct(Round)3955_storage)dyn_storage"
          },
          {
            "astId": 3937,
            "contract": "contracts/0.7.x/LinguoToken.sol:LinguoToken",
            "label": "ruling",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "3258000",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "MULTIPLIER_DIVISOR()": "316",
      "VERSION_ID()": "284",
      "WETH()": "1203",
      "acceptTranslation(uint256)": "infinite",
      "amountWithdrawable(uint256,address)": "infinite",
      "arbitrator()": "1137",
      "arbitratorExtraData()": "infinite",
      "assignTask(uint256)": "infinite",
      "batchRoundWithdraw(address,uint256,uint256,uint256)": "infinite",
      "challengeTranslation(uint256,string)": "infinite",
      "changeGovernor(address)": "22121",
      "changeLoserStakeMultiplier(uint256)": "21198",
      "changeReviewTimeout(uint256)": "21133",
      "changeSharedStakeMultiplier(uint256)": "21132",
      "changeTranslationMultiplier(uint256)": "21153",
      "changeWinnerStakeMultiplier(uint256)": "21109",
      "createTask(uint256,address,uint256,uint256,string)": "infinite",
      "disputeIDtoTaskID(uint256)": "1218",
      "fundAppeal(uint256,uint8)": "infinite",
      "getChallengeValue(uint256)": "infinite",
      "getContributions(uint256,uint256,address)": "infinite",
      "getDepositValue(uint256)": "infinite",
      "getNumberOfRounds(uint256)": "2184",
      "getRoundInfo(uint256,uint256)": "infinite",
      "getTaskCount()": "1117",
      "getTaskParties(uint256)": "infinite",
      "getTaskPrice(uint256)": "7951",
      "getTaskPriceInETH(uint256)": "infinite",
      "governor()": "1161",
      "loserStakeMultiplier()": "1140",
      "reimburseRequester(uint256)": "infinite",
      "reviewTimeout()": "1161",
      "rule(uint256,uint256)": "infinite",
      "sharedStakeMultiplier()": "1140",
      "submitEvidence(uint256,string)": "infinite",
      "submitTranslation(uint256,string)": "infinite",
      "tasks(uint256)": "10606",
      "translationMultiplier()": "1118",
      "uniswapFactory()": "1160",
      "winnerStakeMultiplier()": "1161",
      "withdrawFeesAndRewards(address,uint256,uint256)": "infinite"
    },
    "internal": {
      "calculateContribution(uint256,uint256)": "78",
      "executeRuling(uint256,uint256)": "infinite"
    }
  }
}
